{
  "data": {
    "repository": {
      "issues": {
        "edges": [
          {
            "node": {
              "title": "Fragment will throw an error during unmount if it’s content is edited outside react",
              "state": "OPEN",
              "number": 15985,
              "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nIf direct child node of fragment was replaced by other node not created by react — react will throw `Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.` when Fragment will be unmounted\r\n\r\n**Smallest reproduction case:**\r\nhttps://codesandbox.io/s/react-replace-element-fragment-error-0rkqw\r\nSecond and fourth buttons will produce error on second click.\r\nWhat’s strange that if you’ll delete the content in fragment in content editable div (button 5) — it will not throw error.\r\n\r\n**What is the expected behavior?**\r\nReact not throwing error. Maybe warning?\r\nWhy? because any browser extension in any browser can replace any node and this will lead to broken application.\r\nOtherwise documentation should be improved and state clearly that fragment is unsafe to use if there is a chance of third party DOM modification. (I understand why it is happening in the first place, but not agree that it should).\r\nAlso it would be great to include DOM path into original error if possible, because for example we create captured this error using sentry and it is unclear where it is happening and it’s quite hard to improve the situation.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.8.3, no, I think it was broken all along",
              "createdAt": "2019-06-25T12:25:40Z",
              "author": {
                "login": "wwwsevolod",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/1140057?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/15985",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "npm run build in branch 16.8.6",
              "state": "CLOSED",
              "number": 15986,
              "body": "when run (npm run build)\r\nget error:\r\nError: Cannot find module 'react'\r\n    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:580:15)\r\n    at Function.resolve (internal/modules/cjs/helpers.js:30:19)\r\n    at createBundle (D:\\E\\study\\vscode\\react-16.8.6\\scripts\\rollup\\build.js:452:31)\r\n    at buildEverything (D:\\E\\study\\vscode\\react-16.8.6\\scripts\\rollup\\build.js:614:11)\r\nerror Command failed with exit code 1.",
              "createdAt": "2019-06-25T14:19:33Z",
              "author": {
                "login": "yellowjian",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/17594267?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/15986",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "getDerivedStateFromError for Control Flow",
              "state": "OPEN",
              "number": 15988,
              "body": "Spinoff from https://github.com/facebook/react/pull/15797#issuecomment-504782329.\r\n\r\nWe might want to offer a way to \"bubble\" control flow up the tree a la Algebraic Effects. `throw Redirect()` is a canonical example. However, we want them to bypass the normal error boundaries. So it probably needs to be a first-class API.",
              "createdAt": "2019-06-25T17:05:13Z",
              "author": {
                "login": "gaearon",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/810438?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/15988",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "Component: Reconciler",
                      "color": "f9a798"
                    }
                  },
                  {
                    "node": {
                      "name": "Type: Feature Request",
                      "color": "c7def8"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Collapsible Error Dialogs for the Ecosystem",
              "state": "OPEN",
              "number": 15989,
              "body": "Spinoff from https://github.com/facebook/react/pull/15797#issuecomment-504782329.\r\n\r\nBoth in React Native and Create React App, redboxes are full screen. But in React, most errors are recoverable. Even with accidental runtime crashes it's useful to look \"underneath\" to see whether your boundary worked as expected, and to have an idea of the end user experience.\r\n\r\nWe could solve this with a collapsed-by-default floating error panel that just shows a list of messages. You can click to expand. We could also use this as an opportunity to unify the RN and web designs.",
              "createdAt": "2019-06-25T17:09:07Z",
              "author": {
                "login": "gaearon",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/810438?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/15989",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "Component: Developer Tools",
                      "color": "fbca04"
                    }
                  },
                  {
                    "node": {
                      "name": "Type: Feature Request",
                      "color": "c7def8"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "[Proposal] Children by type",
              "state": "OPEN",
              "number": 15991,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nReact.Children functions are very limited by what they offer.\r\n\r\n**Proposal**\r\n\r\nAdd the function byType to React.Children. That would take two arguments, the first one being the children (array, object, function, etc) and the second one being a component or the component's name. And would return an array of the components that match that. It also could have the second parameter optional, making it organize the return by an object that would return all children separated by type.\r\n\r\n**Example**\r\nThis example is not complete and should not be compared to the final proposal function\r\n\r\n``` javascript\r\nfunction byType (children, type : string) {\r\n    return React.Children.map(children, child => type == child.type.name? child:null);\r\n}\r\n```",
              "createdAt": "2019-06-25T21:50:49Z",
              "author": {
                "login": "RafaelCorreaQuantik",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/43479034?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/15991",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "useEffect issue in production mode",
              "state": "CLOSED",
              "number": 15994,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug.\r\n**What is the current behavior?**\r\nI use \"useEffect\" in my code as below:\r\n![image](https://user-images.githubusercontent.com/17432911/60167049-e2a9a200-9834-11e9-816b-1cc1f4068b7c.png)\r\nIn development mode, everything is correct, but in production mode, we will get this error:\r\n![image](https://user-images.githubusercontent.com/17432911/60167189-27353d80-9835-11e9-855c-5a75158278cc.png)\r\nI guess useEffect doesn't check whether the returned value is a function when unmounted in production mode, so I modified this structure as below and it works fine both in development and production mode.\r\n![image](https://user-images.githubusercontent.com/17432911/60167476-c0fcea80-9835-11e9-814d-b63561863db3.png)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nAbove description.\r\n**What is the expected behavior?**\r\nin production, when we use this structure, we should get right behavior as same as development mode:\r\n![image](https://user-images.githubusercontent.com/17432911/60167049-e2a9a200-9834-11e9-816b-1cc1f4068b7c.png)\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\"react\": \"16.8.6\",\r\n\"react-dom\": \"16.8.6\"",
              "createdAt": "2019-06-26T09:23:31Z",
              "author": {
                "login": "jajk",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/17432911?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/15994",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "expected 1 but found 2 instances with node type: \"undefined\"",
              "state": "OPEN",
              "number": 15995,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug?\r\n**What is the current behavior?**\r\nSo I have this component Im trying to test. It is one component with 3 fields, one input, one select, and then based on that select  the third is shown or not. \r\nSo far Im trying to write one text only for the input field (the first one).\r\n\r\nSo here is the code:\r\n```React\r\n it(\"test input field\", () => {\r\n    const newProps = {\r\n      something: initialState,\r\n      dispatch: reducer\r\n    };\r\n    const component = TestRenderer.create(\r\n      <ContextBR.Provider value={{ ...newProps }}>\r\n        <ComponentWithTheFields/>\r\n      </ContextBR.Provider>\r\n    );\r\n    const rootInstance = component.root;\r\n    console.log(rootInstance);\r\n    const inputField = rootInstance.findByType(\"input\");\r\n\r\n    inputField.props.onChange({ target: { value: \"\" } });\r\n    expect(inputField.props.value).toBe(\"\");\r\n\r\n    inputField.props.onChange({ target: { value: \"blue\" } });\r\n    expect(inputField.props.value).toBe(\"blue\");\r\n  });\r\n``` \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\nI wanted to get the input field \r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n```React\r\n    <div>\r\n      <div className=\"container\">\r\n        <h3 className=\"h3\">Info</h3>\r\n        <div className=\"row\">\r\n          <div className=\"col\">\r\n            <label htmlFor=\"test\">test:</label>\r\n            <input\r\n              id=\"myID\"\r\n              value={aPropThatIsAnEmptyString}\r\n              type=\"text\"\r\n              className={`form-control form-control-sm ${style.fieldsGap}`}\r\n              onChange={e => setTest(e.target.value)}\r\n              placeholder=\"test\"\r\n            />\r\n          </div>\r\n          <div className=\"col\">\r\n            <label htmlFor=\"ddlType\">test2:</label>\r\n            <select\r\n              id=\"SelectId\" \r\n```\r\n\r\n\r\nbut Im getting \r\n\r\nExpected 1 but found 2 instances with node type: \"undefined\" \r\n\r\n\r\n      29 |     const rootInstance = component.root;\r\n      30 |     console.log(rootInstance);\r\n    > 31 |     const inputField= rootInstance.findByType(\"input\");\r\n         |                                   ^\r\n      32 | \r\n      33 |     inputField.props.onChange({ target: { value: \"\" } });\r\n      34 |     expect(inputField.props.value).toBe(\"\");",
              "createdAt": "2019-06-26T09:52:53Z",
              "author": {
                "login": "C-odes",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/42934761?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/15995",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Lifecycle methods not get called when component updating",
              "state": "CLOSED",
              "number": 15996,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nSome lifecycle methods are not get called when component updating.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/cool-proskuriakova-pz40f\r\n\r\n**What is the expected behavior?**\r\n\r\nAlert message after click the `Toggle` button in the first time.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact: 16.8.6\r\nreact-dom: 16.8.6\r\nreact-scripts: 3.0.1\r\n",
              "createdAt": "2019-06-26T16:23:40Z",
              "author": {
                "login": "yangmingshan",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/13585043?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/15996",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "[ESLint] 'exhaustive-deps' lint rule - false warning and incorrect correction",
              "state": "CLOSED",
              "number": 16001,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI have eslint autofix my errors. For the first time, it caused a bug rather than helped.\r\nEslint will auto add dependencies that cause the code to improperly function. In my example, it added onClick. Then it would request me to change onClick to a useCallback (FYI, I did not show the useCallback changes). If I did make those changes, it would disrupt the order the test buttons disappear.\r\n**What is the current behavior?**\r\n```\r\nCurrent code\r\nfunction TimeoutAlert({ id, message, deleteAlert, autoClose }) {\r\n  const onClick = () => deleteAlert(id);\r\n  useEffect(() => {\r\n    if (autoClose) {\r\n      const timer = setTimeout(onClick, 2000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [autoClose, onClick]);\r\n  return (\r\n    <p>\r\n      <button onClick={onClick}>\r\n        {message} {id}\r\n      </button>\r\n    </p>\r\n  );\r\n}\r\n```\r\nCodeSandbox link: https://codesandbox.io/s/multiple-alert-countdown-294lc\r\n\r\n**What is the expected behavior?**\r\n```\r\nfunction TimeoutAlert({ id, message, deleteAlert, autoClose }) {\r\n  const onClick = () => deleteAlert(id);\r\n  useEffect(() => {\r\n    if (autoClose) {\r\n      const timer = setTimeout(onClick, 2000);\r\n      return () => clearTimeout(timer);\r\n    }\r\n  }, [autoClose]);\r\n  return (\r\n    <p>\r\n      <button onClick={onClick}>\r\n        {message} {id}\r\n      </button>\r\n    </p>\r\n  );\r\n}\r\n```\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nreact 16.8.6\r\neslint-plugin-react-hooks 1.6.0",
              "createdAt": "2019-06-26T20:11:05Z",
              "author": {
                "login": "TriStarGod",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/8272754?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16001",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "[eslint-plugin-react-hooks] Crash when referencing \"arguments\"",
              "state": "OPEN",
              "number": 16003,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\n\r\nReferencing `arguments` from inside an arrow function (i.e. the `arguments` from the nearest non-arrow function) causes a crash in the eslint plugin.\r\n\r\n```\r\nTypeError: Cannot read property 'type' of undefined\r\nOccurred while linting /.../src/react.tsx:92\r\n    at gatherDependenciesRecursively (.../node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:1032:21)\r\n    at visitFunctionExpression (.../node_modules/eslint-plugin-react-hooks/cjs/eslint-plugin-react-hooks.development.js:985:7)\r\n    at .../node_modules/eslint/lib/util/safe-emitter.js:45:58\r\n    at Array.forEach (<anonymous>)\r\n    at Object.emit (.../node_modules/eslint/lib/util/safe-emitter.js:45:38)\r\n    at NodeEventGenerator.applySelector (.../node_modules/eslint/lib/util/node-event-generator.js:251:26)\r\n    at NodeEventGenerator.applySelectors (.../node_modules/eslint/lib/util/node-event-generator.js:280:22)\r\n    at NodeEventGenerator.enterNode (.../node_modules/eslint/lib/util/node-event-generator.js:294:14)\r\n    at CodePathAnalyzer.enterNode (.../node_modules/eslint/lib/code-path-analysis/code-path-analyzer.js:632:23)\r\n    at .../node_modules/eslint/lib/linter.js:752:32\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nThis doesn't reproduce in codesandbox as CRA hasn't been updated yet.\r\n\r\nThis snippet is enough to cause the crash:\r\n\r\n```js\r\nfunction useMyHook(/*...*/) {\r\n  useEffect(() => {\r\n    arguments // crash because reference.resolved.defs is empty\r\n  }, [])\r\n}\r\n```\r\n\r\nThis, however, does not crash:\r\n\r\n```js\r\nfunction useMyHook(/*...*/) {\r\n  useEffect(function() {\r\n    arguments // ok\r\n    return () => arguments // also ok\r\n  }, [])\r\n}\r\n```\r\n\r\nIt is possible this depends on using the `@typescript-eslint/parser` parser; but I think scope analysis is run internally by `eslint` so it shouldn't matter.\r\n\r\n**What is the expected behavior?**\r\nNo crash\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n`eslint-plugin-react-hooks@1.6.1`, `react-hooks/exhaustive-deps` rule",
              "createdAt": "2019-06-27T02:06:47Z",
              "author": {
                "login": "Jessidhia",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/73085?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16003",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "Component: ESLint Rules",
                      "color": "f7afdb"
                    }
                  },
                  {
                    "node": {
                      "name": "Type: Bug",
                      "color": "b60205"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Which University did Gaearon graduate from?",
              "state": "CLOSED",
              "number": 16004,
              "body": "@gaearon Which University did you graduate from?",
              "createdAt": "2019-06-27T03:08:08Z",
              "author": {
                "login": "fridaymeng",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/2741314?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16004",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "[eslint-plugin-react-hooks]: auto-fix may crash app when deps is array/object types",
              "state": "OPEN",
              "number": 16006,
              "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n**What is the current behavior?**\r\n\r\nbefore run lint, my code is\r\n\r\n```js\r\nconst App = () => {\r\n  const [options, setOptions] = useState([]);\r\n  const [includesA, setIncludesA] = useState(false);\r\n\r\n  const optionCodes = options.map(({ value }) => value);\r\n\r\n  useEffect(() => {\r\n    if (optionCodes.includes('A')) {\r\n      setIncludesA(true);\r\n    }\r\n  }, [optionCodes.join(',')]); // transform array to string for compare \r\n\r\n  return <div onClick={() => setOptions([{ value: 'A' }])}></div>;\r\n};\r\n\r\n```\r\nafter 'eslint --fix'\r\n\r\n```js\r\n\r\nconst App = () => {\r\n  const [options, setOptions] = useState([]);\r\n  const [includesA, setIncludesA] = useState(false);\r\n\r\n  const optionCodes = options.map(({ value }) => value);\r\n\r\n  useEffect(() => {\r\n    if (optionCodes.includes('A')) {\r\n      setIncludesA(true);\r\n    }\r\n  }, [optionCodes]); // optionCodes.join(',') was replaced ! \r\n\r\n  return <div onClick={() => setOptions([{ value: 'A' }])}></div>;\r\n};\r\n```\r\nThe original code works fine and after 'eslint --fix' it just crashed cuz `optionCodes` **is an array** created in render function, the effect runs every time and crash my app with error :\r\n\r\n> react-dom.development.js:55 Uncaught Invariant Violation: Maximum update depth exceeded.\r\n\r\nI've also notice this rule fix will add other params used by effect function to deps automatically. Like\r\n\r\n```js\r\n// original code\r\nconst {id} = props\r\nuseEffect(()=> {\r\n  console.log(id)\r\n},[])\r\n\r\n// after fix\r\nconst {id} = props\r\nuseEffect(()=> {\r\n  console.log(id)\r\n}, [id]) // id has been add to deps\r\n```\r\n\r\n\r\n**What is the expected behavior?**\r\n\r\nFor 'eslint --fix', what we expect is 'try to fix lint error automatically and **SAFELY**', SAFELY means **DO NOT change my code logic**, run 'eslint --fix' should never change your design or crash your app .\r\n\r\nIt would be better to tell developers to fix the deps by lint message, not auto fix it in dangerous way.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\neslint-plugin-react-hooks@1.6.1",
              "createdAt": "2019-06-27T04:53:35Z",
              "author": {
                "login": "kpaxqin",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/6220685?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16006",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "[Flare] Rethinking Focus",
              "state": "OPEN",
              "number": 16009,
              "body": "I think we need to rethink how focus works in React. React Flare is the perfection opportunity to allow us to do this, so here are some of my thoughts. None of these ideas wouldn't be possible if it weren't for the great ideas from @sebmarkbage, @devongovett and @necolas have had. Furthermore, the discussions in https://github.com/facebook/react/pull/16000, https://github.com/facebook/react/pull/15848 and https://github.com/facebook/react/pull/15849 got me thinking on a better system.\r\n\r\n## Focus is a mess on the DOM, so let's not use the DOM\r\n\r\nFocusing on the DOM is a mess today. We couple ideas around ideas around things like `tabIndex` and whether a specific browser treats something as focusable. This is very much a hard-coded disaster where no one really agrees on a good formula for success. Not to mention, that this just doesn't translate well for a declarative UI. How does one tab to a specific node that isn't focusable? How does one use keyboard arrows to navigate a table using keyboard arrows?\r\n\r\nThen there's implementation. Without relying on an attribute on an element or a `ref`, it's very hard to say: \"Hey look, let's focus to this node, given this criteria\". Not to mention the performance overhead of doing this: querying or \"collecting\" focusable elements is an expensive O(n) task, which doesn't scale for large applications well. I noticed that wrapping the an internal large app with `<FocusScope>` and then collecting all focusable nodes took over 850ms on Android using Chrome. Querying the DOM nodes took even longer.\r\n\r\nLastly, we can't use the DOM with React Native and the story for handling focus with React Flare is important. If we instead had a React system for handling focus, then both the web and RN would be consistent and performant.\r\n\r\n## Accessible components\r\n\r\nWe already have the `<Focus>` and `<FocusScope>` event components. We could extend on React Flare and introduce a way of layering accessibility logic on to host components. In this I introduce a new API called `createAccessibleComponent`, but really it could be anything – ignore the naming! This is purely hypothetical discussion for now.\r\n\r\n```jsx\r\n// input is not focusable\r\n<FocusScope>\r\n  <input type=\"text\" placeholder=\"Enter your username\" /> \r\n</FocusScope>\r\n\r\nconst FocusableInput = ReactDOM.createAccessibleComponent((props, focusable) => {\r\n  return <input tabIndex={focusable ? 0 : -1} {...props} />;\r\n});\r\n\r\n// now it's focusable\r\n<FocusScope>\r\n  <FocusableInput\r\n    type=\"text\"\r\n    placeholder=\"Enter your username\"\r\n    focusable={true}\r\n  />\r\n</FocusScope>\r\n```\r\n\r\nIf you don't use a `FocusScope`, then the normal DOM behaviour will continue to work as expected. `FocusScope` will only care about these new types of accessible component.\r\n\r\n## The focus manager should be encapsulated and relative to `FocusScope`\r\n\r\nIn order for focus management to be powerful, it needs to be baked into React. Event responders like `FocusScope` can let the manager know what scope it should be interacting with given a particular `<Focus>` that focuses occur in. `FocusScope` will also fully override the browser tabbing behaviour (like it does now) to ensure tabbing works as expected:\r\n\r\n```jsx\r\nimport { focusManager } from 'react-events/focus';\r\n\r\nfocusManager.getFocusedNode();\r\nfocusManager.getFocusedId();\r\nfocusManager.focusFirst(isRTL?: boolean = false);\r\nfocusManager.focusLast(isRTL?: boolean = false);\r\nfocusManager.focusPrevious(fromId?: string, isRTL?: boolean = false);\r\nfocusManager.focusNext(fromId?: string, isRTL?: boolean = false, );\r\nfocusManager.focusById(id: string);\r\n\r\nconst FocusableDiv = ReactDOM.createAccessibleComponent((props, focusable) => {\r\n  return <div tabIndex={focusable ? 0 : -1} {...props} />;\r\n});\r\n\r\n<FocusScope onMount={() => focusManager.focusFirst()}>\r\n  <FocusableDiv focusable={true} />\r\n  <FocusableDiv focusable={true} />\r\n  <div tabIndex={0}>You can't focus this</div>\r\n</FocusScope>\r\n```\r\n\r\nFocusing by `focusId` will propagate until an `focusId` is found. So this would matter for cases such:\r\n\r\n```jsx\r\nconst FocusableDiv = ReactDOM.createAccessibleComponent((props, focusable, focusId) => {\r\n  return <div tabIndex={focusable ? 0 : -1} {...props} />;\r\n});\r\n\r\n<FocusScope>\r\n  <FocusableDiv focusable={true} focusId=\"focus-me\" />\r\n  <FocusScope>\r\n    <FocusableDiv focusable={true} focusId=\"focus-me\" />\r\n  </FocusScope>\r\n</FocusScope>\r\n```\r\n\r\nIf `focusManager.focusById('focus-me);` was used on the inner `FocusScope`, it would focus the inner button. If used on the outer `FocusScope`, it would focus the outer button. If the outer `FocusScope` didn't have an id that matched, then it would propagate the lookup to the inner `FocusScope`.\r\n\r\nDoing this, it makes it possible to apply keyboard navigation:\r\n\r\n```jsx\r\nfunction handleKeyPress(key) {\r\n  if (isValidArrowKey(key)) {\r\n    const currentId = focusManager.getFocusedId();\r\n    const nextId = findNextId(currentId, key);\r\n    focusManager.focusById(nextId);\r\n  }\r\n}\r\n<FocusScope onKeyPress={handleKeyPress}>\r\n  <FocousableCell focusable={true} focusId=\"AA\" />\r\n  <FocousableCell focusable={true} focusId=\"AB\" />\r\n  <FocousableCell focusable={true} focusId=\"AC\" />\r\n  <FocousableCell focusable={true} focusId=\"BA\" />\r\n  <FocousableCell focusable={true} focusId=\"BB\" />\r\n  <FocousableCell focusable={true} focusId=\"BC\" />\r\n  <FocousableCell focusable={true} focusId=\"CA\" />\r\n  <FocousableCell focusable={true} focusId=\"CB\" />\r\n  <FocousableCell focusable={true} focusId=\"CC\" />\r\n</FocusScope>\r\n```\r\n\r\nFurthermore, `<FocusScope>`s can also have `focusId`s that allows you to move focus to a specific scope. That particular event component can then act upon receiving focus `<FocusScope onFocus={...}>`.\r\n\r\n## It can simplify `<Focus>`\r\n\r\n```jsx\r\n<Focus onFocus={...}>\r\n  <div>\r\n    <FocusableDiv focusable={true} />\r\n  </div>\r\n</Focus>\r\n```\r\n\r\nBefore, focus would only be of the direct child of the `<Focus>` component. This made it somewhat problematic when you wanted to find the focusable element that was not a direct child. Focus no longer needs to be coupled with \"bubbling up\" through the DOM, but rather it bubbles from accessible component to event components. So doing this, will still result in the nearest focusable child being passed to the `Focus`:\r\n\r\n```jsx\r\n<Focus onFocus={...}>\r\n  <div>\r\n    <FocusableDiv focusable={true}>\r\n      <FocusableDiv focusable={true} />\r\n    </FocusableDiv>\r\n  </div>\r\n</Focus>\r\n```\r\n\r\n## This can be fast too\r\n\r\nIn terms of performance, we can actually fast-path how this all works because we're no longer using the DOM, but event components within the Flare event system. We'd have optimized data collections that ensure that the least possible time is taken traversing focusable elements by leveraging a separate internal data structure that is separate from the Fiber and DOM structures. The cost is that this will take additional memory and time to construct when a focus scope gets mounted/unmounted. Given this shouldn't be a rapid event, it's worth the trade-off.\r\n\r\nAlso, given we're not wrapping `FocusScope` with a context provider (as mentioned in the FocusManager PR), which should get improved performance from not needing to do context lookups and traversals.\r\n\r\n## `Focus` and `FocusScope`, `focusManager`\r\n\r\nGiven that they now share underlying implementation details, they all should come from the same module. So going forward, it makes sense to import them all form `react-events/focus`.\r\n\r\nThe nice benefit from this is that this actually fixes a bunch of issues with the current implementation, where we can't use `FocusScope` as a hooked event component. With the changes outlined in this issue, it should allow for them to be used via the `useEvent` hook.\r\n\r\n## We can build in great dev tooling around the focus system\r\n\r\nWe can build in great support for debugging in React Dev Tools when working with focus and \r\nthis will help improve accessibility within apps that use `<Focus>`, `<FocusScope>` and `focusManager`. Plus it would support any future APIs that add accessibility benefits to components.",
              "createdAt": "2019-06-27T07:28:34Z",
              "author": {
                "login": "trueadm",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/1519870?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16009",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "React Flare",
                      "color": "63f2ff"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "unable to access env variables in html files other than index.html",
              "state": "CLOSED",
              "number": 16010,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\nThe environment variables are just acting as normal text in HTML files.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/elated-butterfly-r2jpe\r\n\r\nIn the above example, I am not able to use the `env variables` in the `index.html` and `callback.html`. This is different from CRA in which, I can at least access the `env variables` in the `index.html`.\r\n\r\n**What is the expected behavior?**\r\nThe title of `callback.html` should be changed according to the `REACT_APP_CALLBACK_TITLE` in the `.env` file.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact -> 16.8.6\r\nreact-dom -> 16.8.6\r\nreact-scripts -> 3. 0.1\r\nbrowser: Google Chrome -> Version 75.0.3770.100 (Official Build) (64-bit)\r\nNope, it didn't work in previous versions of React.",
              "createdAt": "2019-06-27T11:00:29Z",
              "author": {
                "login": "aditya81070",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/30300772?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16010",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "Resolution: Support Redirect",
                      "color": "106099"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "react-test-renderer with jest.resetModules: invariant violiation for hooks",
              "state": "CLOSED",
              "number": 16012,
              "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nWhen writing a test with jest (and requiring a component with hooks after `jest.resetModules()`), `react-test-renderer` complains \r\n> Invariant Violation: Hooks can only be called inside the body of a function component. (https://fb.me/react-invalid-hook-call)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n1. Write a functional component using a hook\r\n2. Create a test using jest\r\n3. Call `jest.resetModules`\r\n4. Require the module\r\n5. Call `renderer.create(<MyComponent />).toJSON()` \r\n6. Run test, it fails with the error above\r\n\r\n**What is the expected behavior?**\r\nThe test should not crash on hooks in tests where resetModules() is called\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.8. as hooks were introduced",
              "createdAt": "2019-06-27T14:13:00Z",
              "author": {
                "login": "entropitor",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/896093?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16012",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "Component: Hooks",
                      "color": "c2f27b"
                    }
                  },
                  {
                    "node": {
                      "name": "Component: Test Renderer",
                      "color": "006b75"
                    }
                  },
                  {
                    "node": {
                      "name": "Resolution: Needs More Information",
                      "color": "fffde7"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "HotReload Rendered more hooks than during the previous render when commenting out code",
              "state": "CLOSED",
              "number": 16016,
              "body": "**What is the current behavior?**\r\n\r\n```javascript\r\nfunction usePromotion() {\r\n  const [isOpen, setState] = useState(false);\r\n\r\n  useEffect(() => {\r\n    \r\n  })\r\n}\r\n\r\n```\r\n\r\nSteps to reproduce:\r\n1. Comment out a hook/some hooks.\r\n\r\n**What is the expected behavior?**\r\nDebatable, in my opinion this should be more of a warning. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n- Chrome[Version 75.0.3770.100 (Official Build) (64-bit)] \r\n- macOS 10.14.4 (18E226)\r\n- Gatsby 2.8.2\r\n- React 16.8.6",
              "createdAt": "2019-06-28T16:42:33Z",
              "author": {
                "login": "MANTENN",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/22017882?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16016",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "useEffect nested under the suspense and lazy, the second empty array parameter does not work",
              "state": "CLOSED",
              "number": 16018,
              "body": "**Do you want to request a *feature* or report a *bug*?**\r\nMaybe bug?\r\n\r\n**What is the current behavior?**\r\nuseEffect nested under the suspense and lazy, the second empty array parameter does not work\r\n```js\r\nimport React, { useEffect } from 'react';\r\nfunction Loader(props){\r\n    const Component = lazy(() => {\r\n        useEffect(() => {\r\n            // fetchData and then update store\r\n        }, []); // [] does not work. it will always fetchData when component rerender, but not just once.\r\n    });\r\n    return <Suspense fallback={<div>Loading...</div>}>\r\n        <Component />\r\n    </Suspense>\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nWhen useEffect nested under the suspense and lazy, the second empty array parameter does not work.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n`\"react\": \"^16.5.2\"`",
              "createdAt": "2019-06-29T02:13:01Z",
              "author": {
                "login": "carvinlo",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/5674761?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16018",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Update parent component passing lazy initialized refs",
              "state": "OPEN",
              "number": 16020,
              "body": "I have a Parent to Children component relationship.\r\nThe Parent passes refs to each child.\r\nThe refs are initialized lazy because so are the children since their render is dependent on a prop array value.\r\nWhen the prop array value is passed to the Parent component I initialize the ref array with `useMemo` and then the children are rendered and are being passed the references respectively.\r\nMy problem is that after the refs are set no additional renders in the Parent component happens and I rely on the children refs to calculate Parent style.\r\nHere's an example:\r\n```\r\nimport React, {useEffect, useRef, useMemo} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './SvgMap.scss';\r\nimport classNames from \"classnames\";\r\nimport {Tooltip} from 'react-svg-tooltip';\r\n\r\nconst propTypes = {\r\n    map: PropTypes.node.isRequired,\r\n    marker: PropTypes.node,\r\n    coordinates: PropTypes.array,\r\n    transform: PropTypes.func,\r\n    backgroundColor: PropTypes.string,\r\n    backgroundHoverColor: PropTypes.string,\r\n    bubbleWidth: PropTypes.number\r\n};\r\n\r\nconst DEFAULT_BUBBLE_WIDTH = 425;\r\nconst DEFAULT_BUBBLE_HEIGHT = 125;\r\n\r\nconst SvgMap = ({map, marker, coordinates, transform, className, backgroundColor, backgroundHoverColor, bubbleWidth, bubbleHeight}) => {\r\n    const mapContainerRef = useRef();\r\n    const glasspaneRef = useRef();\r\n    const mapRef = useRef();\r\n    const markersRef = useMemo(() => {\r\n        return coordinates.map(() => ({ref: React.createRef()}))\r\n    }, [coordinates]);\r\n\r\n    useEffect(() => {\r\n        if (mapRef.current) {\r\n            const paths = mapRef.current.getElementsByTagName(\"path\");\r\n            for (let i = 0; i < paths.length; i++) {\r\n                const path = paths[i];\r\n                const pathStyle = path.getAttribute(\"style\").replace(/fill: [^;]+;\\s/, '');\r\n                if (backgroundColor) {\r\n                    path.setAttribute(\"style\", `${pathStyle} fill: ${backgroundColor};`);\r\n                    path.addEventListener(\"mouseleave\", e => {\r\n                        e.currentTarget.setAttribute(\"style\", `${pathStyle} fill: ${backgroundColor};`);\r\n                    });\r\n                }\r\n                if (backgroundHoverColor) {\r\n                    path.addEventListener(\"mouseenter\", e => {\r\n                        e.currentTarget.setAttribute(\"style\", `${pathStyle} fill: ${backgroundHoverColor};`);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }, [mapRef, backgroundColor, backgroundHoverColor]);\r\n\r\n    const getMarkersStyle = () => {\r\n        if (markersRef.length && markersRef[0].ref.current) {\r\n            return {\r\n                transform: `translate(-${markersRef[0].ref.current.width.baseVal.value / 2}px, -${markersRef[0].ref.current.height.baseVal.value}px)`\r\n            };\r\n        }\r\n    };\r\n\r\n    const renderMarkers = () => {\r\n        if (mapContainerRef.current && mapRef.current && marker && coordinates.length) {\r\n            const mapGeoViewBox = mapRef.current.getAttribute(\"mapsvggeoviewbox\").split(' ');\r\n            return coordinates.map((coordinate, i) => {\r\n                return <svg>\r\n                    {markersRef.length && markersRef[i].current &&\r\n                    <Tooltip triggerRef={markersRef[i]} containerRef={glasspaneRef}>\r\n                        <rect x={2} y={2} width={10} height={5} rx={.5} ry={.5} fill='black'/>\r\n                        <text x={5} y={5} fontSize={2} fill='white'>Yay!</text>\r\n                    </Tooltip>}\r\n                    {marker.render({\r\n                            ...transform(coordinate.lat, coordinate.lng, mapRef.current.width.baseVal.value, mapRef.current.height.baseVal.value, mapGeoViewBox[0], mapGeoViewBox[2], mapGeoViewBox[3])\r\n                        },\r\n                        markersRef[i].ref\r\n                    )}\r\n                </svg>;\r\n            })\r\n        }\r\n        return null;\r\n    };\r\n\r\n    return <svg className={classNames(\"map-container\", className)} ref={mapContainerRef}>\r\n        <svg ref={glasspaneRef} className=\"glasspane\" viewBox=\"0 0 100 100\"/>\r\n        <g className=\"map-wrapper\">\r\n            {map.render({}, mapRef)}\r\n        </g>\r\n        <g className=\"markers\" style={getMarkersStyle()}>\r\n            {renderMarkers()}\r\n        </g>\r\n    </svg>;\r\n};\r\n\r\nSvgMap.propTypes = propTypes;\r\n\r\nexport default SvgMap;\r\n```\r\n\r\n",
              "createdAt": "2019-06-30T10:31:18Z",
              "author": {
                "login": "Kashio",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/16501683?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16020",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "[Proposal] Return a Promise from ReactDOM.render()",
              "state": "CLOSED",
              "number": 16021,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA backward-compatible feature.\r\n\r\n**What is the current behavior?**\r\n\r\nThe `ReactDOM.render()` function only accepts a callback, which is called whenever the component is rendered, and doesn't compliment asynchronous Promise-based programs as well as it could do.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe `ReactDOM.render()` function could return a Promise that resolves after the component has first been rendered.\r\n\r\n```js\r\nReactDOM.render(<Component />, container).then( ... )\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nN/A\r\n",
              "createdAt": "2019-06-30T12:39:44Z",
              "author": {
                "login": "simon-robertson",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/20401399?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16021",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "rewrite with typescript?",
              "state": "CLOSED",
              "number": 16022,
              "body": "as we know typescript get very popular now\r\nso does you have a plan that rewrite with ts?\r\n",
              "createdAt": "2019-07-01T08:54:34Z",
              "author": {
                "login": "zhangenming",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/21235555?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16022",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Dynamic compilation in react",
              "state": "CLOSED",
              "number": 16023,
              "body": " Is it possible to compile components dynamically (on demand) and load them then ?\r\nAs of now , what i know is if you use dynamic import, it builds a context chunk in the build/compile time and later downloads it if required by user. That is faster than the static import but it still goes through the files in my directory as mentioned in import during compile time.\r\n\r\nsay i do ->\r\nimport(`./${filename}`).then(component)=>{ /*code here*/}.catch(()=>console.log(\"no such file))\r\n\r\nhere filename is the user input . So when i compile this i see it going through all the files in the current directory and giving me syntax error warnings for the files ?\r\n\r\n So my question is can we not compile those files on demand and load them then ?\r\nPlease assume that the imported files are error free in all manner.\r\nAlso , the query is for React . I know it can be done in AngularJs.\r\nThanks in advance.",
              "createdAt": "2019-07-01T11:27:45Z",
              "author": {
                "login": "PRASHANT1104",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/23419053?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16023",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Application gets hanged when 200 input fields gets render",
              "state": "OPEN",
              "number": 16025,
              "body": "In my React component I have to render around 200 input fields. when I render component, browser gets hanged and screen becomes blank(I checked task manager their browser starts taking around 5000 MB space and CPU utilization reaches to 100%). If I refresh the page then same component is rendering very easily and screen also fine. This is issue I am facing only in my production environment and in dev environment it works absolutely fine on first render without refresh.\r\n\r\nThis happens only in Google crome. When I do same thing in Mozila it works fine.\r\n\r\nPlease suggest any solution. I am using React 16.2.0.\r\n\r\nThanks in advance.",
              "createdAt": "2019-07-01T18:07:50Z",
              "author": {
                "login": "ajAnshul",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/22659308?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16025",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "[eslint-plugin-react-hooks] using a hook in a try {} catch {} block not allowed",
              "state": "CLOSED",
              "number": 16026,
              "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nUsing a hook within a `try {} catch {}` block throws an eslint error:\r\n\r\nThe component:\r\n```typescript\r\nexport function Things({ parentId, searchTerm }: Props) {\r\n  try {\r\n    const { data: things, loading } = useThings(parentId, {\r\n      include: ['other'],\r\n      extra_fields: { things: 'foo' },\r\n      filter: { other_name: searchTerm.trim() },\r\n      page: { size: 20 },\r\n    });\r\n\r\n    return (\r\n      <Content>\r\n        {!things ? (\r\n          <Loading />\r\n        ) : (\r\n          <ThingsList things={things} loading={loading} />\r\n        )}\r\n      </Content>\r\n    );\r\n  } catch {\r\n    return (\r\n      <Content>\r\n        <ThingsList roles={[]} loading={false} />\r\n      </Content>\r\n    );\r\n  }\r\n}\r\n```\r\nWhere `useThings()` is a custom hook that performs a `fetch` in a `useEffect()` hook.\r\n\r\n\r\n**What is the expected behavior?**\r\nI think this should be acceptable because the hook is always called.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\neslint-plugin-react-hooks@1.6.1",
              "createdAt": "2019-07-01T21:03:02Z",
              "author": {
                "login": "jboler",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/38783?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16026",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "[Proposal] Global state, AKA Redux, built natively into React.",
              "state": "CLOSED",
              "number": 16028,
              "body": "Proposal:\r\n\r\nThe most top level component, like an `App.js` can create a global state store like Redux that all child components can access with a method like: `setGlobalState()`.\r\nNot with props or callback functions passed into props.\r\n\r\nRedux is a bit complex to achieve a task of global state across components and is hard for people to learn and understand. At the high level of React development, most people are using Redux. It would be cool if we could include the functionality of Redux natively into React with a simpler set of methods.\r\n\r\nMy Idea:\r\n\r\n``` \r\nconstructor(props){\r\n   this.state = {\r\n       // normal local component state as already implemented\r\n   }\r\n   this.globalState = {\r\n      // only 1 instance of globalState can be declared in application, preferably in the most top- \r\n      level component.\r\n  }\r\n}\r\n```\r\n\r\nMethods:\r\n\r\n```\r\n.setState() // uses local component state, as already implemented\r\n.setGlobalState() // uses most top level component state, ex. `App.js`\r\nthis.state.foobar // normal access of state\r\nthis.globalState.foobar // global level access \r\n```\r\n\r\nRoast me if this won't work or it's a bad idea, but I'd be interested in seeing if this could be done and would be of valuable to the project.\r\n\r\nThanks\r\n\r\n\r\n\r\n",
              "createdAt": "2019-07-02T01:56:25Z",
              "author": {
                "login": "ChrisEddy",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/27584221?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16028",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Invariant Violation: Minified React error #321",
              "state": "OPEN",
              "number": 16029,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n**What is the current behavior?**\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n",
              "createdAt": "2019-07-02T05:44:10Z",
              "author": {
                "login": "lianrenjie",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/45447022?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16029",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "useEffect doesn't work as componentDidMount while using real time connections ",
              "state": "OPEN",
              "number": 16031,
              "body": "```js\r\nuseEffect(() => {\r\n    connection.on('received', (user, message) => {\r\n      if (userName && userName !== user) {\r\n        audio.play()\r\n      }\r\n      const newMessages = [...replies, {userName: user, text: message}]\r\n      setReplies(newMessages)\r\n    })\r\n  }, [connection, replies, audio, userName])\r\n```\r\nI want ```connection.on``` at ```componentDidMount``` or ngOnInit(in Angular). \r\n\r\n- If I add dependencies in the dependency array the ```connection.on``` gets called that many times the dependency states get updated.\r\n- If I don't add the dependencies the states (userName, replies) take the initial values even if they get updated by that time. And I get warning for not adding the dependencies in dependency array.\r\n- If I remove the dependency array the ```connection.on``` gets called that many times any state gets updated.\r\n\r\nCan you please provide any solution for that?",
              "createdAt": "2019-07-02T07:43:08Z",
              "author": {
                "login": "md-shahnawaz08",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/41724979?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16031",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Search filter does not work across the react-table on setState : React JS",
              "state": "CLOSED",
              "number": 16032,
              "body": "I am using react-table for data grid purposes. All I am trying to implement  a search filter that searches data across the table and filters down by using filter method. I have maintained a separate component for Searching and I set the table's data inside search component. The filtering breaks when the characters are being deleted from the search filter. Am I doing something wrong here. \r\n\r\nSandbox: https://codesandbox.io/s/stoic-gould-kw9iq\r\n\r\nSearchComponent\r\n------------------\r\n``````````````````````````\r\nimport React from \"react\";\r\nimport { Input } from \"semantic-ui-react\";\r\n\r\nexport default class DropDownComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      filteredData: [],\r\n      searchInput: \"\"\r\n    };\r\n  }\r\n\r\n  handleChange = event => {\r\n    this.setState({ searchInput: event.target.value }, () =>\r\n      this.globalSearch()\r\n    );\r\n  };\r\n\r\n  globalSearch = () => {\r\n    let { searchInput } = this.state;\r\n    let filteredData = this.props.data.filter(value => {\r\n      return (\r\n        value.firstName.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n        value.status.toLowerCase().includes(searchInput.toLowerCase()) ||\r\n        value.visits\r\n          .toString()\r\n          .toLowerCase()\r\n          .includes(searchInput.toLowerCase())\r\n      );\r\n    });\r\n    this.props.handleSetData(\r\n      (filteredData.length > 0 && filteredData) || searchInput\r\n        ? filteredData\r\n        : this.props.data\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <br />\r\n        <Input\r\n          size=\"large\"\r\n          name=\"searchInput\"\r\n          value={this.state.searchInput || \"\"}\r\n          onChange={this.handleChange}\r\n          label=\"Search\"\r\n        />\r\n        <br />\r\n        <br />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n``````````````````````````\r\nApp Component\r\n-----------------\r\n```````````````````````\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport GlobalSearchComponent from \"./GlobalSearchComponent\";\r\nimport ReactTable from \"react-table\";\r\nimport \"react-table/react-table.css\";\r\nimport \"./styles.css\";\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: []\r\n      columns: [],\r\n      searchInput: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n    this.getColumns();\r\n  }\r\n\r\n  getColumns = () => {\r\n    let columns = [\r\n      {\r\n        Header: \"First Name\",\r\n        accessor: \"firstName\"\r\n      {\r\n        Header: \"Status\",\r\n        accessor: \"status\"\r\n      },\r\n      {\r\n        Header: \"Visits\",\r\n        accessor: \"visits\"\r\n      }\r\n    ];\r\n    this.setState({ columns });\r\n  };\r\n\r\n  getData = () => {\r\n    let data = [\r\n      { firstName: \"aaaaa\", status: \"Pending\", visits: 155 },\r\n      { firstName: \"aabFaa\", status: \"Pending\", visits: 155 },\r\n      { firstName: \"adaAAaaa\", status: \"Approved\", visits: 1785 },\r\n      { firstName: \"aAaaaa\", status: \"Approved\", visits: 175 },\r\n      { firstName: \"adaSaaa\", status: \"Cancelled\", visits: 165 },\r\n      { firstName: \"aasaaa\", status: \"Cancelled\", visits: 157 },\r\n      { firstName: \"aweaaaaaewea\", status: \"Approved\", visits: 153 },\r\n      { firstName: \"adaAAadsdweaa\", status: \"Approved\", visits: 17585 },\r\n      { firstName: \"aAaaaa\", status: \"Approved\", visits: 175 }\r\n    this.setState({ data });\r\n  };\r\n\r\n  handleSetData = data => {\r\n    console.log(data);\r\n    this.setState({ data });\r\n  };\r\n\r\n  render() {\r\n    let { data, columns } = this.state;\r\n    return (\r\n      <div>\r\n        <GlobalSearchComponent\r\n          data={this.state.data}\r\n          handleSetData={this.handleSetData}\r\n        />\r\n        <ReactTable\r\n          data={data}\r\n          columns={columns}\r\n          defaultPageSize={10}\r\n          className=\"-striped -highlight\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n",
              "createdAt": "2019-07-02T09:05:11Z",
              "author": {
                "login": "velsonjr",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/42905121?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16032",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Inconsistent act behaviour for react-test-renderer",
              "state": "CLOSED",
              "number": 16034,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nWhen rendering a component that has cascading updates from multiple `useEffect` hooks we see a different behaviour when using `react-test-renderer` than when we use `react-dom` or `react-testing-library` to render the same component.\r\n\r\n[Here is a codesandbox to demponstrate the issue.](https://codesandbox.io/s/useeffect-with-react-test-renderer-repro-64guc?fontsize=14&module=%2Fsrc%2Fexample.test.js&previewwindow=tests)\r\n\r\nThe test that uses `react-test-renderer` fails where as the other 2 tests (`react-dom` and `@testing-library/react`) pass for the same component.  If you check the console for the logging it outputs, it has:\r\n\r\n```sh\r\nbefore react-test-renderer render \r\nrunning null null\r\ntriggering setAfterChanged \r\ntriggering setTestUpdated \r\nrunning Object {foo: \"bar\"} null\r\nafter react-test-renderer render Object {afterChanged: null}\r\n\r\nbefore rtl render \r\nrunning null null\r\ntriggering setAfterChanged \r\ntriggering setTestUpdated \r\nrunning Object {foo: \"bar\"} null\r\ntriggering setAfterChanged \r\nrunning Object {foo: \"bar\"} Object {foo: \"bar\"}\r\nafter rtl render Object {afterChanged: Object}\r\n\r\nbefore react-dom render \r\nrunning null null\r\ntriggering setAfterChanged \r\ntriggering setTestUpdated \r\nrunning Object {foo: \"bar\"} null\r\ntriggering setAfterChanged \r\nrunning Object {foo: \"bar\"} Object {foo: \"bar\"}\r\nafter react-dom render Object {afterChanged: Object}\r\n```\r\n\r\nAs you can see, the non `react-test-renderer` renders are performing more updates before the `act` call (assumed internal `act` call for RTL) returns.\r\n\r\n**What is the expected behavior?**\r\n\r\nI would expect the effect flushing behaviour to be the same, regardless of the renderer, so all the tests would pass and the console logs would be:\r\n\r\n```sh\r\nbefore react-test-renderer render \r\nrunning null null\r\ntriggering setAfterChanged \r\ntriggering setTestUpdated \r\nrunning Object {foo: \"bar\"} null\r\ntriggering setAfterChanged \r\nrunning Object {foo: \"bar\"} Object {foo: \"bar\"}\r\nafter react-test-renderer render Object {afterChanged: Object}\r\n\r\nbefore rtl render \r\nrunning null null\r\ntriggering setAfterChanged \r\ntriggering setTestUpdated \r\nrunning Object {foo: \"bar\"} null\r\ntriggering setAfterChanged \r\nrunning Object {foo: \"bar\"} Object {foo: \"bar\"}\r\nafter rtl render Object {afterChanged: Object}\r\n\r\nbefore react-dom render \r\nrunning null null\r\ntriggering setAfterChanged \r\ntriggering setTestUpdated \r\nrunning Object {foo: \"bar\"} null\r\ntriggering setAfterChanged \r\nrunning Object {foo: \"bar\"} Object {foo: \"bar\"}\r\nafter react-dom render Object {afterChanged: Object}\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n`react`: `16.8.6`\r\n`react-dom`: `16.8.6`\r\n`react-test-renderer`: `16.8.6`\r\n`@testing-library/react`: `8.0.4`\r\n",
              "createdAt": "2019-07-02T11:33:57Z",
              "author": {
                "login": "mpeyper",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/23029903?v=4"
              },
              "assignees": {
                "nodes": [
                  {
                    "name": "Sunil Pai",
                    "avatarUrl": "https://avatars2.githubusercontent.com/u/18808?v=4"
                  }
                ]
              },
              "url": "https://github.com/facebook/react/issues/16034",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Return render function in hooks ?",
              "state": "CLOSED",
              "number": 16037,
              "body": "Example: \r\n\r\nhttps://codesandbox.io/s/usemodal-z715z\r\n\r\n```jsx\r\nconst useModal = () => {\r\n  const [visible, setVisible] = useState(false)\r\n\r\n  const showModal = useCallback(() => setVisible(true), [])\r\n  const hideModal = useCallback(() => setVisible(false), [])\r\n\r\n  const renderModal = () => (\r\n    <AntdModal visible={visible} onCancel={hideModal} onOk={hideModal} />\r\n  )\r\n\r\n  return {\r\n    showModal,\r\n    hideModal,\r\n    renderModal,\r\n  }\r\n}\r\n\r\nconst App = () => {\r\n  const {renderModal, showModal} = useModal()\r\n\r\n  return (\r\n    <div>\r\n      <Button onClick={showModal}>Show</Button>\r\n      {renderModal()}\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nI found this way to extract some render things and some local state in hooks. I'm wondering if there is performance issue or bad practice. \r\n\r\nI tried to return Component at beginning and then find [OldModal !== NewModal](https://www.reddit.com/r/reactjs/comments/9yq1l8/how_do_you_feel_about_a_hook_returning_components/) issue. But how about just return partial renderer?\r\n\r\n",
              "createdAt": "2019-07-02T16:11:48Z",
              "author": {
                "login": "stonexer",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/6255130?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16037",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Antipattern? Pass state dispatcher as a prop to child component",
              "state": "CLOSED",
              "number": 16043,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nI have question\r\n\r\nCan I pass state dispatcher (second arg from `useState`) as a prop to child component. Is it antipattern or allowable practice?\r\n\r\nFor example. I have a component `TextField`. I'm using it everywhere. And everyvere I need save its value to state. For example:\r\n\r\n```javascript\r\nimport { default as React, setState, useCallback } from 'react';\r\nimport { TextField } from '@component';\r\n\r\nconst SomeComponent = (props) => {\r\n  const [value, setValue] = useState('');\r\n \r\n const handleChange = useCallback((e) => setValue(e.target.value), []);\r\n\r\n  return (\r\n    <div>\r\n      <TextField onChange={handleChange} />\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nI'm tired to write handleChange everywhere when `TextField` had used... I want make this case simpliest.\r\n\r\nCan I pass `setValue` to TextField as a props (instead adding onChange) and implement setting value inside of TextField?\r\n\r\n```javascript\r\n// ...\r\n  <TextField valueDispatcher={setValue} />\r\n//...\r\n```",
              "createdAt": "2019-07-03T02:00:13Z",
              "author": {
                "login": "vyushin",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/8006957?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16043",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "How to share component instance, Don't unmount?",
              "state": "OPEN",
              "number": 16044,
              "body": "I have a component.\r\n```jsx\r\nimport TradingView from 'react-tradingview-widget'\r\n```\r\nIt's loading time too long and I need it in many pages.\r\nbut parent component unmount, it too.\r\nNo... <TradingView /> don't unmount. I need it save in memory and show anywhere have it's component.\r\n",
              "createdAt": "2019-07-03T02:15:46Z",
              "author": {
                "login": "Lursun",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/11616295?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16044",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Keep getting `TypeError: Cannot read property 'scrollTop' of null` in a custom hook...",
              "state": "CLOSED",
              "number": 16045,
              "body": "I made a hook to get the scroll position of a component, like so:\r\n\r\n```js\r\nfunction useScrollPosition() {\r\n\r\n  function getScroll() {\r\n    return {\r\n      x: document.getElementById('ContentContainer').scrollTop,\r\n      y: document.getElementById('ContentContainer').scrollLeft\r\n    }\r\n  }\r\n\r\n  const [scrollPosition, setScrollPosition] = useState(getScroll)\r\n\r\n  useEffect(() => {\r\n    \r\n    function handleScroll() {\r\n      setScrollPosition(getScroll())\r\n    }\r\n\r\n    window.addEventListener('scroll', handleScroll)\r\n    return () => window.removeEventListener('scroll', handleScroll)\r\n  }, []) // Empty array ensures that effect is only run on mount and unmount\r\n\r\n  return scrollPosition\r\n}\r\n```\r\n\r\n...and implemented it in the same file, like so:\r\n\r\n```jsx\r\nconst ContentContainer = (props) => {\r\n\r\n  const scroll = useScrollPosition();\r\n\r\n  return (\r\n    <Main id='ContentContainer'>\r\n      <ScrollInfo>\r\n        Vertical position: {scroll.x}px / Horizontal Position: {scroll.y}px\r\n      </ScrollInfo>\r\n      {props.children}\r\n    </Main>\r\n  )\r\n}\r\n\r\nexport default ContentContainer\r\n```\r\n\r\n...and i keep getting the same error:\r\n\r\n<img width=\"797\" alt=\"Screenshot 2019-07-03 00 38 46\" src=\"https://user-images.githubusercontent.com/7884263/60572670-f4a2ad80-9d2a-11e9-8162-d4fe1c973f87.png\">\r\n\r\nIf I disable the hook and the app runs properly, I can then find the scroll position in the console just fine.\r\n\r\nAny thoughts as to why I might be getting `null` back for something that clearly isn't `null` when the app loads without this hook enabled?",
              "createdAt": "2019-07-03T07:42:21Z",
              "author": {
                "login": "rchrdnsh",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/7884263?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16045",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "scheduler package contains wrong es module flag",
              "state": "OPEN",
              "number": 16050,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n**bug**\r\n\r\n**What is the current behavior?**\r\n\r\nThe cjs version of scheduler includes the following line:\r\n\r\n```javascript\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n```\r\n\r\nhttps://unpkg.com/scheduler@0.14.0/cjs/scheduler.development.js\r\n\r\nBut it's definitely not an ES module.\r\n\r\nThe flag brokes our webpack build.\r\n\r\n**What is the expected behavior?**\r\n\r\nThe cjs version should not include a `__esModule` flag.\r\n",
              "createdAt": "2019-07-03T16:57:25Z",
              "author": {
                "login": "yesmeck",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/465125?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16050",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Nested react router with user authentication",
              "state": "CLOSED",
              "number": 16052,
              "body": "I am trying to make my app use nested React routers to navigate through my app but am not managing to do the following: I have a router to switch between the login page and the homepage and a router in the homepage to switch between the body content \r\n\r\n1. Return to login page on clicking log out. If i click logout the url goes to /login but does not render the right component. Upon refreshing the page the right component is rendered. \r\n\r\n2. When inputing a direct page in the url eg. localhost:3000/about, the page doesn't load anything\r\n\r\nMy desired functionality is the following: \r\n1. On load of localhost:3000/ - If user is logged in it loads the \"About\" component ELSE if user is logged out it is redirected to /login\r\n2. On load of localhost:3000/contact - If user is logged in it loads the homepage and switches the body content to show the contact component , if user is logged out it redirects to the login page but on login takes the user to the contact component \r\n3. Clicking log out returns to the login component \r\n\r\nI have added the source code here: https://codesandbox.io/embed/loving-engelbart-x3ns3\r\nThe first router is in App/App.jsx and the body content router is in _pages/HomePage.jsx\r\nUnfortunately i had to remove the login authentication so the login does not work but maybe there is a clear issue with my code that can be outlined.\r\n\r\n\r\n\r\nThanks",
              "createdAt": "2019-07-03T19:25:58Z",
              "author": {
                "login": "paufar",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/36677885?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16052",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Can't get dynamic data to show up in react component using several hooks...",
              "state": "OPEN",
              "number": 16053,
              "body": "I have a react component using several hooks in which I'm trying to output the data from `getBoundingCLientRect()` into a box on the site.\r\n\r\nThis is the code:\r\n\r\n\r\n```jsx\r\nconst ContentContainer = (props) => {\r\n\r\n  const elementRef = useRef()\r\n\r\n  function useScrollPosition() {\r\n  \r\n    function getScroll() {\r\n      const data = elementRef.current ? \r\n        elementRef.current.getBoundingCLientRect() : 0\r\n      const { bottom, top, left, right, x, y } = data\r\n      return { bottom, top, left, right, x, y }\r\n    }\r\n\r\n    const [scrollPosition, setScrollPosition] = useState(getScroll)\r\n  \r\n    useEffect(() => {\r\n      \r\n      function handleScroll() {\r\n        setScrollPosition(getScroll())\r\n      }\r\n  \r\n      window.addEventListener('scroll', handleScroll)\r\n      return () => window.removeEventListener('scroll', handleScroll)\r\n    }, []) // Empty array ensures that effect is only run on mount and unmount\r\n  \r\n    return scrollPosition\r\n  }\r\n\r\n  const scroll = useScrollPosition();\r\n\r\n  return (\r\n    <Main ref={elementRef}>\r\n      <ScrollInfo>\r\n        From Top: {scroll.top}px <br/>\r\n        From Bottom: {scroll.bottom}px <br/>\r\n        From Left: {scroll.left}px <br/>\r\n        From right: {scroll.right}px <br/>\r\n        Vertical Scroll: {scroll.y}px <br/>\r\n        Horizontal Scroll: {scroll.x}px <br/>\r\n      </ScrollInfo>\r\n      {props.children}\r\n    </Main>\r\n  )\r\n}\r\n\r\nexport default ContentContainer\r\n```\r\n\r\n...but no dynamic data shows up in the window where it's supposed to be displayed:\r\n\r\n<img width=\"177\" alt=\"Screenshot 2019-07-03 16 15 17\" src=\"https://user-images.githubusercontent.com/7884263/60630205-e9dd2c80-9dad-11e9-897c-bdccfa5fa042.png\">\r\n\r\nno errors show up in the terminal or the console, but it just does not work. Stumped at the current moment, and don't know what to fix to make it work.\r\n",
              "createdAt": "2019-07-03T23:22:08Z",
              "author": {
                "login": "rchrdnsh",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/7884263?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16053",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Undo, snapshot, hydration of state",
              "state": "OPEN",
              "number": 16056,
              "body": "With Concurrent mode, storing all state in a single atom is no longer an option while taking advantage of prioritization. However, there are a number of benefits that a single atom provided such as history, and ease of snapshot + hydration.\r\n\r\nReact seems perfectly poised to be the location where these features could exist. Otherwise, we run into the continued problem that some component using local state can't be serialized/undone.\r\n\r\nI've contemplated trying to pry open the internals of React and patching useState myself to experiment adding these features, but wanted to open up an issue first to see what current thoughts were on providing these functions at the framework level.",
              "createdAt": "2019-07-04T02:53:21Z",
              "author": {
                "login": "Lokeh",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/2687140?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16056",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Adding proxy to package.json breaks browser reload on change",
              "state": "CLOSED",
              "number": 16057,
              "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nAdding proxy with any website to package.json breaks browser reload on change. Removing it, resolves the issue.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n1. `npx create-react-app test`\r\n2. Add \"proxy\": \"any website\" to package.json,\r\n3. `npm start`\r\n4. Make any change in index.js\r\n5. Browser didn't reload\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nLatest create-react-app version. Ubuntu 18.04\r\n",
              "createdAt": "2019-07-04T03:39:51Z",
              "author": {
                "login": "Hisagr",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/11569140?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16057",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "React fails when mapping through an immutable array in JSX",
              "state": "OPEN",
              "number": 16058,
              "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nWhen `map`ing over an immu array in JSX, react fails with `Cannot add property validated, object is not extensible`.\r\nThe error is coming from `warnForMissingKey`\r\n\r\nSee: https://codesandbox.io/s/thirsty-mountain-j3bir for a failing example.\r\n\r\n**What is the expected behavior?**\r\nThe rendering to flow as normal - in the supplied case, to see an unordered list with one element in it.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact `16.8.6`, \r\nUbuntu: 18.04.2 LTS\r\nChrome: Version 75.0.3770.80 (Official Build) (64-bit)\r\n\r\n",
              "createdAt": "2019-07-04T05:51:42Z",
              "author": {
                "login": "tristanHessell",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/5189308?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16058",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "[Feature request] Improved reconciliation/diffing algorithm",
              "state": "CLOSED",
              "number": 16059,
              "body": "Currently, the reconciliation process, if finds change in element type, would mark and unmount the element and its sub nodes. And I have a big problem with it, I can't think of any way around but to ask for an improvement in the React core itself.\r\n\r\nFor example, I have Route A and Route B, and in both routes, I have same Layout element, and I can't find a way to change route without un-mounting my Layout component\r\n\r\nIf there could be a way to mark the Route elements, and let it by pass the diffing algorithm, and go on checking the Layout elements like normal, then would be god sent improvement for me\r\n\r\nThanks a lot, and after 15 years of software development, React is the best thing ever for me\r\n\r\nQuan",
              "createdAt": "2019-07-04T09:02:11Z",
              "author": {
                "login": "quanla",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/8519807?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16059",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Show console warning when StrictMode is active",
              "state": "OPEN",
              "number": 16061,
              "body": "I am extracting this feature request from #12906, which was already closed when the feature was requested, so was likely lost.\r\n\r\n**What is the current behaviour?**\r\n\r\nWhen `<React.StrictMode>` is used, some functions will be intentionally double-invoked such as the render method. This is fine, but can lead to confusion for developers months later, as they try to figure out why something is being called twice during debugging, etc.\r\n\r\n**What is the expected behaviour?**\r\n\r\nFrom my comment on the other thread:\r\n\r\n> The problem is that if strict mode was added long ago, it is not obvious what the source of the double-render is (I was hunting react-router and redux logic).\r\n>\r\n> I think it would be nice if strict mode printed a console statement when used anywhere on the page and currently enabled (i.e. in dev mode), akin to the existing \"Download the React DevTools for a better development experience: https://fb.me/react-devtools\" advert.\r\n>\r\n> Something like \"Strict mode is enabled; some lifecycle methods including constructors and render will be double-invoked to check for side-effects\"\r\n\r\nThe suggestion received some support on the original issue, and I think adding this feature would save developer time and confusion when working on codebases which have enabled strict mode during development.",
              "createdAt": "2019-07-04T10:39:22Z",
              "author": {
                "login": "davidje13",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/3287761?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16061",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "hooks clear effect function run behind DidUpdate erveytime",
              "state": "OPEN",
              "number": 16062,
              "body": "hello，i try hooks;but when i try to clear effect,just like componentWillUnmount();but hooks clear effect function run just behind component did update everytime,\r\n\r\n```\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nexport default function ScrollView({ count }) {\r\n  useEffect(() => {\r\n    const timeId = setInterval(() => {}, 2000);\r\n    return function clear() {\r\n      console.log('你好' + count);\r\n      clearInterval(timeId);\r\n    };\r\n  });\r\n\r\n  return <div>counting + count</div>;\r\n}\r\n```",
              "createdAt": "2019-07-04T10:44:20Z",
              "author": {
                "login": "cjl-df",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/3387329?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16062",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Am i using context horribly wrong?",
              "state": "CLOSED",
              "number": 16064,
              "body": "Hi there, my first time asking a question here :)\r\n\r\nI don't have any problems at the moment (loving the react hooks btw).\r\n\r\nI just want to ask for ideas on how to handle a particular scenario i have and if i am using the context hooks properly.\r\n\r\nSo my situation is with a form like this:\r\n\r\nContext file: \r\n\r\n```\r\nexport const StepsContext = createContext({\r\n    steps: []\r\n});\r\n\r\n```\r\n\r\nThis would be the \"parent\" component. \r\n```\r\nconst steps = useContext(StepsContext);\r\n\r\nconst sendForm = () => {\r\n  callEndpoint(steps);\r\n};\r\n\r\nreturn <Form>\r\n\r\n  <Input />  // Default input always present\r\n  <Steps /> // Component that dynamically adds more inputs as i click on a button.\r\n\r\n  <button onClck={sendForm} />\r\n</Form>  \r\n```\r\n\r\nInside the Steps component\r\n```\r\n// This component adds more inputs as i click on a button and sets a \"config\" state with the \r\n// values of each input, in an array that looks kinda like [ 0: { value: \"value\" }  ]\r\n// Each new index is a new input\r\n\r\nconst context = useContext(StepsContext);\r\nconst [inputs, setInputs] = useState([]);\r\n\r\nreturn <button onClick={addNewInput}/>\r\n\r\nconst addNewInput = () => {\r\n // Do something to add new input and set the config, so if we have two the config looks like:\r\n// [ 0: { value: \"somethig\"}, 1: { value: \"else\" } ]\r\n\r\n// And now i update the context so the parent knows how many steps we have and their config\r\ncontext.steps = newConfig;\r\n}\r\n```\r\n\r\nThis works and i get the data where i want it, but for some reason this assignment i do: `context.steps = newConfig;` feels wrong hehe.\r\n\r\nAm i doing it right? \r\nCan anyone throw any ideas at me on how to approach this or do it in a nicer way?\r\n\r\nThanks and kind regards.\r\n\r\n",
              "createdAt": "2019-07-04T13:19:58Z",
              "author": {
                "login": "jbures",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/29199771?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16064",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "react-dom/server - how to ignore trans-pile some values with renderToString method",
              "state": "CLOSED",
              "number": 16068,
              "body": "**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nhow to ignore trans-pile some values with renderToString method?\r\nmore details: [https://stackoverflow.com/questions/56897860/reactdomserver-how-to-ignore-trans-pile-some-values-with-rendertostring-method](https://stackoverflow.com/questions/56897860/reactdomserver-how-to-ignore-trans-pile-some-values-with-rendertostring-method)\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n",
              "createdAt": "2019-07-05T08:10:37Z",
              "author": {
                "login": "ebrahimiaval",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/9008892?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16068",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Better prop types warnigs",
              "state": "CLOSED",
              "number": 16069,
              "body": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature\r\n\r\n**What is the current behavior?**\r\nReact prop types warning doesn't reveal info on the component's instance\r\n\r\n**What is the expected behavior?**\r\nPrint also the component's props\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nN/A\r\n\r\nThe current warnings point the developer only to the source code, and it would be AMAZING if we'll easily see which component instance caused the warnings. Consider a list with hundreds of items, each rendering a component. ATM there's no convenient way to track down the renegade instance.\r\n\r\nSo instead of the current behavior:\r\n\r\n![image](https://user-images.githubusercontent.com/6963212/60722000-479d8000-9f38-11e9-9295-a113dbac079d.png)\r\n\r\nAlso add:\r\n\r\n```\r\nindex.js:1375 Warning: Failed prop type: The prop `latitude` is marked as required in `RestaurantListItem`, but its value is `null`.\r\n\r\nRestaurantListItem's instance has the following props: {OBJECT_OF_PROPS_THAT_OPENS_ON_CLICK}\r\n```\r\n\r\nI currently find myself many times having to temporary do this in different components.\r\n\r\nIt seems to me like a very easy thing to add, at least for development build.\r\n\r\nThoughts?\r\n\r\nI can take a swing at it with some guidance (I'd love to dip my toes in React's code)",
              "createdAt": "2019-07-05T12:23:18Z",
              "author": {
                "login": "goldylucks",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/6963212?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16069",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "prop-types not work save child please",
              "state": "OPEN",
              "number": 16070,
              "body": "I use prop-types package . want to validate my props, i transmit a error type of prop but prop-types not work.\r\n\r\nMACOS\r\nreact 16.8.6\r\nreact-dom 16.8.6\r\nprop-types 15.5.7\r\nredux 4.0.1\r\nreact-redux 2.3.0\r\n\r\n\r\n```\r\nimport React from 'react';\r\nimport { Button, Icon } from 'antd';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst PageHeader = ({isUnflod, showFilterPanel, title}) => (\r\n    <>\r\n        <div class='page-title'>{title}</div>\r\n        <div class='page-header-base-button'>\r\n            <Button className='left-button' type='primary'>添加</Button>\r\n            <Button type='default' onClick={() => showFilterPanel(!isUnflod)}>\r\n                筛选<Icon type={isUnflod ? 'up' : 'down'} />\r\n            </Button>\r\n        </div>\r\n    </>\r\n)\r\n\r\nPageHeader.propTypes = {\r\n    title: PropTypes.number,\r\n    isUnflod: PropTypes.bool.isRequired,\r\n    showFilterPanel: PropTypes.func.isRequired\r\n}\r\n\r\nexport default PageHeader;\r\n```\r\n```\r\nconst Vehicle = ({isUnflod, showFilterPanel, pagination}) => (\r\n    <>\r\n        <PageHeader title='车辆管理' isUnflod={isUnflod} showFilterPanel={showFilterPanel} />\r\n        {\r\n            isUnflod ? <VehicleFilterPanel /> : null\r\n        }\r\n    </>\r\n)\r\n```",
              "createdAt": "2019-07-06T01:42:30Z",
              "author": {
                "login": "shenweizheng110",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/30110661?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16070",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Issues regarding resetting the initial state",
              "state": "OPEN",
              "number": 16073,
              "body": "I have the following hook:\r\n\r\n```jsx\r\nfunction usePromise ( promise ) {\r\n\r\n  let [result, setResult] = useState ({ loading: true });\r\n\r\n  useMemo ( () => {\r\n\r\n    result = { loading: true };\r\n    setResult ( result );\r\n\r\n    promise.then ( value => setResult ({ loading: false, value }) )\r\n           .catch ( error => setResult ({ loading: false, error }) );\r\n\r\n  }, [promise] );\r\n\r\n  return result;\r\n\r\n}\r\n```\r\n\r\nIt accepts a promise and returns an object that tells you if the promise did resolve/reject or if it did not settle yet. I think this is a fairly common pattern.\r\n\r\nFirst of all notice how I'm using `useMemo`, as we want to attach `then`/`catch` handlers only once.\r\n\r\nSecondly notice how inside `useMemo` I'm resetting the `result` object whenever the promise changes, as we don't want it to return the previous result object instead.\r\n\r\nI'm resetting the `result` object both permanently, via `setResult`, and temporarily, by assigning to it directly. I believe the direct assignment is necessary here because otherwise my component will immediately receive the previous `result` object instead of the new one.\r\n\r\nThere are multiple issues even with this fairly simple hook:\r\n\r\n### 1 - Inappropriate linter warning\r\n\r\nThe linter is complaining about assigning directly to `result` with the following message:\r\n\r\n```\r\nAssignments to the 'result' variable from inside React Hook useMemo will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useMemo.eslint(react-hooks/exhaustive-deps)\r\n```\r\n\r\nSince I'm also using `setResult` here this issue seems none existent, maybe this warning shouldn't be displayed in this situation?\r\n\r\n### 2 - Missing linter warning\r\n\r\nIf I don't update the `result` variable immediately by directly assigning to it my component will initially receive the wrong object, which is an error, and I think it will also be rendered twice, once with the wrong object, and a second time with the right one once `setResult` does its job.\r\n\r\nShouldn't in situations like this be a linter rule that _encourages_, instead of discourages, you to also update the value directly in order to avoid those issues?\r\n\r\n### 3 - Updating state while the component is unmounted\r\n\r\nI think my `usePromise` hook will eventually call `setResult` while the component is unmounted because the promise will eventually resolve/reject after the component has been unmounted.\r\n\r\nSo I'll have to update it to check if the component is still mounted, otherwise React will log an error about this.\r\n\r\nWhat's the point of this error? Why can't/shouldn't React itself just ignore my `setResult` call if the component is not mounted? Or at the very least why is React logging an error about this and not a warning?\r\n\r\nI find myself stumbling into this issue pretty often, perhaps a linter rule can be written about this?\r\n\r\n### 4 - Which hook to use?\r\n\r\nIf I'm understanding this correctly instead of `useMemo` I could have used `useEffect` or `useLayoutEffect` and have gotten _almost_ the same result, I say almost because:\r\n\r\n- `useMemo` calls the passed function immediately, which is want we want or the promise may throw an exception that we won't be able to catch.\r\n- `useLayoutEffect` would call the passed function at a later time, right before the browser is ready to render the frame, or at least I believe that's the case, but if I have 10 `useLayoutEffect` calls and the first one keeps the main thread busy for 1 minute are the other 9 always going to get executed before the browser paints?\r\n- `useEffect` will call the passed function at a point in time that's not very clear to me. (e.g. should it be equivalent to `componentDidMount` + `componentWillUnmount`? Or was it `componentWillMount` + `componentDidUnmount` or some other permutation?)\r\n\r\nThe fact that there are 3 built-in hooks that could be used for this, which may not reveal any error for a long time, is a bit confusing to me.\r\n\r\n### General feedback\r\n\r\nI've recently migrated an app of mine to hooks and this particular issue has bit me more than once already, I keep stumbling upon it. In general I'm having troubles writing reliable custom hooks and components.\r\n\r\n1. There's no linter rule that reminds me to also update the value provided by `useState` hooks immediately, in fact it seems the current one discourages it.\r\n2. I think my components have become harder to reason about sometimes: \r\n\t- If I call `setFoo` 10 times is my component going to render 10 times?\r\n\t- Will React re-render my component also if I pass `setFoo` the same exact value as before?\r\n\t- If I use `useState` 3 times, and call the related `set*` methods from inside 3 `useEffect` hooks, one for each, is my component going to render 4 times if the first `useEffect` block relies on and updates the value provided by the first `useState`, the second `useEffect` block relies on the value provided by the first `useState` call too and updates the second, and the third `useEffect` block relies on the value provided by the second `useState` call and updates the third? And shouldn't I try to minimize these renderings by updating those values via an assignment also? \r\n\t- I basically use `useEffect` by default, but some times I see a bit of flickering/glitches in the UI, I replace it with `useLayoutEffect` instead, the issue gets fixed, and I notice that I'm actually mutating the DOM or something inside the hook.\r\n\t\t- I find this to be quite error-prone for me, as sometimes it's not clear that I'm actually mutating the DOM (say I want to update the `scrollTop` property of an element or something), as the line that actually does that may be abstracted away by some other high-level API.\r\n\t\t- I also find the mere existence of 2 effect-related hooks confusing, I think I understand under which scenarios `useLayoutEffect` should be used, and that it's called before the browser paints the new frame, but then when is my `useEffect` hook called? Is it always called after `useLayoutEffect`? What would happen if I replaced all my `useEffect` calls with `useLayoutEffect` calls instead?\r\n3. Generally hooks seem like a very good abstraction to me, but writing custom ones seems too error prone to me. I'm pretty new to hooks overall, but I think I'm relatively experienced as a developer, but if even writing a relatively simple one, like the `usePromise` hook I posted, has so many pitfalls to be aware of maybe this is an issue? I realize this sounds a bit like blaming the language for the bugs I've introduced, but perhaps there's a way to make this process less error prone? i.e. new/improved linter rules, less ambiguity (`useEffect`/`useLayoutEffect`), clearer lifecycle (when is `useEffect` even called? are my components re-rendering an unexpected amount of times?), no need to update values directly (hypothetically maybe they should be proxies so that `set*` functions can update them immediately or something? I realize that proxies aren't polyfillable but there might be other ways around it), no need for specifying dependencies (the code might be statically analyzable at build-time most of the times).\r\n\r\nIn hindsight maybe this \"General feedback\" section is a bit off-topic, let me know if you guys want me to move that into a separate issue.\r\n\r\nSorry for the long issue, hopefully it's helpful.",
              "createdAt": "2019-07-06T21:03:26Z",
              "author": {
                "login": "fabiospampinato",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/1812093?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16073",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "how the react compiler works",
              "state": "CLOSED",
              "number": 16074,
              "body": "Hello i want to know how the react compiler works\r\n\r\nStep by step\r\nThanks",
              "createdAt": "2019-07-06T23:46:39Z",
              "author": {
                "login": "neutron92",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/6135555?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16074",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "useState setting issue OR Am I using useState horribly wrong?",
              "state": "OPEN",
              "number": 16075,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug  / behavior / or wrong usage by me\r\n\r\n**What is the current behavior?**\r\nisFresh remains same as previous state\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n(https://codesandbox.io/embed/goofy-blackburn-ptcil)\r\ntwo components\r\nstate will be logged in console after every set\r\nclick button to set state for component individually\r\nApp1 - deepcopy of state object - unexpected behavior\r\nApp2 - shallowcopy of state object - works fine\r\n\r\n**What is the expected behavior?**\r\nvalue of isFresh in state should get set to false (in deepcopy part)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nlatest - stable\r\n",
              "createdAt": "2019-07-07T06:42:16Z",
              "author": {
                "login": "DExcalibur",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/41278509?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16075",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "React typescript StandardLonghandProperties -moz-transform is missing",
              "state": "CLOSED",
              "number": 16077,
              "body": "I'm trying to put: \"-moz-transform\": \"scale(\" + zoom + \")\" on react style\r\n\r\nI got this error:\r\nUnsupported style property -moz-transform. Did you mean MozTransform?\r\n\r\nBut I cannot see MozTransform in csstype/index.d.ts (interface StandardLonghandProperties)\r\n\r\nWhat is the workaround? what is the correct key/class-name to use?",
              "createdAt": "2019-07-07T13:41:37Z",
              "author": {
                "login": "chezih",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/7764695?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16077",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "extract \"hooks\" logic for reuse in other component frameworks",
              "state": "CLOSED",
              "number": 16078,
              "body": "**Do you want to request a *feature* or report a *bug*?**\r\n*feature*\r\n\r\nWill you consider extracting hooks logic from React?\r\n\r\nLoving hooks idea, so much, but I am not able to use it at my work since I am tightly bound to webcomponents ecosystem, and React does not play nicely with it, even if it did it will add on a bundle size and complexity of learning multiple component frameworks for my colleagues.\r\n\r\nLooking at libraries like [haunted](https://github.com/matthewp/haunted), which implements React after hooks version but with webcomponents and lit-html, there is a demand to implement it in other components frameworks or in  this case webcomponents.\r\n\r\nIf implementation will be extracted, there is a higher chance of hooks from user land to work across frameworks in same way and with less workarounds \r\n",
              "createdAt": "2019-07-07T16:18:06Z",
              "author": {
                "login": "askbeka",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/3000474?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16078",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "eslint-plugin-react-hooks: Ensure reducer is pure",
              "state": "CLOSED",
              "number": 16079,
              "body": "I just spend the whole day debugging a race condition where one dispatch sometimes called a reducer twice and because of my reducer wasn't pure, the app behaved incorrectly.\r\n\r\n```ts\r\nconst reducer: Reducer<State, Action> = (state, action) => {\r\n  const getSortedFocusables = () => {\r\n    // Never do that! Reducer isn't pure!\r\n    return [...state.focusables].sort(documentPositionComparator);\r\n  };\r\n```\r\n\r\nAs Sebastian told me: \r\n\r\n> One dispatch can call a reducer twice under certain conditions but it would call it with the old state as input. So if it's pure, it's unobservable. A reducer function must be pure.\r\n\r\nA reducer function must be pure.\r\nA reducer function must be pure.\r\nA reducer function must be pure.\r\nA reducer function must be pure.\r\n\r\nI hope it's possible eslint-plugin-react-hooks could detect it, but I am not sure whether it's possible.",
              "createdAt": "2019-07-07T18:02:24Z",
              "author": {
                "login": "steida",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/66249?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16079",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "React, how call parent method from child component (via slots)",
              "state": "OPEN",
              "number": 16080,
              "body": "Hi. I make slots via vuejs. How get/write parent state or call parent method without redux.\r\n\r\n**Page**\r\n\r\n```\r\nclass Users extends Component {\r\n   callbackFilter(data) {\r\n     console.log('callbackFilter', data)\r\n   }\r\n\r\n   render() {\r\n     return (\r\n        <div>\r\n           <AppFilter callback={this.callbackFilter.bind(this)}>\r\n              <AppFilter.AppSelect field=\"name\" />\r\n              <AppFilter.AppInput field=\"name1\" />\r\n              <AppFilter.AppInput field=\"name1\" />\r\n           </AppFilter>\r\n        </div>\r\n     )\r\n   }\r\n}\r\n```\r\n\r\n**AppFilter parent component**\r\n\r\n```\r\nclass AppFilter extends Component {\r\n   constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      filter: {\r\n        // dynamic fields child component\r\n      }\r\n    }\r\n    this.bFilter = this.bFilter.bind(this);\r\n   }\r\n\r\n   static AppSelect = AppSelect\r\n   static AppInput = AppInput\r\n   \r\n   bFilter(event) {\r\n    if (event) event.preventDefault()\r\n    // code map object for callback Users Component (page)\r\n    this.props.callback(this.state.filter)\r\n   }\r\n\r\n   render() {\r\n     return (\r\n        <div>\r\n           <div>\r\n             {this.props.children} // how call bFilter\r\n           </div>\r\n        </div>\r\n     )\r\n   }\r\n}\r\n```\r\n\r\n**Example child component**\r\n\r\n```\r\nclass AppInput extends Component {\r\n  callback(event) {\r\n    // how get parent instants state or bFilter method for read state\r\n  }\r\n  render() {\r\n    return (\r\n      <Input onChange={this.callback.bind(this)} />\r\n    )\r\n  }\r\n}\r\n```",
              "createdAt": "2019-07-08T09:51:40Z",
              "author": {
                "login": "makenskiy",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/10230912?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16080",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "React ref incorrectly reports 0 height in production.",
              "state": "CLOSED",
              "number": 16083,
              "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n**What is the current behavior?**\r\nImageViewer.js:\r\n```\r\nclass ImageViewer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { gotSize: false };\r\n    this.containerRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    // get zero here, only in production and only on the first run after refresh\r\n    console.log(this.containerRef.current.clientHeight);\r\n    this.setState({ gotSize: true });\r\n    ...\r\n  }\r\n  ...\r\n  render() {\r\n    const { gotSize } = this.state;\r\n\r\n    return (\r\n         ...\r\n        <div className={scss['canvas-container']} ref={this.containerRef}>\r\n          {gotSize && <Canvas containerRef={this.containerRef} />}\r\n        </div>\r\n        ...\r\n    );\r\n  }\r\n};\r\n```\r\nMy css in container basically a box of width:100% and height: 100%, and it takes the full size in the inspector\r\nCanvas.js:\r\n```\r\nclass Canvas extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.updateDimensions = this.updateDimensions.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('resize', this.updateDimensions);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener('resize', this.updateDimensions);\r\n  }\r\n\r\n  updateDimensions() {\r\n   ...\r\n   // and of course zero here, but only on the first run\r\n   // after refresh, if I close and open the component the second time it works fine\r\n    const rect = this.props.containerRef.current.getBoundingClientRect(); \r\n    ...\r\n  }\r\n\r\n  render() {...}\r\n}\r\n```\r\n**What is the expected behavior?**\r\nGet the correct height\r\nenv:\r\nproduction: default create-react-app script `\"react-app-rewired build\"`\r\nmacOS High Sierra 10.13.6\r\nChrome Version 75.0.3770.100 (Official Build) (64-bit)\r\n\"react\": \"^16.8.6\"\r\n\"react-dom\": \"^16.8.6\"",
              "createdAt": "2019-07-08T15:11:41Z",
              "author": {
                "login": "GriboryBogush",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/23219057?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16083",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "Resolution: Needs More Information",
                      "color": "fffde7"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "useContext unexpected behavior in immediate child component",
              "state": "CLOSED",
              "number": 16086,
              "body": "as [hook API](https://reactjs.org/docs/hooks-reference.html#usecontext) states, The current context value is determined by the value prop of the nearest <MyContext.Provider> ***above the calling component in the tree.*** \r\n\r\nbut before react new Hooks feature, we could use provider and consumer in the same component and the consumer always points to the nearest component, not nearest above the calling component.\r\n\r\nthis [sandbox ](https://codesandbox.io/s/gallant-elgamal-23r81) shows that only the useContext has unexpected behavior based on other methods of accessing context value.\r\n\r\nI think this is by hook's limit, or isn't it?\r\nso based on what premise useContext doesn't provide the value form the nearest provider? isn't it unexpected?\r\n",
              "createdAt": "2019-07-08T20:01:01Z",
              "author": {
                "login": "HosseinAlipour",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/5198502?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16086",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "[Umbrella] Memory Leaks",
              "state": "OPEN",
              "number": 16087,
              "body": "This issue is a summary of issues mentioned in https://github.com/facebook/react/pull/15157.\r\n\r\nThere are many different ways to create memory leaks with React since we give you access to the imperative power to do so. Most should be dealt with by clean up / unmount functions.\r\n\r\nSome could be pure React bugs. Some could be related to the lack of clean up of render phase effects. Others could be related to leaks that exists but the way React works makes them larger than they otherwise would've.\r\n\r\n# Actionable\r\n\r\nI think there are at least two actionable patterns to address from #15157:\r\n\r\n- [ ] If a handle on a DOM node is leaked, it takes the React tree with it. This is a fairly easy mistake to make and the effect is pretty high. What we would do here is special case DOM nodes with refs on them, and always detach their back pointer to the React Fiber, if it was ever fully mounted. We currently traverse these trees anyway when they get deleted. We want to stop doing this for most things but for nodes with a ref it seems minor to special case since they typically need to be invoked with null anyway.\r\n- [ ] Investigate the source of the leak in https://github.com/jonnycornwell/potential_react_leak and fix the source of the problem.\r\n\r\n# Unresolved\r\n\r\n- [ ] Closing over setState/dispatch or class component instances to global state can leak too. Does this pattern warrant special casing too? Under what conditions?\r\n- [ ] Land https://github.com/facebook/react/pull/15157 What patterns are actually covered? It can cut down on a potentially larger leak but is that the whole leak? I could imagine some patterns where this is the complete solution but unclear if it's the complete solution for the patterns that people are actually hitting in practice.\r\n- [ ] What other issues remain after solving the actionable above? Let's make another pass investigating if people's original issues remain.\r\n\r\n# Won't Fix\r\n\r\n- Side-effects in class constructor, componentWillMount, componentWillReceiveProps, componentWillUpdate, getDerivedStateFrom... and render that store a reference to anything stateful outside React won't be able to clean up. This is [documented](https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html) in the 16.3 release and is a major design decision as part of the concurrent/suspense/error handling strategy.\r\n- Effects/state retained temporarily in alternate fiber likely won't be fixed short term. This is due to how Fiber uses two trees and swaps between them. This can lead to additional values being retained until that tree gets some work on it to swap again. This was observed in the Hooks release and there are some confusing cases where a destroy function can hold onto more memory than expected in the closure. Typically this is solved by using a custom hook since that gets its own scope/closure.\r\n- Props/child trees retained by alternate children. Similarly, children that was just removed can sometimes between retained by the alternate copy of that. That is until that node gets another update on it which clears out the old children. These cases are fairly unusual and fix themselves eventually as the app lives on.",
              "createdAt": "2019-07-09T00:17:45Z",
              "author": {
                "login": "sebmarkbage",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/63648?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16087",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Adding interval after every character input for making server side search : ReactJS",
              "state": "CLOSED",
              "number": 16088,
              "body": "Want to implement a search filter , with each character input I want to make a server call. Also after character that I enter, I need to maintain an interval, so that character is being sent to server and then results come back and then I can type the next character(to prevent user interaction till the data comes back). How can I achieve this?\r\n\r\n``````````````````````\r\n\r\n this.state ={\r\n      data: [],\r\n      searchInput: ''\r\n }\r\n\r\n handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    this.setState({ searchInput: event.target.value, loading :true }, () => {\r\n      if(this.state.searchInput){\r\n           this.search(this.state.searchInput);\r\n      }\r\n    });\r\n  };\r\n\r\n search = async(input) =>\r\n {\r\n    let response = await fetch('api/fetch/${input}`);\r\n    let data = await response.json()\r\n    this.setState({data, loading: false});\r\n }\r\n \r\n <input\r\n                            name=\"searchInput\"\r\n                            value={this.state.searchInput || \"\"}\r\n                            placeholder=\"Search\"\r\n                            onChange={this.handleChange}\r\n />\r\n\r\n",
              "createdAt": "2019-07-09T08:20:13Z",
              "author": {
                "login": "velsonjr",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/42905121?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16088",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Remove Did not expect server HTML to contain a <style> in <div> from react-dom",
              "state": "OPEN",
              "number": 16089,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nI'm requesting to remove a feature\r\n\r\n**What is the current behavior?**\r\nReact dom shows warnings when there are style tags in between html responses from server\r\n\r\n```\r\nWarning: Did not expect server HTML to contain a <style> in <div>.\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nit's not a bug but here is how to reproduce it: \r\n\r\nClone a SSR supported boiler plate like [react-starter-kit](https://github.com/kriasoft/react-starter-kit) and add this code in any component's render method: \r\n```jsx\r\n{!process.env.BROWSER &&\r\n    <style>{'.test { color: red; }'}</style>\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nnot throwing warnings\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact: ^16.5.2\r\nReact-dom: ^16.5.2\r\nBrowser: FireFox 67.0.4\r\nI think it's always been like this!\r\n\r\nI think this warning message **should be totally removed from React DOM**, How should I stream using `ReactDOMServer.renderToNodeStream` if I don't put the style tags in between HTML tags?\r\nI've seen many people using packages like [isomorphic-style-loader](https://github.com/kriasoft/isomorphic-style-loader) which puts all the styles in the head. However if you want to steam the server response, the idea of styles in head is not possible unless you first `renderToString` the entire component tree which eliminates the whole purpose of streaming the results.\r\n\r\nMy suggestion is that ReactDOM does not considers `style` tags inside html nodes an invalid response from server so it's possible to stream server response easier and remove all these inline styles in client and move them to the head(for the sake of easier DOM manipulations in feature).  ",
              "createdAt": "2019-07-09T09:18:45Z",
              "author": {
                "login": "ImanMh",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/4482199?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16089",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "[Question] useRef to reduce dependencies in useEffect/useCallback",
              "state": "CLOSED",
              "number": 16091,
              "body": "Firstly, sorry for putting a question in the issues tracker, since I'm not sure where to put this.\r\n\r\nI really love the concept of hooks & have been converting many class components to hooks. One of the common problems I usually get with hooks, is to access the latest state/props in `useEffect` and `useCallback`, while avoiding specify too many dependencies to these hooks. \r\n\r\n(I'm aware of exhausive deps, but for optimization, I don't want `useEffect` to be called too many times, or `useCallback` to return a different function every times)\r\n\r\nFor example, I want to maintain the identity of function returned from `useCallback`, so I'd need to put `[]` as 2nd argument (because I'm gonna pass it to a component inside `React.memo` and don't want to write custom props comparator). So it'd be like this:\r\n```js\r\nuseCallback(() => doStuff(value1, value2), [])\r\n```\r\n\r\nOf course it won't work because `doStuff` will always receive initial value of `value1` and `value2`. That's why I'd need to use `useRef`:\r\n\r\n```js\r\nconst ref = useRef({ value1, value2 });\r\nref.current = { value1, value2 };\r\nuseCallback(() => doStuff(ref.current.value1, ref.current.value2), [])\r\n```\r\n\r\nAnd could say that this happens so many time that I decided to write a custom hook for it :)\r\n\r\n```ts\r\nexport function useCallbackWithRef<TRef, TCb extends (...args: any[]) => any>(\r\n  refData: TRef,\r\n  callback: (refData: TRef) => TCb\r\n): TCb {\r\n  const ref = React.useRef(refData);\r\n  ref.current = refData;\r\n  return React.useCallback((...args: any[]) => {\r\n    return callback(ref.current)(...args);\r\n  }, []) as TCb;\r\n}\r\n\r\n//usage\r\nuseCallbackWithRef({ value1, value2 }, ref => () => doStuff(ref.value1, ref.value2))\r\n```\r\n\r\nAnd it seems to work quite nice: [Codesandbox](https://codesandbox.io/s/white-brook-1myr7)\r\n\r\nI'm going to use this across many places in my project, but I don't want to have many regrets later on so I just want to ask a few things:\r\n\r\n1. Is there any performance issue with excessive use of `useRef`? Since they're just pointer to an already exist object, I guess it's not going to have any memory impact?\r\n2. I read somewhere that React may decide to re-compute value in `useMemo` if needed, even if I specify `[]` as dependencies. Is it better if I change the implementation to `useState` with lazy init, instead of `useCallback`?\r\n3. Or is there a much more simpler, a true React way to achieve what I want but I have overlooked?",
              "createdAt": "2019-07-09T18:00:38Z",
              "author": {
                "login": "dangcuuson",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/20551609?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16091",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "[Feature] Return HTMLElement in functional components",
              "state": "OPEN",
              "number": 16092,
              "body": "For now functional components are able to return string or jsx. It would be awesome to have support of native HTMLElement instances as well. \r\n\r\n**What is the current behavior?**\r\n```javascript\r\nfunction SuperFastCustomComponent () {\r\n  const el = document.createElement('div');\r\n  ...\r\n  return el;\r\n}\r\n// Throws error: Objects are not valid as a React child (found: [object HTMLDivElement]).\r\n```\r\n\r\n**What is the expected behavior?**\r\nJust insert provided element in DOM.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nLatest\r\n\r\n**Motivation**\r\nFor some applications it needs to make UI as fast as possible. Especially it is critical on huge application with thousands elements which updates several times per second.  Virtual DOM in React provides good help for performance issues, but sometimes you need to go further and operate on level of vanilla js with incremental changes and custom virtual DOM model relevant to your application. For now the only way to do it is to use refs, but it is looks kind of ugly. Allow to return HTML elements will helps to solve this issue in elegant and intuitive way.",
              "createdAt": "2019-07-09T18:04:20Z",
              "author": {
                "login": "abramov231",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/50027964?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16092",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "onClick not firing",
              "state": "CLOSED",
              "number": 16093,
              "body": "I can't seem to get the onClick event to fire at all. I've reduced my app to the following file: \r\n\r\nindex.js:\r\n```\r\nimport React from 'react'\r\nimport { render } from 'react-dom'\r\n\r\nconst Index = () => {\r\n  console.log('rendered')\r\n  return <button onClick={() => console.log('hello')}>test</button>\r\n}\r\n\r\nrender(\r\n  <Index />,\r\n  document.getElementById('app')\r\n)\r\n```\r\nI get 'rendered' output to the console, but nothing when I click on the button.\r\n\r\npackage.json:\r\n```\r\n{ \r\n...\r\ndevDependencies {\r\n    ...\r\n    \"react\": \"^16.8.4\",\r\n    \"react-dom\": \"^16.8.4\",\r\n     ...\r\n}\r\n...\r\n}\r\n```\r\nbuilding inside a Laravel 5.2 app via: \r\n`browserify -t [ babelify --presets [ react es2015 ] ] resources/js/react/index.js -o public/js/test.js`\r\n",
              "createdAt": "2019-07-09T20:42:58Z",
              "author": {
                "login": "jstierney",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/52720269?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16093",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "Resolution: Needs More Information",
                      "color": "fffde7"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "[exhaustive-deps] Dependency list that is not array literal (false positive)",
              "state": "OPEN",
              "number": 16096,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\n```js\r\n  const memoPosition = React.useMemo(() => position && gpsToLatLng(position), [\r\n    position && position.latitude,\r\n    position && position.longitude,\r\n  ])\r\n```\r\n\r\nAlternatively\r\n\r\n```js\r\n  const memoPosition = React.useMemo(\r\n    () => position && gpsToLatLng(position),\r\n    position ? [position.latitude, position.longitude] : [position],\r\n  )\r\n```\r\n\r\n**Both of these version yield following lint error and are fixed like that which isn't correct outcome...**\r\n\r\n> React Hook React.useMemo was passed a dependency list that is not an array literal. This means we can't statically verify whether you've passed the correct dependencies.eslint(react-hooks/exhaustive-deps)\r\n\r\n\r\n```js\r\n  const memoPosition = React.useMemo(\r\n    () => position && gpsToLatLng(position),\r\n    [position],\r\n  )\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nI am not sure if there is a better pattern to tackle that use case. The `position` can be null and I am fine with `memoPosition` to becoming `null` as well. However, since I cannot call the hook conditionally \r\n\r\nNote, I am not memoizing because the computation would be heavy, but because the value is passed further down and would cause re-render of a much bigger tree when a position has not actually changed. The consuming component is 3rd party and it has default `React.memo` applied.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n```\r\n  System:\r\n    OS: Windows 10\r\n    CPU: (8) x64 Intel(R) Core(TM) i7-7700HQ CPU @ 2.80GHz\r\n  Binaries:\r\n    Node: 10.16.0 - C:\\Program Files\\nodejs\\node.EXE\r\n    Yarn: 1.16.0 - C:\\Program Files (x86)\\Yarn\\bin\\yarn.CMD\r\n    npm: 6.9.0 - C:\\Program Files\\nodejs\\npm.CMD\r\n  npmPackages:\r\n    react: 16.9.0-alpha.0 => 16.9.0-alpha.0\r\n    react-dom: 16.9.0-alpha.0 => 16.9.0-alpha.0\r\n    react-scripts: ^3.0.1 => 3.0.1 (not ejected)\r\n```",
              "createdAt": "2019-07-10T09:03:01Z",
              "author": {
                "login": "FredyC",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/1096340?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16096",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "`yarn build --watch` throwing \"JavaScript heap out of memory\".",
              "state": "OPEN",
              "number": 16097,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nReporting a bug regarding the yarn build.\r\n\r\n**What is the current behavior?**\r\nRunning `yarn build --watch` is throwing `JavaScript heap out of memory`.\r\n\r\nHere's the complete log:\r\n\r\n```\r\n<--- Last few GCs --->\r\n\r\n[74510:0x103800000]    84468 ms: Mark-sweep 1317.9 (1442.4) -> 1306.5 (1443.9) MB, 589.0 / 0.0 ms  (average mu = 0.251, current mu = 0.114) allocation failure scavenge might not succeed\r\n[74510:0x103800000]    85163 ms: Mark-sweep 1321.0 (1443.9) -> 1309.3 (1444.4) MB, 596.7 / 0.0 ms  (average mu = 0.210, current mu = 0.142) allocation failure scavenge might not succeed\r\n\r\n\r\n<--- JS stacktrace --->\r\n\r\n==== JS stack trace =========================================\r\n\r\n    0: ExitFrame [pc: 0x51a72adbe3d]\r\nSecurity context: 0x176d9701e6e1 <JSObject>\r\n    1: decode$$1(aka decode$$1) [0x176dffbe8169] [/Users/300067056/playground/random/react/node_modules/rollup/dist/rollup.js:~297] [pc=0x51a739966b9](this=0x176d9f8026f1 <undefined>,mappings=0x176d325aa201 <Very long string[26873]>)\r\n    2: /* anonymous */(aka /* anonymous */) [0x176d325a76b1] [/Users/300067056/playground/random/react/node_modules/rollup/dist...\r\n\r\nFATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory\r\n 1: 0x10003b1db node::Abort() [/usr/local/bin/node]\r\n 2: 0x10003b3e5 node::OnFatalError(char const*, char const*) [/usr/local/bin/node]\r\n 3: 0x1001a86b5 v8::internal::V8::FatalProcessOutOfMemory(v8::internal::Isolate*, char const*, bool) [/usr/local/bin/node]\r\n 4: 0x100573ad2 v8::internal::Heap::FatalProcessOutOfMemory(char const*) [/usr/local/bin/node]\r\n 5: 0x1005765a5 v8::internal::Heap::CheckIneffectiveMarkCompact(unsigned long, double) [/usr/local/bin/node]\r\n 6: 0x10057244f v8::internal::Heap::PerformGarbageCollection(v8::internal::GarbageCollector, v8::GCCallbackFlags) [/usr/local/bin/node]\r\n 7: 0x100570624 v8::internal::Heap::CollectGarbage(v8::internal::AllocationSpace, v8::internal::GarbageCollectionReason, v8::GCCallbackFlags) [/usr/local/bin/node]\r\n 8: 0x10057cebc v8::internal::Heap::AllocateRawWithLigthRetry(int, v8::internal::AllocationSpace, v8::internal::AllocationAlignment) [/usr/local/bin/node]\r\n 9: 0x10057cf3f v8::internal::Heap::AllocateRawWithRetryOrFail(int, v8::internal::AllocationSpace, v8::internal::AllocationAlignment) [/usr/local/bin/node]\r\n10: 0x10054c884 v8::internal::Factory::NewFillerObject(int, bool, v8::internal::AllocationSpace) [/usr/local/bin/node]\r\n11: 0x1007d4894 v8::internal::Runtime_AllocateInNewSpace(int, v8::internal::Object**, v8::internal::Isolate*) [/usr/local/bin/node]\r\n12: 0x51a72adbe3d\r\n13: 0x51a739966b9\r\nerror Command failed with signal \"SIGABRT\".\r\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nThe bug is related to `yarn build`. If we run yarn build with watch mode enabled, then it's throwing out of memory exception.\r\n\r\n**What is the expected behavior?**\r\nIt should not throw an exception.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nNot sure about the previous versions. I am exploring the code base of React for learning.\r\n\r\nOS:\r\nmacOs Mojave\r\nVersion: 10.14.3(18D109)\r\nMacBook Pro (Retina, 15-inch, Mid 2015)\r\nProcessor: 2.2 GHz Intel Core i7\r\nMemory: 16 GB 1600 MHz DDR3\r\n\r\nNodeJs: v10.15.1\r\nnpm: 6.9.0\r\n\r\n",
              "createdAt": "2019-07-10T09:29:50Z",
              "author": {
                "login": "hk-skit",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/9606660?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16097",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "reactjs typescript support throws maximum stack size exceeded while the same runs in the old typescript enabled template ",
              "state": "OPEN",
              "number": 16098,
              "body": "Using the new typescript supported version of reactjs https://reactjs.org/docs/static-type-checking.html#typescript along with redux-orm i get \"**maximum call stack size exceeded**\" error. \r\n\r\nhere is the code which fails using the new template https://reactjs.org/docs/static-type-checking.html#typescript\r\n\r\nhttps://drive.google.com/file/d/1tl19W2-DSNSZiVHuGoxjOLs0ooCTrDRl/view?usp=sharing\r\n\r\nNow , the same is created using the old typescript template https://github.com/microsoft/TypeScript-React-Starter which works fine. Here is a link to the code which works fine.\r\n\r\nhttps://drive.google.com/file/d/1eWmOkaKnbuRCpBEaFj7BUElq2C9IxoYD/view?usp=sharing\r\n\r\nI want the same code used in the old version to be able to use in the new reactjs typescript supported template. \r\n\r\nIs there something the new template does which throws this issue ?\r\n\r\n",
              "createdAt": "2019-07-10T11:07:35Z",
              "author": {
                "login": "franferns",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/779253?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16098",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "npx create-react-app spawn ENOENT?",
              "state": "CLOSED",
              "number": 16099,
              "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nUsing npx create-react-app causes a \"spawn enoent\" error that points to my mongoDB folder. This only began after I installed mongoDB.\r\n\r\n`$ npx create-react-app client`\r\n`spawn C:\\Program Files\\MongoDB\\Server\\4.0\\bin ENOENT`\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nThe steps I took to experience this bug was to install mongoDB and attempt to create a react app. Somehow I doubt following those steps will recreate the bug, however.\r\n\r\n**What is the expected behavior?**\r\nThe expected behavior is that I'm able to create a new react app without any errors.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nVersion 16.8.6.\r\n",
              "createdAt": "2019-07-10T15:13:10Z",
              "author": {
                "login": "Eric-Johnston",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/24642276?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16099",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "[eslint-plugin-react-hooks] Dealing with constant values in hooks' closures",
              "state": "OPEN",
              "number": 16102,
              "body": "I'm totally fine with the current exhaustive-deps implementation, yet I feel like it would be cool to have an option to tell plugin about constant values that will never change. \r\n\r\nMinimal example:\r\n```jsx\r\nconst AuthProvider = ({ children }) => {\r\n  const { http } = useContainer(); // container is immutable\r\n  const [user, setUser] = React.useState(null);\r\n  \r\n  // exhaustive-deps wants to see \"http\" present in the deps list\r\n  React.useEffect(() => void http.get('/whoami').then(setUser), []);\r\n\r\n  ...\r\n};\r\n```\r\n\r\nI wonder what options are available to make eslint happier. I believe some things could be done in AST/visitors layer, but no idea where to start.\r\n",
              "createdAt": "2019-07-10T18:17:01Z",
              "author": {
                "login": "miraage",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/971735?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16102",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Airbnb sees ~1-2s TTI regression going from React 16.2 -> 16.5",
              "state": "CLOSED",
              "number": 16106,
              "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug.\r\n\r\n**What is the current behavior?**\r\nWe have one of the larger production React apps and recently we upgraded our version of React from 16.2.0 to 16.8.6. Immediately after the upgrade, with no other changes except bumping our `react` and `react-dom` packages, we saw a 1-2s TTI increase on many of our pages for users browsing with Chrome and Firefox (specifically, not Safari). This represents a ~15-50% increase in TTI for a few of our pages.\r\n\r\nIt's difficult to tell exactly what the issue is given the size and complexity of our app. We noticed that React spends a lot of time instantiating `FiberNode` classes, but haven't really found anything that stands out. We also noticed the TTI increase going from 16.2 to 16.5. 16.3 does not increase our TTI.\r\n\r\nFor some additional context: The TTI metric we use is a custom metric, defined per page. The default definition is wait until mount of the root container, fire a 0ms `setTimeout`, and mark when that resolves. Some pages wait until a certain API response arrives or an async component mounts, then fire a 0ms `setTimeout` and mark when that resolves. \r\n\r\nWe'll keep updating this thread as we collect more information, but wanted to see if anyone had run into a similar issue.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nWe can't reproduce this issue outside of the context of our app for now, and we don't want to copy/paste our source code here.\r\n\r\n**What is the expected behavior?**\r\nWe experience no regression in performance on React 16.8.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nThis issue appears on React >=16.5 (potentially 16.4, but we haven't tried that yet).",
              "createdAt": "2019-07-10T23:49:23Z",
              "author": {
                "login": "etripier",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/7219423?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16106",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "[Question]:How to get the context provided by the class component in a function component using the useContext",
              "state": "CLOSED",
              "number": 16108,
              "body": "Sorry to everyone, this is not a problem feedback, I did not find information in the docs that can save my doubts, so... How to get the context provided by the class component in a function component using the useContext?\r\n\r\n\r\n![image](https://user-images.githubusercontent.com/6134547/61029831-89be3a00-a3ee-11e9-9b8d-88279b762a1f.png)\r\n\r\n![image](https://user-images.githubusercontent.com/6134547/61029856-9b9fdd00-a3ee-11e9-94ed-732d5feede29.png)\r\n",
              "createdAt": "2019-07-11T07:16:59Z",
              "author": {
                "login": "yoyo837",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/6134547?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16108",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Consider using reactjs.org instead of fb.me in react's error/warning messages",
              "state": "OPEN",
              "number": 16109,
              "body": "Hi,\r\n\r\nFacebook is blocked in my country (and I think in some other countries) and links like `https://fb.me/react-invalid-hook-call` are blocked for me, in order to see the related documentation of the link I have to use VPN. so if is possible please use another link shortener service or point to `reactjs.org` directly.\r\n\r\nThanks.",
              "createdAt": "2019-07-11T12:18:34Z",
              "author": {
                "login": "dehghani-mehdi",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/9152330?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16109",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Reconciliation performance function vs. class components",
              "state": "CLOSED",
              "number": 16112,
              "body": "**Do you want to request a *feature* or report a *bug*?**\r\nneither/bug\r\n\r\n**What is the current behavior?**\r\nWhile migrating class components to function components (with hooks), I noticed a **significant performance drop**. I have a component (called `TreeNodeComponent`) which is part of a tree-structure. Depending on the tree size, hundreds of instance could be visible. \r\n\r\n[Wrapping the function component in a PureComponent](https://github.com/thomasnordquist/MQTT-Explorer/commit/1a1596ad3db61a5b7a431f55799a8de2631bb4f1) significantly reduced the observed \"render time\". (From ~160ms to ~60ms)\r\n\r\n### \"Render time\", observed in Chrome Dev Tools\r\n<img width=\"347\" alt=\"Bildschirmfoto 2019-07-11 um 16 24 10\" src=\"https://user-images.githubusercontent.com/7721625/61058938-7912c180-a3f8-11e9-8a4d-f3fe2d1d9823.png\">\r\n\r\n### Context:\r\nThe App renders hundreds of these `TreeNodeComponent` in a `tree-structure`. When a parent is updated, all direct children need to be reconciled.\r\nProject: https://github.com/thomasnordquist/MQTT-Explorer\r\n\r\n**What is the expected behavior?**\r\nComparable performance between functional and class components.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nOSX\r\nChromium 73 / Electron 5.0.5\r\nReact 16.8\r\nTypescript & Webpack",
              "createdAt": "2019-07-11T14:45:07Z",
              "author": {
                "login": "thomasnordquist",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/7721625?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16112",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: undefined.",
              "state": "CLOSED",
              "number": 16113,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBugReport\r\n\r\n**What is the current behavior?**\r\nThe system on our marketplace is not able to fetch certain products but successfully manages to get others. \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhere the difference \r\n-> https://www.feralhorses.co.uk/artworks/i-belong-to-you (works) \r\n-> https://www.feralhorses.co.uk/artworks/parallel-expressions (doesn't work) \r\n\r\n````\r\nimport React, { Component, PropTypes } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport * as authActions from '../actions/authActions';\r\nimport * as lotActions from '../actions/lotActions';\r\nimport { requestCurrentLot } from '../utils/crudHelpers';\r\nimport { logActions, createLog } from '../utils/logHelpers';\r\nimport { checkToken } from '../utils/authHelpers';\r\nimport SingleArtworkPrimary from './SingleArtworkPrimary';\r\nimport SingleArtworkSecondary from './SingleArtworkSecondary';\r\nimport {\r\n  requestArtworkByName,\r\n  requestSingleArtworkGeneral,\r\n  requestArtworks\r\n} from '../utils/crudHelpers';\r\n\r\nclass SingleArtworkContainer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.getSingleArtwork = this.getSingleArtwork.bind(this);    \r\n    this.requestArtistPrimaryArtworks = this.requestArtistPrimaryArtworks.bind(this);\r\n    this.readUrl = this.readUrl.bind(this);\r\n\r\n    this.state = {\r\n      singleArtwork: null,\r\n      artistArtworks: []      \r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (checkToken()) {\r\n      document.body.classList.add('is-auth');\r\n    }\r\n    this.getSingleArtwork(this.readUrl());  \r\n  }\r\n\r\n  readUrl() {\r\n    const browserPath = window.location.pathname;\r\n    return browserPath.split('/')[2];\r\n  }\r\n\r\n  getSingleArtwork(artworkTitle) {\r\n    requestSingleArtworkGeneral(artworkTitle)\r\n      .then((response) => {\r\n        if(response.data.result){\r\n          const { artwork } = response.data;\r\n          if (artwork.status === 2) {\r\n            this.requestArtistPrimaryArtworks(artwork.primary_lot_id, artwork.artist.pretty_url);\r\n          }\r\n          this.setState({\r\n            singleArtwork: artwork\r\n          });\r\n          if(checkToken()) {\r\n            createLog(logActions.primaryMarketArtwork, `Artwork: ${artwork.artwork_id}-${artwork.artwork_title} by ${artwork.artist_name}`);\r\n          }\r\n        } else {\r\n          authActions.forwardUserTo('/not-found');\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n  \r\n  requestArtistPrimaryArtworks(lot_id, prettyUrl) {\r\n    requestArtworks(1, lot_id, 3, {artist_pretty_url: prettyUrl})\r\n      .then((response) => {\r\n        response.data.primary_lot_artworks.map((artwork, key) => {\r\n          this.state.artistArtworks.push(artwork);\r\n        });\r\n        this.setState({\r\n          isLoading: false          \r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    if(this.state.singleArtwork === null) {\r\n      return (\r\n        <div style={{ minHeight: '95vh' }}>\r\n          <h3>Loading</h3>\r\n        </div>\r\n      );\r\n    } else if (this.state.singleArtwork.status === 2) {\r\n      return (\r\n        <div>\r\n          <SingleArtworkPrimary\r\n            artwork={this.state.singleArtwork}\r\n            artistArtworks={this.state.artistArtworks}\r\n            />\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div>\r\n          <SingleArtworkSecondary \r\n            artwork={this.state.singleArtwork}\r\n            />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => ({\r\n  lot: state.lots.lot\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  actions: {\r\n    lotActions: bindActionCreators(lotActions, dispatch)\r\n  }\r\n});\r\n\r\nSingleArtworkContainer.propTypes = {\r\n  artwork: PropTypes.object,\r\n  from: PropTypes.string,\r\n  lot: PropTypes.object\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleArtworkContainer);\r\n````\r\n\r\nMy first catch error is what consoles it out\r\n\r\n**What is the expected behavior?**\r\nGiven that this is exactly the same code I am honestly surprised by the fact that I get a React error as the code behind the two pages is literally the same :(  \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll browsers \r\nReact 15.3.0 (but also happens in our UAT machine with react 16.8) \r\n",
              "createdAt": "2019-07-11T19:52:16Z",
              "author": {
                "login": "bellancaf",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/14964341?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16113",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Allow hooks in class component render methods.",
              "state": "OPEN",
              "number": 16116,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature.\r\n\r\n**What is the current behavior?**\r\nCurrently, it is only possible to use hooks in function components. I know the rationale behind this is to encourage use of the function component pattern, and allow for future optimization work in the form of precompilation. However, it makes it very inconvenient to use modern hooks-based libraries in class components, and you're essentially forced to resort to using a higher order component instead, if one is even provided. \r\nFor instance, included with the react-i18next library is a very convenient `useTranslation` hook, yet, if you're localizing class components, you must wrap everything with a HOC, since the library no longer includes a decorator. The HOC pattern is especially nasty with Typescript since you essentially have to add a bunch of extra properties to your component's props interface and then have the HOC function strip them with a compound type.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nN/A\r\n\r\n**What is the expected behavior?**\r\nCurrently, it is actually possible to shim the core React hooks API to allow calling `use...` functions in class component render methods with [react-universal-hooks](https://github.com/salvoravida/react-universal-hooks). It even works with custom hooks provided by third party libraries, since the built-in hooks they call are wrapped. We're currently using this with the `useTranslation` hook from react-i18next with no issues. \r\nI can't see any reason why this shouldn't be available natively, if only for compatibility and migration purposes. Render methods are just functions, and hooks are simply a way to allow repeated function calls to access persistent state from a backing list, correct? The hooks API documentation states that you shouldn't bother to refactor all your class components just for hooks, and even if that sort of usage wouldn't be possible to optimize through precompilation, allowing it would significantly ease the transition.\r\nThe only potential caveat is the common class component pattern of delegating out to subordinate render methods, in which hooks wouldn't work properly if they're called conditionally or in a loop. This can be avoided by passing hooked values from the top level render method instead.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nEvery version since hooks were added, 16.8.0 and up, all browsers obviously.",
              "createdAt": "2019-07-12T01:01:51Z",
              "author": {
                "login": "FrobtheBuilder",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/2354433?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16116",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "is this a bug?",
              "state": "CLOSED",
              "number": 16117,
              "body": "I didn't see it's mentioned somewhere else so I'd try to open a new thread for it. Sorry if it's already reported/discussed.\r\n\r\nI spent quite a while trying to understand why [this](https://codesandbox.io/s/react-context-api-c81jb) doesn't work, as it's a VERY simple user case and I was following the new context api instruction verbatim when doing it \r\n\r\nI know how to make it work, but it's more like a walkaround. I really want to know why my example doesn't work and if it's a bug, we should fix it.\r\n\r\nthanks",
              "createdAt": "2019-07-12T01:51:25Z",
              "author": {
                "login": "bochen2014",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/8207081?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16117",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "How to make button clickable under Link",
              "state": "CLOSED",
              "number": 16119,
              "body": "Post.jsx file\r\nCode below is Post itself...\r\n```\r\n<Post>\r\n     <Link to='/somewhere'>\r\n         <contents>\r\n             <usename />\r\n              <date />\r\n              <div onClick={doSomething}>Edit</div>\r\n         </contents>\r\n     </Link>\r\n</Post>\r\n```\r\nHow can I make the div tag button clickable under Link?\r\n\r\nI wanna implement like this...\r\nIf I click anywhere in the post except edit button, I go to post detail page.\r\nIf click edit button, edit modal shows up instead of going to post detail page.\r\nI believed I need to nest edit button trigger in the Link, but doesnt work.\r\nHow am I supposed to implement this?\r\nThank you.\r\n\r\nLIke this...\r\n![facebook_1199-141](https://user-images.githubusercontent.com/51696880/61104391-2d701e80-a4b1-11e9-9d9b-39207d0d34cc.jpg)",
              "createdAt": "2019-07-12T05:53:35Z",
              "author": {
                "login": "nonanonakeita",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/51696880?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16119",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "[react-cache] [Question] Feedback and stale-while-revalidate strategy",
              "state": "OPEN",
              "number": 16120,
              "body": "First of all, I am aware that `react-cache` package is highly experimental and unstable, but I still would like to experiment and express my thoughts on the subject. (skip to the end for the actual question)\r\n\r\nI've tried using it in several fun projects, and in my experience current version works pretty well with anything static, e.g. resources that need to be loaded only once, or can be loaded once and updated separately.\r\n\r\nHowever, not all resources are like that, and some of them need cache invalidation.  This https://github.com/facebook/react/issues/14783#issuecomment-461860954 mentions that there is no API for invalidation, but you can actually invalidate the resource, using the clever hash function. I've put together a little [demo](https://codesandbox.io/s/react-cache-stale-while-revalidate-startegy-0o9jj).\r\n\r\nThe problem with that approach is that invalidations happens \"soundly\" and will trigger the suspense. \r\n\r\nThis could be solved by busting the cache only after the `preload` of the next entry already happened, but there's unfortunately no way to track the `preload` state of the next entry, since the `preload` method actually doesn't return the promise it called;\r\n\r\nAnother way to go around this issue is to have a side effect inside the async resource, that would cause a re-render when completed, thus giving the ability to invalidate the old entry only after the new entry has been completed;\r\n\r\nLastly there’s the ability to create a invalidation method, wrapping a `read` method in a try-catch block and have custom logic of resolving with a result / awaiting  a suspender. This however makes the invalidation async, but it's probably fine, since we only need to invalidate the cache after we already have the initial result and can update the result when the invalidation has already happened.\r\n\r\nSince the first approach is basically impossible with current cache package and later two required a lot of custom logic, one would probably be better of writing an entirely custom suspender and cache provider with a required strategy.\r\n\r\nSorry for the long read, thus comes the question:\r\n\r\n**TLDR:** Is `react-cache` being developed and presented as a low-level API for writing custom resource caching logic OR as an example of writing custom suspenders and cache strategies?",
              "createdAt": "2019-07-12T09:46:28Z",
              "author": {
                "login": "nulladdict",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/26379644?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16120",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "useEffect will unpredictable when depends on ref (useRef)",
              "state": "CLOSED",
              "number": 16121,
              "body": "Look at this [demo](https://codesandbox.io/s/useeffect-depends-on-useref-194ec)\r\nIs there a bug?\r\n\r\n**What is the current behavior?**\r\nWhen you click the minus button until value to -1,  the # 1 effect will not be triggered, but the dependency has changed.\r\n\r\n**What is the expected behavior?**\r\nThe # 1 effect will be trigger when the value changes from 0 to -1，just like # 2 effect",
              "createdAt": "2019-07-12T12:22:15Z",
              "author": {
                "login": "Tommy-White",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/24240963?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16121",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "warnings use console.error instead of console.warn",
              "state": "CLOSED",
              "number": 16123,
              "body": "warnings use console.error instead of console.warn",
              "createdAt": "2019-07-12T16:55:14Z",
              "author": {
                "login": "piyushgarg195",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/44976328?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16123",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Controlled input doesn't trigger onChange when value changes, how can I trigger SyntheticEvents?",
              "state": "OPEN",
              "number": 16124,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nno, its a question\r\n\r\n**What is the current behavior?**\r\nonChange is not triggered when value of controlled input changes\r\n\r\n1. type something in the input -> console logs with SyntheticEvents\r\n2. click the button -> nothing :(\r\n\r\nhttps://codesandbox.io/s/dry-wood-rsgx1\r\n\r\n**What is the expected behavior?**\r\n\r\n2. click the button -> console logs with SyntheticEvents\r\n\r\nI need it to trigger onChange events. I am designing an autocomplete component and I want it have exactly the same \"api\" as standard `<input />`. That means whenever a use clicks one of the suggestions and that suggestions is being pasted into the input field, that input field should trigger standard onChange so that it can seamlessly integrate with other libraries (like formik)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nreact 16.8, chrome 75, mac os 10.14",
              "createdAt": "2019-07-12T20:01:28Z",
              "author": {
                "login": "odrzutowiec",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/2934746?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16124",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "jj",
              "state": "CLOSED",
              "number": 16129,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n**What is the current behavior?**\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n",
              "createdAt": "2019-07-14T01:34:02Z",
              "author": {
                "login": "eostb",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/37868588?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16129",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Double render for failed component with ErrorBoundary",
              "state": "OPEN",
              "number": 16130,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen using ErrorBoundary, component has been rendered twice, even after throwing error during the first render.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\nHaving simple example:\r\n- Straightforward ErrorBoundary copied from docs;\r\n- Functional component Boom, that throws error on first render;\r\n\r\n```javascript\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { error: undefined };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    console.log(\"getDerivedStateFromError\", { error });\r\n    return { error };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    // You can also log the error to an error reporting service\r\n    console.log(\"componentDidCatch\", { error, info });\r\n    // this.setState({ error });\r\n  }\r\n\r\n  render() {\r\n    console.log(\"ErrorBoundary.render\", this.state.error);\r\n\r\n    if (this.state.error) {\r\n      return \"Oops\";\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nlet boomCounter = 0;\r\nconst Boom = () => {\r\n  console.log(\"Boom\", ++boomCounter);\r\n  throw new Error(\"Boom\");\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorBoundary>\r\n        <Boom />\r\n      </ErrorBoundary>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\n\r\nBoom component has been rendered twice, even after throwing error during the first render.\r\nTo make it more clear, I'm logging global counter, increasing with each render :\r\nhttps://codesandbox.io/s/agitated-lumiere-6zd3h\r\n\r\n**What is the expected behavior?**\r\nFailed component shouldn't be rendered after throwing an error.\r\nInternals of the component can produce side-effects or whatever else, that can be worsen if done twice.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.8.6\r\nBrowsers: Safari, Chrome.\r\n\r\n\r\nI have 2 assumptions why is that (I haven't read React core):\r\n- To perform graceful shutdown of useEffect/componentWillUnmount and stuff like that.\r\n- This happens because Boom component provided as external dependency, being rendered in App tree alongside with ErrorBoundary itself. And React perform full render of the App tree, despite ErrorBoundary could have something else to show.\r\n\r\nThis case is very confusing.\r\nFeel free to close the issue if this behavior is expected, though it should be noted in the documentation.\r\nIdeas of how to get desired behavior are welcome.\r\nI haven't found open problem with this exact behavior described, that's why I created a new one.",
              "createdAt": "2019-07-14T09:37:45Z",
              "author": {
                "login": "Freak613",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/9072673?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16130",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "useState can't hold \"function\" into state value",
              "state": "CLOSED",
              "number": 16131,
              "body": "Running the following snippet in a React \"powered by hooks\" app, the `getAsyncOptions` is not holding a function but a pending promise: the `getAsyncOptions1` is automatically invoked. \r\n\r\nIs this a known and expected behaviour? Does it mean I cannot put a function into a state variable otherwise it is automatically called?\r\n\r\n```\r\nconst getAsyncOptions1 = async () => {\r\n    await sleep(2500);\r\n    return ['first', 'second', 'third'];\r\n};\r\n\r\nconst getAsyncOptions2 = async () => {\r\n    await sleep(2500);\r\n    return ['apple', 'pear', 'banana'];\r\n};\r\n\r\nconst App = props => {\r\n    const [getAsyncOptions, setGetAsyncOptions] = useState(getAsyncOptions1);\r\n    console.log('what is getAsyncOptions?', getAsyncOptions);\r\n\r\n    useEffect(async () => {\r\n        await sleep(5000);\r\n        console.log('changing getAsyncOptions');\r\n        setGetAsyncOptions(getAsyncOptions2);\r\n    }, []);\r\n```",
              "createdAt": "2019-07-14T13:09:04Z",
              "author": {
                "login": "damianobarbati",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/2225869?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16131",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Lazy load component with path stored in a variable or prop",
              "state": "CLOSED",
              "number": 16132,
              "body": "**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug\r\n\r\n**What is the current behavior?**\r\nError and warning when trying to dynamically `lazy` load a component from a variable or props.\r\n\r\n```\r\nWarning: Critical dependency: the request of a dependency is an expression\r\n\r\nError: Cannot find module './Button'\r\n(anonymous function)\r\n.../dynamic-lazy-load/src lazy groupOptions: {} namespace object:5\r\n```\r\n\r\n**Reproduction**\r\nIn a Codesandbox it seems to be working https://codesandbox.io/s/angry-rgb-vs0g4 fine. For some reason in a non codesandboxed environment, I was able to reproduce the issue [here](https://github.com/ReasonableDeveloper/react-dynamic-lazy-load-bug).\r\n\r\n**What is the expected behavior?**\r\nIt should lazily load the component even when the path is passed down via props or stored in a variable without throwing a warning or error. The behavior of following code:\r\n\r\n```JavaScript\r\nconst buttonPath = \"./Button\";\r\nconst LazyLoadedButton = lazy(() => import(buttonPath));\r\n```\r\n\r\nshould match the behavior of\r\n```JavaScript\r\nconst LazyLoadedButton = lazy(() => import('./Button'));\r\n```\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nLatest version of CRA (3.0.1) and latest React (16.8.6)\r\n\r\nThis issue was first reported in the lerna support CRA pull request seen [here](https://github.com/facebook/create-react-app/pull/6599#issuecomment-511161680).",
              "createdAt": "2019-07-14T13:38:22Z",
              "author": {
                "login": "ReasonableDeveloper",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/28842311?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16132",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "<g> or <text> are unrecognized in Jest",
              "state": "OPEN",
              "number": 16135,
              "body": "**Do you want to request a *feature* or report a *bug*?**\r\n**BUG**\r\n**What is the current behavior?**\r\nI am using some SVG tags, especially for customized components from `recharts` library. These customized components tend to fall into this kind of warnings:\r\n\r\n```\r\n Warning: The tag <text> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.\r\n```\r\n\r\nSame happens for `<g>` tag or `<circle>`.  It would be nice if Jest can recognize it, or at least ignore it \r\n\r\n**What is the expected behavior?**\r\n\r\nRun jest without failing into this warning\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.8.6\r\nChrome 75.0.3770.100\r\n\r\nI think these 3 tags should be specified in after this line https://github.com/facebook/react/blob/67e3f3fb6e342f95f00215c84d5d013d7b0e1b33/packages/react-dom/src/client/ReactDOMComponent.js#L131\r\n\r\nIf this is a valid issue, and that's the place, I could  have a look to add them and adapt the tests to make it work 😄 ",
              "createdAt": "2019-07-15T14:40:09Z",
              "author": {
                "login": "Ruffeng",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/18511772?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16135",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Calling a hook setter recursively in a setTimeout is producing unexpected behaviour.",
              "state": "OPEN",
              "number": 16136,
              "body": "**Do you want to request a *feature* or report a *bug*?** a bug, or I'm using wrong 😄 \r\n\r\n**What is the current behavior?**\r\n```js\r\nconst [items, setItems] = useState([]);\r\n\r\nfunction addItems(delay = 0) {\r\n  setItems(items.concat({ timestamp: new Date() }));\r\n  setTimeout(() => {\r\n    addItems();\r\n  }, 1000);\r\n}\r\n\r\n\r\n//\r\n<button onClick={addItems}>Add items</button>;\r\n{\r\n  items.map((item, index) => \r\n     <div key={index}> {JSON.stringify(item)} </div>\r\n );\r\n}\r\n```\r\n![2019-07-15 19 14 58](https://user-images.githubusercontent.com/2982512/61235084-ebefa580-a734-11e9-97b4-8f54a72d5695.gif)\r\n\r\n\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/broken-smoke-5x6g5\r\n\r\n**What is the expected behavior?**\r\n`items` will contain more and more items after the button is clicked.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? `16.8.6` Did this work in previous versions of React?** `no`\r\n",
              "createdAt": "2019-07-15T17:22:39Z",
              "author": {
                "login": "tkrugg",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/2982512?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16136",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "IE11 Syntax error when using Contexts",
              "state": "OPEN",
              "number": 16137,
              "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nIE 11 is displaying blank page when using React Contexts. Console says Syntax Error\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://github.com/miluna/react-IE11-bug-minimal\r\n\r\n**What is the expected behavior?**\r\nPage rendering using React Router, Contexts and the necessary polyfills, just like Google Chrome\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nWin10, React 16.8.6, IE11, Chrome v75",
              "createdAt": "2019-07-15T18:11:50Z",
              "author": {
                "login": "miluna",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/30979431?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16137",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Memory leak - React DOM keeps references to previous states/props/children of component",
              "state": "OPEN",
              "number": 16138,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nReport a bug.\r\n\r\n**What is the current behavior?**\r\nReactDOM keeps references to previous states/props/children when component gets updated. All in all consuming three times as much memory as it really needed.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nConsider following example:\r\n```\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nlet count = 0;\r\nclass MyBigObject {\r\n  constructor() {\r\n    this.id = count++;\r\n    this.data = new Array(100000).fill('');\r\n  }\r\n}\r\n\r\nclass MyItem extends React.Component {\r\n  render() {\r\n    return this.props.item.id;\r\n  }\r\n}\r\n\r\nclass MyApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {list: []};\r\n  }\r\n\r\n  componentDidMount() {\r\n    setInterval(() => {\r\n      this.setState({\r\n        list: [new MyBigObject()]\r\n      });\r\n    }, 500)\r\n  }\r\n\r\n  render() {\r\n    return this.state.list.map((item) => (\r\n      <MyItem key={item.id} item={item} />\r\n    ));\r\n  }\r\n}\r\n\r\nReactDOM.render(\r\n  <MyApp />,\r\n  document.getElementById('root')\r\n);\r\n```\r\n\r\nI expect only one `MyBigObject` and one `MyItem` component to be in the memory. But instead I can see three of each in memory heap snapshot.\r\n\r\n**What is the expected behavior?**\r\nThere's no justifiable reason to keep in memory unmounted components and previous states/props of component after it was updated.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.8.6, ReactDOM 16.8.6 (Production versions)\r\nMac/Win\r\n",
              "createdAt": "2019-07-15T21:10:04Z",
              "author": {
                "login": "dmitrysteblyuk",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/19614814?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16138",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Deno support or Deno rewrite pilot program",
              "state": "CLOSED",
              "number": 16140,
              "body": "# 🚀 feature request\r\nWould like [Deno](https://deno.land/) runtime support.\r\n\r\n### Description\r\nThis is a new runtime that has was created by [Ryan Dahl](https://en.wikipedia.org/wiki/Ryan_Dahl), the original creator of [NodeJS](https://nodejs.org/en/). It has several new advantages:\r\n\r\n- Use of Promises\r\n- Uses TypeScript out of the box\r\n- no need for node_modules\r\n- uses urls to load dependencies (might be a plus or minus). \r\n",
              "createdAt": "2019-07-16T05:21:39Z",
              "author": {
                "login": "inunotaisho26",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/19748234?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16140",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Need to get all the values of all the child component instances and use it in parents method: ReactJS",
              "state": "CLOSED",
              "number": 16142,
              "body": "I have this scenario where I have a table(react-table), where I am applying column level filtering. I have extracted this as a separate component(DropdDown Component) and this can be attached to any column . I am maintaining  a method inside parent component which picks up the union of all the values i.e., selected values of all the dropdowns and then apply server side filtering.\r\n\r\nNow the challenge here is , How can i get this consolidated values inside the parent component method? \r\n\r\nThis DropDown component has list of unique values with respect to that column, there is an Apply button , which applies the server side filtering. Now if I jump onto another column, I need to get the previously checked values and also the current values.\r\n\r\nInside handleSetData() filtering logic is written, I need to get the data from DropDown Component. Everytime I click on Apply on a column filter, I need to get the previously checked values as well.\r\n\r\nCan someone help me with this:\r\n\r\nCode Sandbox: https://codesandbox.io/s/quizzical-glitter-np8iw\r\n\r\n\r\nApp Component\r\n----------------\r\n`````````````````````\r\nimport * as React from \"react\";\r\nimport { render } from \"react-dom\";\r\nimport ReactTable from \"react-table\";\r\nimport \"./styles.css\";\r\nimport \"react-table/react-table.css\";\r\nimport DropDownComponent from \"./DropDown\";\r\ninterface IState {\r\n  data: {}[];\r\n  columns: {}[];\r\n}\r\n\r\ninterface IProps {}\r\n\r\nexport default class App extends React.Component<IProps, IState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      data: [\r\n        { firstName: \"aaaaa\", status: \"Pending\", visits: 155 },\r\n        { firstName: \"aabFaa\", status: \"Pending\", visits: 155 },\r\n        { firstName: \"adaAAaaa\", status: \"Approved\", visits: 1785 },\r\n        { firstName: \"aAaaaa\", status: \"Approved\", visits: 175 },\r\n        { firstName: \"adaSaaa\", status: \"Cancelled\", visits: 165 },\r\n        { firstName: \"aaaaa\", status: \"Cancelled\", visits: 157 },\r\n        { firstName: \"aaaaa\", status: \"Approved\", visits: 153 },\r\n        { firstName: \"aaaaa\", status: \"Pending\", visits: 155 }\r\n      ],\r\n      columns: []\r\n    };\r\n  }\r\n\r\n  handleSetState = (columns: any) => {\r\n    this.setState({ columns });\r\n  };\r\n\r\n  handleSetData = (value: any) => {\r\n    console.log(value); // Here filtering logic is written, I need to get the data from DropDown Component. Everytime I click on Apply on a column filter, I need to get the previously checked values as well\r\n  };\r\n\r\n  componentDidMount() {\r\n    let columns = [\r\n      {\r\n        Header: () => (\r\n          <div>\r\n            <div style={{ position: \"absolute\", marginLeft: \"10px\" }}>\r\n              <DropDownComponent\r\n                data={this.state.data}\r\n                handleSetData={this.handleSetData}\r\n                param=\"firstName\"\r\n              />\r\n            </div>\r\n            <span>First Name</span>\r\n          </div>\r\n        ),\r\n        accessor: \"firstName\",\r\n        sortable: false,\r\n        show: true,\r\n        displayValue: \" First Name\"\r\n      },\r\n      {\r\n        Header: () => (\r\n          <div>\r\n            <div style={{ position: \"absolute\", marginLeft: \"10px\" }}>\r\n              <DropDownComponent\r\n                data={this.state.data}\r\n                handleSetData={this.handleSetData}\r\n                param=\"status\"\r\n              />\r\n            </div>\r\n            <span>Status</span>\r\n          </div>\r\n        ),\r\n        accessor: \"status\",\r\n        sortable: false,\r\n        show: true,\r\n        displayValue: \" Status \"\r\n      },\r\n      {\r\n        Header: \"Visits\",\r\n        accessor: \"visits\",\r\n        sortable: false,\r\n        show: true,\r\n        displayValue: \" Visits \"\r\n      }\r\n    ];\r\n    this.setState({ columns });\r\n  }\r\n\r\n  render() {\r\n    const { data, columns } = this.state;\r\n    return (\r\n      <div>\r\n        <ReactTable\r\n          data={data}\r\n          columns={columns}\r\n          defaultPageSize={10}\r\n          className=\"-striped -highlight\"\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nrender(<App />, rootElement);\r\n\r\n``````````````````````````````\r\n\r\nDropDown Component\r\n-----------------------\r\n``````````````````````````````\r\nimport * as React from \"react\";\r\nimport { Button, Checkbox, Icon } from \"semantic-ui-react\";\r\ninterface IProps {\r\n  data: {}[];\r\n  handleSetData(arr: any): void;\r\n  handleSetData(arr: any): void;\r\n  param: string;\r\n}\r\ninterface IState {\r\n  showList: boolean;\r\n  optionsArr: {}[];\r\n  originalState: {}[];\r\n}\r\n\r\nexport default class DropDownComponent extends React.Component<IProps, IState> {\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.state = {\r\n      showList: false,\r\n      optionsArr: [],\r\n      originalState: []\r\n    };\r\n  }\r\n\r\n  toggleList = () => {\r\n    this.setState(prevState => ({ showList: !prevState.showList }));\r\n  };\r\n\r\n  handleItemClick = (event: React.FormEvent<HTMLInputElement>, data: any) => {\r\n    const index = this.state.optionsArr.findIndex(\r\n      (item: any) => item.text === data.name\r\n    );\r\n    const optionsArr = this.state.optionsArr.map((prevState: any, i: any) =>\r\n      i === index\r\n        ? {\r\n            key: prevState.key,\r\n            text: prevState.text,\r\n            checked: !prevState.checked\r\n          }\r\n        : prevState\r\n    );\r\n    this.setState({ optionsArr });\r\n  };\r\n\r\n  submitSelection = () => {\r\n    console.log(this.state.optionsArr.filter((item: any) => item.checked)); // This gives me selecte ones\r\n    let checkedValues: any = this.state.optionsArr.filter(\r\n      (item: any) => item.checked\r\n    );\r\n    this.setState({ originalState: this.state.optionsArr }, () =>\r\n      this.props.handleSetData(checkedValues)\r\n    );\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.data) {\r\n      let arr = this.props.data;\r\n      let uniqueValues = Array.from(\r\n        new Set(arr.map((arr: any) => arr[this.props.param]))\r\n      );\r\n      var optionsArr = [];\r\n      for (let i = 0; i < uniqueValues.length; i++) {\r\n        var options: any = {};\r\n        options[\"key\"] = uniqueValues[i];\r\n        options[\"text\"] = uniqueValues[i];\r\n        options[\"checked\"] = false;\r\n        optionsArr.push(options);\r\n      }\r\n      this.setState({ optionsArr: optionsArr, originalState: optionsArr });\r\n    }\r\n  }\r\n\r\n  clearSelection = (event: any) => {\r\n    // Push it to previous state, before cancel was clicked\r\n    this.setState({ showList: false, optionsArr: this.state.originalState });\r\n  };\r\n\r\n  render() {\r\n    let { showList } = this.state;\r\n    let visibleFlag: string;\r\n    if (showList === true) visibleFlag = \"visible\";\r\n    else visibleFlag = \"\";\r\n    return (\r\n      <div>\r\n        <div style={{ position: \"absolute\" }}>\r\n          <div\r\n            className={\r\n              \"ui scrolling dropdown column-settings customized \" +\r\n              visibleFlag +\r\n              \" \" +\r\n              this.props.menuDirection\r\n            }\r\n          >\r\n            <Icon className=\"filter\" onClick={this.toggleList} />\r\n              {this.state.optionsArr.length > 0 ? (\r\n                <>\r\n                  <div className=\"menu-item-holder\">\r\n                    {this.state.optionsArr.map((item: any, i: number) => (\r\n                      <div className=\"menu-item\" key={i}>\r\n                        <Checkbox\r\n                          name={item.text}\r\n                          onChange={this.handleItemClick}\r\n                          checked={item.checked}\r\n                          label={item.text}\r\n                        />\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                  <div className=\"menu-btn-holder\">\r\n                    <Button size=\"small\" onClick={this.submitSelection}>\r\n                      Apply\r\n                    </Button>\r\n                    <Button size=\"small\" onClick={this.clearSelection}>\r\n                      Cancel\r\n                    </Button>\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                \"\"\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  ",
              "createdAt": "2019-07-16T10:23:37Z",
              "author": {
                "login": "velsonjr",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/42905121?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16142",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Provide easy way to add `debugger` to \"lifecycle hook scheduled a cascading update\" errors",
              "state": "CLOSED",
              "number": 16144,
              "body": "**Do you want to request a *feature* or report a *bug*?** Feature\r\n\r\n**What is the current behavior?** Can't find a way to place a debugger on \"lifecycle hook scheduled a cascading update\" errors\r\n\r\n**What is the expected behavior?**\r\n\r\nI'm getting this error currently, I tried adding a debugger in `react-scheduler` but it seems Webpack doesn't pick it up, which means it's not actually importing that in development mode I guess. I don't see this message anywhere in react.development.js, so I guess I'm wondering where this code is coming from?\r\n\r\nI don't need this as a feature but rather just to know where/how you can get a debug breakpoint here, but after [reading this thread](https://github.com/reduxjs/react-redux/issues/834) I didn't see any clear resolution so I wanted to start a ticket for it.",
              "createdAt": "2019-07-16T20:08:37Z",
              "author": {
                "login": "natew",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/12100?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16144",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "scheduler package use set but don't use es6-shim",
              "state": "CLOSED",
              "number": 16146,
              "body": "When I use a vivo phone，I find a browser console error, That is scheduler package use set, \r\nLike: \r\nsubscribers = new Set();\r\n\r\nBut Browser don't support es6 \r\n\r\nCan you help me Fix this ?\r\n\r\n",
              "createdAt": "2019-07-17T06:31:47Z",
              "author": {
                "login": "souoxs",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/24452115?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16146",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Increase `NESTED_UPDATE_LIMIT`",
              "state": "CLOSED",
              "number": 16147,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n*bug*\r\n\r\n**What is the current behavior?**\r\n\r\nI am creating a mobile app using Expo (SDK33).  I'm using redux, redux-form, react-navigation, and redux-persist, amongst other things.  Without doing anything ridiculous, I have hit the `NESTED_UPDATE_LIMIT` just by having a reasonably deep component tree.\r\n\r\n```\r\n    in ConnectFunction (created by Connect(Form(Connect(BaseQuestionnairePage))))\r\n    in Connect(Form(Connect(BaseQuestionnairePage))) (created by ReduxForm)\r\n    in ReduxForm (created by Context.Consumer)\r\n    in Hoc (created by ReduxForm)\r\n    in ReduxForm (created by ConnectFunction)\r\n    in ConnectFunction (created by Connect(ReduxForm))\r\n    in Connect(ReduxForm) (at QuestionnaireScreen.jsx:17)\r\n    in RCTScrollContentView (at ScrollView.js:976)\r\n    in RCTScrollView (at ScrollView.js:1115)\r\n    in ScrollView (at Wizard.jsx:84)\r\n    in RCTView (at View.js:45)\r\n    in View (at Wizard.jsx:83)\r\n    in BaseWizardInterface (created by ConnectFunction)\r\n    in ConnectFunction (at Wizard.jsx:173)\r\n    in BaseWizard (created by ConnectFunction)\r\n    in ConnectFunction (at QuestionnaireScreen.jsx:12)\r\n    in _default (created by SceneView)\r\n    in SceneView (at StackViewLayout.tsx:899)\r\n    in RCTView (at View.js:45)\r\n    in View (at createAnimatedComponent.js:151)\r\n    in AnimatedComponent (at StackViewCard.tsx:93)\r\n    in RCTView (at View.js:45)\r\n    in View (at createAnimatedComponent.js:151)\r\n    in AnimatedComponent (at screens.native.js:59)\r\n    in Screen (at StackViewCard.tsx:80)\r\n    in Card (at createPointerEventsContainer.tsx:95)\r\n    in Container (at StackViewLayout.tsx:971)\r\n    in RCTView (at View.js:45)\r\n    in View (at screens.native.js:83)\r\n    in ScreenContainer (at StackViewLayout.tsx:383)\r\n    in RCTView (at View.js:45)\r\n    in View (at createAnimatedComponent.js:151)\r\n    in AnimatedComponent (at StackViewLayout.tsx:379)\r\n    in PanGestureHandler (at StackViewLayout.tsx:372)\r\n    in StackViewLayout (at withOrientation.js:30)\r\n    in withOrientation (at StackView.tsx:103)\r\n    in RCTView (at View.js:45)\r\n    in View (at Transitioner.tsx:267)\r\n    in Transitioner (at StackView.tsx:40)\r\n    in StackView (created by Navigator)\r\n    in Navigator (at createKeyboardAwareNavigator.js:12)\r\n    in KeyboardAwareNavigator (at create-redux-container.js:72)\r\n    in NavigatorReduxWrapper (created by ConnectFunction)\r\n    in ConnectFunction (at App.jsx:36)\r\n    in RCTView (at View.js:45)\r\n    in View (at StatusBarWrapper.jsx:49)\r\n    in RCTView (at View.js:45)\r\n    in View (at StatusBarWrapper.jsx:48)\r\n    in BaseStatusBarWrapper (created by ConnectFunction)\r\n    in ConnectFunction (at App.jsx:35)\r\n    in BaseAuthGate (created by ConnectFunction)\r\n    in ConnectFunction (at App.jsx:34)\r\n    in PersistGate (at App.jsx:33)\r\n    in Provider (at App.jsx:32)\r\n    in _default (at withExpoRoot.js:20)\r\n    in RootErrorBoundary (at withExpoRoot.js:19)\r\n    in ExpoRootComponent (at renderApplication.js:35)\r\n    in RCTView (at View.js:45)\r\n    in View (at AppContainer.js:98)\r\n    in RCTView (at View.js:45)\r\n    in View (at AppContainer.js:115)\r\n    in AppContainer (at renderApplication.js:34)\r\n```\r\n\r\nFrom what I can tell, there are:\r\n\r\n* Eight layers for expo or react-native's bootstrapping;\r\n* A layer for the redux store `Provider`;\r\n* A layer for redux-persist's `PersistGate`;\r\n* Two layers for my `AuthGate` (as it's connected to the store with a HOC, `connect()`);\r\n* Two layers for my `StatusBarWrapper`;\r\n* Four layers for the `<View><View /></View>` in my `StatusBarWrapper`, (they come with `<RCTView />`s apparently);\r\n* Twenty-eight layers for `react-navigation`'s `StackNavigator`;\r\n* Nine layers for my `Wizard`, (two for the outer component, connected to the store, two for the inner component also connected to the store, two for a `<View />`, and three for a `<ScrollView />`);\r\n* Seven layers for my `QuestionnairePage`, (one redux `connect()` HOC to connect the redux-form to the store to load initial values, one redux `connect()` HOC that the `redux-form` connects _itself_ to the store with for its own purposes, one for the `ReduxForm` itself, one for the HOC it contains, one for a context consumer layer (I think?), then finally two more for my actual form.\r\n\r\nGiven that's 62 in total, I imagine that perhaps the eight expo/react-native bootstrapping layers aren't counted, meaning the final seven layers push it over the edge.\r\n\r\n**What is the expected behavior?**\r\n\r\n`NESTED_UPDATE_LIMIT` is there to provide oven mitts for infinite loops, right?  Every single question I found on Stack Overflow about this invariant was someone not understanding how JSX works and calling `.setState()` in `.render()`, which isn't at all what I'm doing.  I don't understand why the detection for _infinite_ loops is set to such a low threshold.\r\n\r\nIn my opinion, `NESTED_UPDATE_LIMIT` should be at least 10x higher.  It'll still catch infinite loops just fine, and won't take much longer to do so, but won't kick my ass for having the audacity to use several libraries and a reasonably deep structure.\r\n\r\nFailing that, it should be configurable.  As I said, I'm using expo, which I believe means there's no way for me to change this value when publishing my app.  I can edit it in `node_modules/` just fine on my local machine (and the error goes away of course), but with no way to do so on the build servers, I can't make this app.  Not with react, anyway.  I really don't want that to be the case, because I've been building this for months, at this point, and starting over in swift or whatever would be an awful cost to my employers just because someone thought \"50 is enough for anyone\".  :/\r\n\r\nAs it seems like the expo bootstrapping layers are being ignored, I'm going to start diving in to that code now to see if I can steal its ideas, but of course I shouldn't have to.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n```\r\n  \"dependencies\": {\r\n    \"@expo/browser-polyfill\": \"0.0.1-alpha.3\",\r\n    \"@expo/vector-icons\": \"10.0.1\",\r\n    \"@react-navigation/core\": \"3.3.1\",\r\n    \"airbnb-prop-types\": \"2.13.2\",\r\n    \"axios\": \"0.18.0\",\r\n    \"buffer\": \"5.2.1\",\r\n    \"expo\": \"33.0.0\",\r\n    \"expo-constants\": \"5.0.1\",\r\n    \"expo-gl\": \"5.0.1\",\r\n    \"expo-web-browser\": \"5.0.3\",\r\n    \"lodash\": \"4.17.11\",\r\n    \"moment\": \"2.24.0\",\r\n    \"path\": \"0.12.7\",\r\n    \"pixi.js\": \"4.7.0\",\r\n    \"prop-types\": \"15.7.2\",\r\n    \"react\": \"16.8.4\",\r\n    \"react-moment-proptypes\": \"1.6.0\",\r\n    \"react-native\": \"https://github.com/expo/react-native/archive/sdk-33.0.0.tar.gz\",\r\n    \"react-navigation\": \"3.11.0\",\r\n    \"react-navigation-redux-helpers\": \"3.0.2\",\r\n    \"react-redux\": \"7.1.0\",\r\n    \"react-switch-case\": \"1.0.6\",\r\n    \"redux\": \"4.0.1\",\r\n    \"redux-form\": \"8.2.1\",\r\n    \"redux-persist\": \"5.10.0\",\r\n    \"redux-persist-expo-securestore\": \"2.0.0\",\r\n    \"redux-thunk\": \"2.3.0\",\r\n    \"reselect\": \"4.0.0\",\r\n    \"whatwg-url\": \"7.0.0\"\r\n  },\r\n```\r\n\r\nLinux Mint 18, iOS 12.2.  Most likely didn't work in previous versions of react, but I haven't checked.",
              "createdAt": "2019-07-17T12:38:29Z",
              "author": {
                "login": "Asday",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/340276?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16147",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "How to get the data from of the child components inside of a parent compoNent: React JS",
              "state": "CLOSED",
              "number": 16149,
              "body": "I have a scenario where-in there a child and a parent component. Within this parent, I am calling this child components twice.\r\n\r\nEach child components has as a set of checkboxes has an Apply and a clear button. So on click of Apply , I have to send the checked one's to the parent . \r\n\r\nSince I am having two instances of the same child components within the parent, the click of Apply inside each child results in content is getting over-written. \r\n\r\nIs there a way where I can get the all the data from child components without getting over-written?\r\n\r\nAll I want is get the data of child components(the checked one's from each child)\r\n\r\nHelp would be appreciated!\r\n\r\n\r\nSandbox: https://codesandbox.io/s/stupefied-cohen-f5td1\r\n\r\nParent Component\r\n------------------\r\n\r\n```````````````````````\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Child1 from \"./Child1\";\r\nimport \"./styles.css\";\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [\r\n        { firstName: \"Jack\", status: \"Submitted\" },\r\n        { firstName: \"Simon\", status: \"Pending\" },\r\n        { firstName: \"Pete\", status: \"Approved\" },\r\n        { firstName: \"Lucas\", status: \"Rejected\" }\r\n      ]\r\n    };\r\n  }\r\n\r\n  handleSetData = value => {\r\n    console.log(value);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Child1\r\n          data={this.state.data}\r\n          param=\"firstName\"\r\n          handleSetData={this.handleSetData}\r\n        />\r\n        <Child1\r\n          data={this.state.data}\r\n          param=\"status\"\r\n          handleSetData={this.handleSetData}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n\r\n`````````````````````````````\r\n\r\nChild Component\r\n---------------------\r\n\r\n````````````````````````\r\nimport React from \"react\";\r\nimport { Checkbox, Button } from \"semantic-ui-react\";\r\nimport \"./styles.css\";\r\n\r\nexport default class Child extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      optionsArr: [],\r\n      originalState: []\r\n    };\r\n  }\r\n\r\n  handleItemClick = (event, data) => {\r\n    const index = this.state.data.findIndex(item => item.name === data.name);\r\n    const optionsArr = this.state.data.map((prevState, i) =>\r\n      i === index\r\n        ? {\r\n            display: prevState.display,\r\n            name: prevState.name,\r\n            checked: !prevState.checked\r\n          }\r\n        : prevState\r\n    );\r\n    this.setState({ data: optionsArr });\r\n  };\r\n\r\n  componentDidMount() {\r\n    let values = this.props.data.map(arr => arr[this.props.param]);\r\n    var optionsArr = [];\r\n    for (let i = 0; i < values.length; i++) {\r\n      var options = {};\r\n      options[\"key\"] = values[i];\r\n      options[\"text\"] = values[i];\r\n      options[\"field\"] = this.props.param;\r\n      options[\"checked\"] = false;\r\n      optionsArr.push(options);\r\n    }\r\n    this.setState({ optionsArr: optionsArr, originalState: optionsArr });\r\n  }\r\n\r\n  clearSelection = event => {\r\n    this.setState({ optionsArr: this.state.originalState });\r\n  };\r\n\r\n  submitSelection = () => {\r\n    let checkedValues = this.state.optionsArr.filter(item => item.checked);\r\n    this.setState({ originalState: this.state.optionsArr }, () =>\r\n      this.props.handleSetData(checkedValues)\r\n    );\r\n  };\r\n\r\n  handleItemClick = (event, data) => {\r\n    const index = this.state.optionsArr.findIndex(\r\n      item => item.text === data.name\r\n    );\r\n    const optionsArr = this.state.optionsArr.map((prevState, i) =>\r\n      i === index\r\n        ? {\r\n            key: prevState.key,\r\n            text: prevState.text,\r\n            field: this.props.param,\r\n            checked: !prevState.checked\r\n          }\r\n        : prevState\r\n    );\r\n    this.setState({ optionsArr });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        Child Component\r\n        <div className=\"menu-item-holder\">\r\n          {this.state.optionsArr.map((item, i) => (\r\n            <div className=\"menu-item\" key={i}>\r\n              <Checkbox\r\n                name={item.text}\r\n                onChange={this.handleItemClick}\r\n                checked={item.checked}\r\n                label={item.text}\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"menu-btn-holder\">\r\n          <Button size=\"small\" onClick={this.submitSelection}>\r\n            Apply\r\n          </Button>\r\n          <Button size=\"small\" onClick={this.clearSelection}>\r\n            Cancel\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n",
              "createdAt": "2019-07-17T15:53:41Z",
              "author": {
                "login": "velsonjr",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/42905121?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16149",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "setState freezes UI for some seconds",
              "state": "OPEN",
              "number": 16150,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\ni guess bug \r\n\r\n**What is the current behavior?**\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nI am a noob in react but this is bugging me and couldn't find any relevant examples online.\r\n\r\nOn checkbox onchange, I'm changing the state using setState like this- \r\n```\r\nhandleDeleteCheckboxChange=({ target }, id) => {\r\n    const { deleteMappings } = this.state;\r\n\r\n    const check = target.checked;\r\n    if (check === true) {\r\n      const addToExisting = deleteMappings;\r\n      addToExisting.push(id);\r\n      this.setState({ deleteMappings: addToExisting });\r\n    }\r\n    else {\r\n      const removeId = deleteMappings.filter(item => item !== id);\r\n      this.setState({ deleteMappings: removeId });\r\n    }\r\n  }\r\n\r\n```\r\n\r\nSet state works but each time checkbox is changed, it takes a full second to two to get updated on the screen. I tried to remove setState and its fast. \r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n",
              "createdAt": "2019-07-17T18:54:53Z",
              "author": {
                "login": "arswaroop",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/41299771?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16150",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "set hook not working inside an event handler",
              "state": "CLOSED",
              "number": 16153,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nset hook not working inside an event handler\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal** \r\nthis is the reproduction of the \"bug\": https://codesandbox.io/s/react-hooks-counter-demo-ds67o\r\n\r\n**What is the expected behavior?**\r\nit should set state inside an event handler\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n```\r\n\"react\": \"16.8.0\",\r\n\"react-dom\": \"16.8.0\",\r\n\"react-scripts\": \"3.0.1\"\r\n```\r\n",
              "createdAt": "2019-07-18T01:55:29Z",
              "author": {
                "login": "MatteoGioioso",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/43592430?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16153",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Accessing state/props in callback ref with hooks",
              "state": "OPEN",
              "number": 16154,
              "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nRequesting guidance on how to implement something with hooks that used to be possible with class components (so it's not quite a bug, but it might end up becoming a feature request)\r\n\r\n**What is the current behavior?**\r\n\r\nIf you want to access an external value inside a callback ref (props/state/etc.), you can use `useCallback`. However, in some cases you may want to avoid re-triggering the callback ref when one of those external values change. In that case, you could use `useRef` to work around this, and update the ref's value with `useEffect`/`useLayoutEffect`, like this:\r\n\r\n```\r\nconst valueRef = useRef(value);\r\nuseEffect(() => {\r\n  valueRef.current = value;\r\n}, [value]);\r\n\r\n// Now the callback ref can use `valueRef.current`\r\n```\r\n\r\nHowever, callback refs are called before `useEffect`/`useLayoutEffect` callbacks, so if the callback ref happens to be triggered as a result of the same render in which `value` changes, it will see the old value when it access `valueRef.current`.\r\n\r\nThis could be worked around by updating `valueRef` as a side effect of render:\r\n\r\n```\r\nconst valueRef = useRef(value);\r\nvalueRef.current = value;\r\n```\r\n\r\nThis is admittedly a very specific edge case, but I have actually introduced bugs into real code due to this, when trying to convert existing class components to use hooks. Another motivation for this is to use it to help implement a custom hook for making callback refs nicer to use by mimicking the `useEffect` API: https://github.com/facebook/react/issues/15176#issuecomment-512185852\r\n\r\nInterestingly, this issue does not happen with class components, because `this.props` and `this.state` have the correct value when the callback ref is triggered.\r\n\r\nHere is a codesandbox with a contrived example that reproduces the issue (and shows how the issue does not occur with a class component): https://codesandbox.io/s/callback-refhooks-72m3p\r\n\r\n**What is the expected behavior?**\r\n\r\nThat there is some way of handling this use case using hooks, and in such a way that works with concurrent mode:\r\n\r\n• Wanting to access external values in a callback ref\r\n• Wanting to avoid triggering the callback ref when those values change\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n* React/React-DOM 16.8.6\r\n* Not a browser/OS-related issue\r\n* Also did not work in previous versions of React",
              "createdAt": "2019-07-18T07:03:20Z",
              "author": {
                "login": "butchler",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/73473?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16154",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Get the values of all child components inside parent component: ReactJS",
              "state": "OPEN",
              "number": 16155,
              "body": "Scenario :\r\n\r\nI have a scenario where-in there is a child which is being called multiple times inside Parent.\r\n\r\nEach child components has as a set of checkboxes , an Apply and a clear button. So on click of Apply , I have to send the checked one's to the parent .\r\n\r\nFor example first section gives me this after I check \"Jack\" and click on Apply\r\n````````\r\n{key: \"Jack\" text: \"Jack\" field: \"firstName\" checked: true} \r\n`````````````\r\n\r\nNow If I go to section 2 and check on \"Pending\" I get\r\n```````````\r\n {key: \"Pending\" text: \"Pending\" field: \"status\" checked: true} \r\n\r\n`````````````````\r\n\r\nI don't want this behavior. Instead I want both the values some thing like this \r\n`````````````````\r\n[\r\n {key: \"Jack\" text: \"Jack\" field: \"firstName\" checked: true},\r\n {key: \"Pending\" text: \"Pending\" field: \"status\" checked: true} \r\n] \r\n\r\n``````````````````````\r\n\r\nor in general whichever the checked one's without losing the previous content.\r\n\r\nSandbox: https://codesandbox.io/s/stupefied-cohen-f5td1\r\n\r\nParent Component\r\n------------------\r\n\r\n```````````````````````\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Child1 from \"./Child1\";\r\nimport \"./styles.css\";\r\n\r\nexport default class App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: [\r\n        { firstName: \"Jack\", status: \"Submitted\" },\r\n        { firstName: \"Simon\", status: \"Pending\" },\r\n        { firstName: \"Pete\", status: \"Approved\" },\r\n        { firstName: \"Lucas\", status: \"Rejected\" }\r\n      ]\r\n    };\r\n  }\r\n\r\n  handleSetData = value => {\r\n    console.log(value); // need to get data here from all instances of child, it should not over ride\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Child1\r\n          data={this.state.data}\r\n          param=\"firstName\"\r\n          handleSetData={this.handleSetData}\r\n        />\r\n        <Child1\r\n          data={this.state.data}\r\n          param=\"status\"\r\n          handleSetData={this.handleSetData}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n\r\n`````````````````````````````\r\n\r\nChild Component\r\n---------------------\r\n\r\n````````````````````````\r\nimport React from \"react\";\r\nimport { Checkbox, Button } from \"semantic-ui-react\";\r\nimport \"./styles.css\";\r\n\r\nexport default class Child extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      optionsArr: [],\r\n      originalState: []\r\n    };\r\n  }\r\n\r\n  handleItemClick = (event, data) => {\r\n    const index = this.state.data.findIndex(item => item.name === data.name);\r\n    const optionsArr = this.state.data.map((prevState, i) =>\r\n      i === index\r\n        ? {\r\n            display: prevState.display,\r\n            name: prevState.name,\r\n            checked: !prevState.checked\r\n          }\r\n        : prevState\r\n    );\r\n    this.setState({ data: optionsArr });\r\n  };\r\n\r\n  componentDidMount() {\r\n    let values = this.props.data.map(arr => arr[this.props.param]);\r\n    var optionsArr = [];\r\n    for (let i = 0; i < values.length; i++) {\r\n      var options = {};\r\n      options[\"key\"] = values[i];\r\n      options[\"text\"] = values[i];\r\n      options[\"field\"] = this.props.param;\r\n      options[\"checked\"] = false;\r\n      optionsArr.push(options);\r\n    }\r\n    this.setState({ optionsArr: optionsArr, originalState: optionsArr });\r\n  }\r\n\r\n  clearSelection = event => {\r\n    this.setState({ optionsArr: this.state.originalState });\r\n  };\r\n\r\n  submitSelection = () => {\r\n    let checkedValues = this.state.optionsArr.filter(item => item.checked);\r\n    this.setState({ originalState: this.state.optionsArr }, () =>\r\n      this.props.handleSetData(checkedValues)\r\n    );\r\n  };\r\n\r\n  handleItemClick = (event, data) => {\r\n    const index = this.state.optionsArr.findIndex(\r\n      item => item.text === data.name\r\n    );\r\n    const optionsArr = this.state.optionsArr.map((prevState, i) =>\r\n      i === index\r\n        ? {\r\n            key: prevState.key,\r\n            text: prevState.text,\r\n            field: this.props.param,\r\n            checked: !prevState.checked\r\n          }\r\n        : prevState\r\n    );\r\n    this.setState({ optionsArr });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        Child Component\r\n        <div className=\"menu-item-holder\">\r\n          {this.state.optionsArr.map((item, i) => (\r\n            <div className=\"menu-item\" key={i}>\r\n              <Checkbox\r\n                name={item.text}\r\n                onChange={this.handleItemClick}\r\n                checked={item.checked}\r\n                label={item.text}\r\n              />\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"menu-btn-holder\">\r\n          <Button size=\"small\" onClick={this.submitSelection}>\r\n            Apply\r\n          </Button>\r\n          <Button size=\"small\" onClick={this.clearSelection}>\r\n            Cancel\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n",
              "createdAt": "2019-07-18T08:41:04Z",
              "author": {
                "login": "velsonjr",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/42905121?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16155",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "How add resize height to element on hover",
              "state": "OPEN",
              "number": 16158,
              "body": "In my react project i want show modal on hover, but when hover last elements crashed layout, how i can add resize height to parent div on hover ?\r\n\r\nhttps://codesandbox.io/embed/hardcore-poitras-mt2mw?fontsize=14",
              "createdAt": "2019-07-18T19:53:21Z",
              "author": {
                "login": "yaverm",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/15903789?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16158",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Can I download all tutorial pdf",
              "state": "OPEN",
              "number": 16159,
              "body": "Ictually I want to read tutorial on bus or metro so şs there any download pdf option ",
              "createdAt": "2019-07-18T21:04:34Z",
              "author": {
                "login": "meteerogl",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/36826746?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16159",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Bug: React DOM Server is mutating CSS variable names",
              "state": "OPEN",
              "number": 16160,
              "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n### Current Behaviour\r\n\r\n - `ReactDOMServer.renderToString` is mutating CSS Variable names that are inlined and in the `--camelCase` format into `--kebab-case`\r\n\r\n### Expected Behaviour\r\n\r\n - `ReactDOMServer.renderToString` does not mutate the CSS Variable name, and keeps it in `--camelCase` format\r\n\r\n### Demo\r\n\r\n - https://codesandbox.io/s/react-dom-server-debugging-28xsr\r\n\r\n### Versions:\r\n\r\n - Issue appears in `react@16.8.6` &  `react-dom@16.8.6` \r\n - Issue appears in `react@16.0.0` & `react-dom@16.0.0` \r\n - (That's all I've tested so far)\r\n\r\n### Other notes:\r\n\r\n - It's worth noting that `ReactDOM.render` is preserving the CSS Variable name and not mutating it. It only seems to only be an issue with `ReactDOMServer.renderToString`\r\n",
              "createdAt": "2019-07-18T22:38:21Z",
              "author": {
                "login": "rdhaliwal",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/931428?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16160",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "onBeforeInput fires after browser updates the DOM for special characters like \"中\" or 😣on Firefox and Edge",
              "state": "OPEN",
              "number": 16161,
              "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nonBeforeInput fires after browser updates the DOM for special characters like \"中\" or 😣on Firefox and Edge\r\nhttps://codesandbox.io/s/modest-franklin-muirj  \r\nNOTE: pasting it would not trigger the bug, you have to type it in. You can use control-command-space to open the emoji keyboard on mac\r\n\r\n**What is the expected behavior?**\r\nDOM should not update before onBeforeInput fires\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact: 16.3.1\r\nFirefox: 68.0.1 \r\nMac: 10.14.5\r\n",
              "createdAt": "2019-07-19T00:07:06Z",
              "author": {
                "login": "Chun-Yang",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/2827867?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16161",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Once again on getDerivedStateFromProps being called after setState",
              "state": "OPEN",
              "number": 16162,
              "body": "I've read all the issues end blog posts on this topic and still can't find suitable solution for my case. I'm still in the 16.3 camp, though I must be just not competent enough to judge. Please help me to do things right. So I have a sort of pivot grid component with quite heavy state and a GridCell (uncontrolled or semi-controlled) component which is basically one number input. So the value and onChange are cycled through it's state and in parent component I'm handling just onBlur. So in order to do some validation when users enter unacceptable value I notify them and then I want to reset the cell by resetting prevState. [Here](https://codesandbox.io/s/musing-mclaren-qvclh) is a simplified reproduction of the problem.\r\n",
              "createdAt": "2019-07-19T09:41:30Z",
              "author": {
                "login": "sarat12",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/1218708?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/facebook/react/issues/16162",
              "labels": {
                "edges": []
              }
            }
          }
        ]
      }
    }
  }
}