{
    "data": {
      "repository": {
        "issues": {
          "edges": [
            {
              "node": {
                "title": "[ESLint] Feedback for 'exhaustive-deps' lint rule",
                "state": "CLOSED",
                "number": 14920,
                "body": "## Common Answers\r\n\r\n💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡\r\n\r\n**We analyzed the comments on this post to provide some guidance: https://github.com/facebook/react/issues/14920#issuecomment-471070149.**\r\n\r\n💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡💡\r\n\r\n----\r\n\r\n## What is this\r\n\r\nThis is a new ESLint rule that verifies the list of dependencies for Hooks like `useEffect` and similar, protecting against the stale closure pitfalls. For most cases it has an autofix. We'll add more documentation over the next weeks.\r\n\r\n![autofix demo](https://user-images.githubusercontent.com/810438/53197370-f7b9be80-3611-11e9-9d97-fc69285000d0.gif)\r\n\r\n## Installation\r\n\r\n```\r\nyarn add eslint-plugin-react-hooks@next\r\n# or\r\nnpm install eslint-plugin-react-hooks@next\r\n```\r\n\r\nESLint config:\r\n\r\n```js\r\n{\r\n  \"plugins\": [\"react-hooks\"],\r\n  // ...\r\n  \"rules\": {\r\n    \"react-hooks/rules-of-hooks\": 'error',\r\n    \"react-hooks/exhaustive-deps\": 'warn' // <--- THIS IS THE NEW RULE\r\n  }\r\n}\r\n```\r\n\r\nSimple test case to verify the rule works:\r\n\r\n```js\r\nfunction Foo(props) {\r\n  useEffect(() => {\r\n    console.log(props.name);\r\n  }, []); // <-- should error and offer autofix to [props.name]\r\n}\r\n``` \r\n## The lint rule complains but my code is fine!\r\n\r\n**If this new `react-hooks/exhaustive-deps` lint rule fires for you but you think your code is correct**, please post in this issue.\r\n\r\n----\r\n\r\n\r\n\r\n# BEFORE YOU POST A COMMENT\r\n\r\n**Please** include these three things:\r\n\r\n1. A CodeSandbox demonstrating a **minimal code example** that still expresses your intent (not \"foo bar\" but **actual UI pattern** you're implementing).\r\n2. An explanation of the **steps** a user does and what you expect to see on the screen.\r\n3. An explanation of the **intended API** of your Hook/component.\r\n\r\n![please](https://media1.giphy.com/media/14cNSEhRyTX8Ag/giphy.gif?cid=3640f6095c700c9b774a644a51e2089e)\r\n\r\n## But my case is simple, I don't want to include those things!\r\n\r\nIt might be simple to you — but it’s not at all simple to us. **If your comment doesn't include either of them (e.g. no CodeSandbox link), we will hide your comment** because it’s very hard to track the discussion otherwise. Thank you for respecting everyone’s time by including them.\r\n\r\nThe end goal of this thread is to find common scenarios and transform them into better docs and warnings. This can only happen when enough details are available. Drive-by comments with incomplete code snippets significantly drive down the quality of the discussion — to the point that it's not worth it.",
                "createdAt": "2019-02-21T19:03:49Z",
                "author": {
                  "login": "gaearon",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/810438?v=4"
                },
                "assignees": {
                  "nodes": [
                    {
                      "name": "Dan Abramov",
                      "avatarUrl": "https://avatars0.githubusercontent.com/u/810438?v=4"
                    }
                  ]
                },
                "url": "https://github.com/facebook/react/issues/14920",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Component: ESLint Rules",
                        "color": "f7afdb"
                      }
                    },
                    {
                      "node": {
                        "name": "Type: Discussion",
                        "color": "fef2c0"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "eslint-plugin-react-hooks@next no longer includes exhaustive-deps",
                "state": "CLOSED",
                "number": 14921,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug-ish\r\n\r\n**What is the current behavior?**\r\n\r\nThe newly-released eslint-plugin-react-hooks@1.1.0 (tagged as both `latest` and `next`) [does not include](https://unpkg.com/eslint-plugin-react-hooks@1.1.0/cjs/eslint-plugin-react-hooks.development.js) the new exhaustive-deps rule. As a result, `npm install eslint-plugin-react-hooks@next` no longer installs a version of the plugin containing the rule.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nSee [unpkg](https://unpkg.com/eslint-plugin-react-hooks@1.1.0/cjs/eslint-plugin-react-hooks.development.js) -- scroll to the bottom to verify that only `rules-of-hooks` is exported.\r\n\r\n**What is the expected behavior?**\r\n\r\nI'm not sure if 1.1.0 was intended to include the rule or not. (It seems to be the only entry in the commit log between 1.0.2 and 1.1.0, and the alphas/RC were released as 1.1.0-X, so I'm guessing it was?)\r\n\r\nIf it was, then this might have been a release bug?\r\n\r\nIf it wasn't, perhaps a new 1.2.0-rc.1 could be released and tagged as `next` so that `npm install eslint-plugin-react-hooks@next` installs a version of the plugin with the new rule, as it did before 1.1.0.",
                "createdAt": "2019-02-21T19:18:43Z",
                "author": {
                  "login": "billyjanitsch",
                  "avatarUrl": "https://avatars3.githubusercontent.com/u/1158733?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14921",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "n from props",
                "state": "CLOSED",
                "number": 14924,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\n**What is the current behavior?**\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n",
                "createdAt": "2019-02-22T03:25:53Z",
                "author": {
                  "login": "dsarlo",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/16106087?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14924",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "useReducer reduces actions again on render",
                "state": "CLOSED",
                "number": 14925,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nOn render, previous reduce actions are reduced again\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/x3yqq70z8z\r\n\r\n```javascript\r\nimport React, { useReducer } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nconst Bug = () => {\r\n  console.log(\"render\");\r\n\r\n  const [value, dispatch] = useReducer((state, action) => {\r\n    console.log(action.type);\r\n    switch (action.type) {\r\n      case \"UPDATE\": {\r\n        return state + 1;\r\n      }\r\n      case \"NOP\": {\r\n        break;\r\n      }\r\n      default:\r\n    }\r\n    return state;\r\n  }, 0);\r\n\r\n  const update = () => {\r\n    console.log(\"update\");\r\n    dispatch({ type: \"UPDATE\" });\r\n  };\r\n\r\n  const nop = () => {\r\n    console.log(\"nop\");\r\n    dispatch({ type: \"NOP\" });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button onClick={nop}>Nop</button>\r\n      <button onClick={update}>Update</button>\r\n    </>\r\n  );\r\n};\r\n```\r\n\r\nClick the Nop button, then click the Update button.\r\n\r\nThe console output is:\r\n- render\r\n- nop\r\n- NOP\r\n- update\r\n- UPDATE\r\n- render\r\n- NOP\r\n- UPDATE\r\n\r\nThe last two (NOP and UPDATE) go through the reducer without getting dispatched from the component.\r\n\r\nFor each consecutive click of Nop, the call to update will reduce an extra NOP after render.\r\nAfter the first re-render, the amount of NOPs reduced will be the number of clicks - 1.\r\n\r\n**What is the expected behavior?**\r\n\r\nNo actions get reduced without calling dispatch.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nThis happens in every browser, and in every version of React since 16.8.0-alpha-0.  ",
                "createdAt": "2019-02-22T05:46:49Z",
                "author": {
                  "login": "orokanasaru",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/5751627?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14925",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "useLayoutEffect in ssr",
                "state": "OPEN",
                "number": 14927,
                "body": "Hi, I do not understand the situation with this hook a bit. I use this hook to perform the animation synchronously with the state update, if I use useEffect, then I have jumps in the animation, because the animation library does not have time to start. Also, the documentation states that useLayoutEffect runs on the same phase as componentDidMount (that is, on the client side), and here my server issues complaints to me about my code. Why is that?\r\n\r\nhttps://codesandbox.io/s/oo47nj9mk9\r\n\r\n_Originally posted by @dimensi in https://github.com/facebook/react/pull/14596#issuecomment-466023638_",
                "createdAt": "2019-02-22T10:52:29Z",
                "author": {
                  "login": "dimensi",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/11390039?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14927",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Type: Question",
                        "color": "cc317c"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "Delete this issue",
                "state": "CLOSED",
                "number": 14928,
                "body": "NEVERMIND, I FOUND THE PROBLEM, ",
                "createdAt": "2019-02-22T15:24:49Z",
                "author": {
                  "login": "Espii",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/7243351?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14928",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Uncaught Error: Hooks can only be called inside the body of a function component",
                "state": "CLOSED",
                "number": 14929,
                "body": "**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact v16.8.3, ReactDOM v16.8.3\r\n\r\n------------------------------------\r\n\r\nI made a very simple example of my code in this repo: \r\nhttps://github.com/azat-io/react-hooks-example\r\n\r\nCould you explain me please, what's wrong, why hooks not works for me?\r\nTry to run my code if it possible\r\n\r\nI have already checked versions of React and ReactDOM, I cleaned yarn and NPM cache",
                "createdAt": "2019-02-22T15:47:08Z",
                "author": {
                  "login": "azat-io",
                  "avatarUrl": "https://avatars2.githubusercontent.com/u/5698350?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14929",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Weird bug with useState in conjunction with useClickOutside",
                "state": "CLOSED",
                "number": 14932,
                "body": "The bug is extremely weird and I'm not sure whether it's `useClickOutside` broken or React.\r\nReproduce CodeSandox is here: https://codesandbox.io/s/lr668rr94m\r\n\r\nLong story short. I want to handle some logic only when something is `inProgress` if it's not in progress no state changes should happen.\r\nBut when this actual thing is indeed `inProgress` (has a `true` value) in `render` scope it's actually `true` while in callback it somehow appears to be still `false`.\r\n\r\nI watched the code of `useClickOutside` and there is no `useCallback` involved to cause such issue, so I assume it can be some issue with React itself.\r\n\r\nI also opened an issue in the repo:\r\nhttps://github.com/sandiiarov/use-events/issues/35\r\n\r\nPlease check its source code here:\r\nhttps://github.com/sandiiarov/use-events/blob/master/src/useClickOutside/index.tsx",
                "createdAt": "2019-02-22T21:57:31Z",
                "author": {
                  "login": "RIP21",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/3940079?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14932",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Add support for functions as children in Suspense",
                "state": "CLOSED",
                "number": 14933,
                "body": "**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\n`<Suspense children={() => {}} />` is not supported.\r\n\r\n**What is the expected behavior?**\r\nAs mentioned [here](https://github.com/facebook/react/issues/13947#issuecomment-465743800) before, I hope that there will be support for `children` to be a render prop in `<Suspense />`. Why? I currently have the following case where I dislike to define another component only for loading async data\r\n```javascript\r\nfunction ShowModal({ itemId }) {\r\n  return (\r\n    <Modal open>\r\n      <Suspense fallback={<p>Loading ...</p>}>\r\n      {() => {\r\n        const item = ItemStorage.read(itemId);\r\n\r\n        return (\r\n          <Modal.Header>\r\n            <Modal.Title>{item.name}</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n          { /* ... stuff with data of item ... */ }\r\n          </Modal.Body>\r\n        );\r\n      })\r\n      </Suspense>\r\n    </Modal>\r\n  );\r\n}\r\n```\r\nCurrently this does not work because `children` is not allowed to be a function. So I have to define another component whos only task is to load the data and pass it to into the right place. I think there should be an easier solution, like the one used above. (To be honest, the code above works, **but** only because I use a wrapper component around the native React Suspense component.)\r\n\r\nMy currently wrapper component is defined like this:\r\n```javascript\r\nfunction SuspenseRenderChildren({ children }) {\r\n  return children(); // really? :/\r\n}\r\n\r\nfunction Suspense({ children, ...props }) {\r\n  if (typeof children === \"function\") {\r\n    return (\r\n      <React.Suspense {...props}>\r\n        <SuspenseRenderChildren children={children} />\r\n      </React.Suspense>\r\n    );\r\n  } else {\r\n    return (\r\n      <React.Suspense {...props} children={children} />\r\n    );\r\n  }\r\n}\r\n```\r\nTherefore I create some kind of *wrapper hell* because in the worst case I render the following ...\r\n```javascript\r\n<Suspense>\r\n  <React.Suspense>\r\n    <SuspenseRenderChildren />\r\n  </React.Suspense>\r\n</Suspense>\r\n```\r\n... where it could be just ...\r\n```javascript\r\n<React.Suspense />\r\n```",
                "createdAt": "2019-02-22T23:12:21Z",
                "author": {
                  "login": "MeiKatz",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/1072475?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14933",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Warnings when assigning to ref in render phase?",
                "state": "OPEN",
                "number": 14935,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nThere are no warnings when assigning to `ref.current` in render phase.\r\n\r\n**What is the expected behavior?**\r\n\r\nGiven that this mostly works now, but may cause issues on release of concurrent mode, it would be helpful to have a warning when assigning to a prop outside of `useEffect()`.\r\n\r\nE.g. I recently wrote this code, which works fine at the moment, and didn't realize the possible issue until @gaearon pointed out the missing `useEffect()`:\r\n\r\n```js\r\nexport function useDidChange(value) {\r\n  let ref = useRef()\r\n  let didChange = ref.current !== value\r\n  ref.current = value\r\n  return didChange\r\n}\r\n```\r\n\r\nIf a warning is not possible due to the lazy initialization pattern, perhaps an eslint rule may be a solution?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll versions",
                "createdAt": "2019-02-23T02:17:44Z",
                "author": {
                  "login": "jamesknelson",
                  "avatarUrl": "https://avatars3.githubusercontent.com/u/161707?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14935",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Type: Enhancement",
                        "color": "84b6eb"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "React dom dispatches events when it shouldn't",
                "state": "CLOSED",
                "number": 14936,
                "body": "\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen we set a value to an input field and set the focus of that element straight after setting its value,\r\nReact dom is dispatching event listeners on the focused element.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/oshan/x7at18h4/3/)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact version 16.7.0, React dom version 16.7.0\r\nBrowsers: Chrome, Edge, Firefox \r\n",
                "createdAt": "2019-02-23T02:26:55Z",
                "author": {
                  "login": "OshanAbeykoon",
                  "avatarUrl": "https://avatars3.githubusercontent.com/u/38980527?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14936",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Feature request: Add an optional parameter \"enable\" to all Hooks.",
                "state": "CLOSED",
                "number": 14937,
                "body": "Currently, there's no support for \"conditional Hook\", i mean we couldn't enable/disable Hook based on  a javascript value.\r\n\r\nSuggestion: Allow for all Hooks to have an optional `enable` paramenter , which default value set to `true`.\r\nSo if a user set `enable: false` , like \r\n```js\r\nconst shouldRunState = false\r\nconst [count, setCount] = useState({enable: shouldRunState})\r\n```\r\nthe Hooks will simply have no effect at all, as if it's not there.\r\n\r\nMy example is just to show what the feature look like.\r\nThis feature should be backward compatible with current Hooks API.\r\n\r\nCommon use case is allow a Component/Parent to control Hooks based on `props/context`, so it'll make Hooks more flexible to use.\r\n",
                "createdAt": "2019-02-23T06:37:05Z",
                "author": {
                  "login": "revskill10",
                  "avatarUrl": "https://avatars3.githubusercontent.com/u/1390196?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14937",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "[eslint-plugin-react-hooks] Allow configuration custom hook detection",
                "state": "OPEN",
                "number": 14941,
                "body": "\r\n**Do you want to request a *feature* or report a *bug*?**\r\n*feature*\r\n\r\n**What is the current behavior?**\r\nhttps://codesandbox.io/s/vjqo40v9yy\r\n```js\r\nfunction unstable_useMediaQuery(query) {\r\n  const [matches, setMatches] = React.useState(false);\r\n  //                            ^ [...] called in function which is neither hook nor component\r\n  /* implementation... */\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nI would like some form of configuration of what is considered a hook. There's already a good entry point for a solution to this problem in\r\nhttps://github.com/facebook/react/blob/c11015ff4f610ac2924d1fc6d569a17657a404fd/packages/eslint-plugin-react-hooks/src/RulesOfHooks.js#L18https://github.com/facebook/react/blob/c11015ff4f610ac2924d1fc6d569a17657a404fd/packages/eslint-plugin-react-hooks/src/RulesOfHooks.js#L18 \r\n\r\nThe simplest implementation would allow for a custom regex but I fear that people abuse this until it's very hard to recognize what a custom hook is and what not. Allowing a prefix would solve this particular use case. Maybe as opinionated as `/^${prefix}_use[A-Z0-9].*$/`.\r\n\r\n`useUnstableMediaQuery` is not a good solution IMO since it implies that the media query is unstable. Same for `Unstable_useMediaQuery`. This is pretty hacky since the linter considers this a component. React has already set precedent with prefixing experimental features with `unstable_` so this naming pattern is not that exotic.\r\n\r\nHappy to work on a PR.\r\n",
                "createdAt": "2019-02-24T09:20:22Z",
                "author": {
                  "login": "eps1lon",
                  "avatarUrl": "https://avatars3.githubusercontent.com/u/12292047?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14941",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Component: ESLint Rules",
                        "color": "f7afdb"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "[eslint-plugin-react-hooks] invariants, conditional calls and exhaustive deps",
                "state": "OPEN",
                "number": 14942,
                "body": "**Do you want to request a *feature* or report a *bug*?**\r\nNot sure. Either feature to allow invariant conditional calls to hooks or bug in exhaustive deps in which case #14920 might be more appropriate.\r\n\r\n**What is the current behavior?**\r\n```js\r\nfunction makeStyles(stylesObjectOrCreator) {\r\n  const listenToTheme = typeof stylesObjectOrCreator === \"function\";\r\n  const noopTheme = {};\r\n\r\n  return function useStyles() {\r\n    const theme = listenToTheme ? React.useContext(ThemeContext) : noopTheme;\r\n    //                           ^^^ [eslint] [...] is called conditionally\r\n\r\n    const styles = React.useMemo(\r\n      () => {\r\n        if (listenToTheme) {\r\n          console.log(\"listen\");\r\n          return stylesObjectOrCreator(theme);\r\n        }\r\n        console.log(\"dont listen\");\r\n        return stylesObjectOrCreator;\r\n      },\r\n      [theme]\r\n    );\r\n\r\n    const classNames = useStylesheet(styles);\r\n    return classNames;\r\n  };\r\n}\r\n```\r\n\r\nLinter reports that `React.useContext` is called conditionally but not that `listenToTheme` is missing in the dependency list.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/o91zl0z499\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would expect one of these things:\r\n1. `rules-of-hooks` recognizes that `listenToTheme` is invariant in the hook. Invariant conditions do not trigger `called conditionally`.\r\n2. `exhaustive-deps` reports that `listenToTheme` is missing\r\n\r\nIt's IMO more dangerous to add an `eslint-disable-next-line` to invariant conditional calls because it might be missed if someone changes the condition so that it no longer is invariant.\r\n\r\nIt only occurs to me now that you don't consider it invariant because one might use it in the following way:\r\n```js\r\nfunction VariantComponent({ listen }) {\r\n  // `listen` controles React.useContext call :(\r\n  const classes = makeStyles(listen ? () => ({}) : {})();\r\n}\r\n```\r\n\r\nStill doesn't explain the missing `exhaustive-deps` warning.\r\n\r\nAre you open to a rule exception via configuration like `allow-invariant-conditionals`? Users would need to add additional rules so that hook factories are not called inside components.\r\n\r\nOk talking to myself now: Even if everything stays the same and I remove the conditional call then users can still break their app by calling hook factories inside components:\r\n```js\r\nconst makeState = (initial) => () => React.useState(initial);\r\nfunction Component() {\r\n  const usedState = Math.random() < .5 ? makeState(5)() : null;\r\n  // conditional hook call that's undetected\r\n}\r\n```\r\n\r\n",
                "createdAt": "2019-02-24T10:18:48Z",
                "author": {
                  "login": "eps1lon",
                  "avatarUrl": "https://avatars3.githubusercontent.com/u/12292047?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14942",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Component: ESLint Rules",
                        "color": "f7afdb"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "[Fixtures] The removed ReactDOM.unstable_deferredUpdates method should be replaced in the fiber-triangle fixture",
                "state": "OPEN",
                "number": 14945,
                "body": "The error occurs when the \"fiber-triangle\" fixture is running.\r\n![fiber-triangle-error](https://user-images.githubusercontent.com/9514958/53303704-68f9ab80-3876-11e9-8b29-a8a6b9530eb9.png)\r\n\r\nThe root cause is as follows: the removed `ReactDOM.unstable_deferredUpdates()` method is used to defer updates.\r\n\r\nThe `requestIdleCallback()` doesn't prevent the page stuttering when is used instead of the `ReactDOM.unstable_deferredUpdates()` (as was suggested at https://github.com/facebook/react/pull/13488#issue-210960173). This behavior could be tested at https://codesandbox.io/s/317vypvo9p\r\n\r\nNotes: React v 16.8.3\r\n",
                "createdAt": "2019-02-24T19:04:43Z",
                "author": {
                  "login": "mpelekh",
                  "avatarUrl": "https://avatars2.githubusercontent.com/u/9514958?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14945",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Feature request: `useShouldUpdate` hook",
                "state": "CLOSED",
                "number": 14946,
                "body": "**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature\r\n\r\nIt is currently impossible to let React know that the output of a **functional component** is not affected by the current change. I think that it would be great to have a hook for enabling this capability. In other words: having the SCU functionality in functional components through a hook.\r\n\r\nI'm aware of the existence of `React.memo` and I know that it is possible to accomplish the same thing by splitting the logic in 2 different functional components... as long as we enhance the \"base\" component with `React.memo`. However, I still think that the hook that I'm suggesting would be a pretty nice addition.\r\n\r\nI guess that it's a good idea to show an example of a real case where this hook would be helpful. So, here we go:\r\n\r\nI don't normally use the official react-redux bindings. Instead, I have my own version of the `connect` HOC which has a more limited (and slightly different) API, that better suits my needs. This makes my version a bit more performant and a lot lighter. Regardless of whether it is a good idea not to use the official react-redux bindings, the following example illustrates the benefit of having the hook that I'm suggesting.\r\n\r\nThis is the current implementation of my custom \"connect\" HOC:\r\n\r\n```js\r\nconst emptyObj = {};                                                           \r\nconst alwaysEmpty = () => emptyObj;                                            \r\n                                                                               \r\nexport default (fromStateProps_, fromActionProps = emptyObj, mapper) => {      \r\n  const dependsOnProps = fromStateProps_ && fromStateProps_.length !== 1;      \r\n  const fromStateProps = !fromStateProps_ ? alwaysEmpty : fromStateProps_;     \r\n                                                                               \r\n  return BaseComponent => {                                                    \r\n    const MBaseComponent = memo(BaseComponent);                                \r\n                                                                               \r\n    return props => {                                                          \r\n      const dependantProps = dependsOnProps ? props : emptyObj;                \r\n                                                                               \r\n      const {state, dispatch} = useContext(context);                           \r\n      const stateProps = useMemo(() => fromStateProps(state, dependantProps), [\r\n        state,                                                                 \r\n        dependantProps,                                                        \r\n      ]);                                                                      \r\n      const actionProps = useMemo(() => {                                      \r\n        const res = {};                                                        \r\n        Object.entries(fromActionProps).forEach(([name, aCreator]) => {        \r\n          res[name] = (...args) => dispatch(aCreator(...args));                \r\n        });                                                                    \r\n        return res;                                                            \r\n      }, [dispatch]);                                                          \r\n                                                                               \r\n      return useMemo(() => {                                                   \r\n        const finalProps = mapper                                              \r\n          ? mapper(stateProps, actionProps, props)                             \r\n          : {...props, ...stateProps, ...actionProps};                         \r\n        return <MBaseComponent {...finalProps} />;                             \r\n      }, [actionProps, props, stateProps]);                                    \r\n    };                                                                         \r\n  };                                                                           \r\n};                                                                             \r\n```\r\n\r\nIt works great (for me). However, I would much rather to be able to implement it like this:\r\n\r\n```js\r\nconst emptyObj = {};                                                           \r\nconst alwaysEmpty = () => emptyObj;                                            \r\n                                                                               \r\nexport default (fromStateProps_, fromActionProps = emptyObj, mapper) => {      \r\n  const dependsOnProps = fromStateProps_ && fromStateProps_.length !== 1;      \r\n  const fromStateProps = !fromStateProps_ ? alwaysEmpty : fromStateProps_;     \r\n                                                                               \r\n  return BaseComponent => {                                                    \r\n    const componentFn = BaseComponent.prototype                                \r\n      ? p => <BaseComponent {...p} />                                          \r\n      : p => BaseComponent(p);                                                 \r\n                                                                               \r\n    return props => {                                                          \r\n      const dependantProps = dependsOnProps ? props : emptyObj;                \r\n                                                                               \r\n      const {state, dispatch} = useContext(context);                           \r\n      const stateProps = useMemo(() => fromStateProps(state, dependantProps), [\r\n        state,                                                                 \r\n        dependantProps,                                                        \r\n      ]);                                                                      \r\n      const actionProps = useMemo(() => {                                      \r\n        const res = {};                                                        \r\n        Object.entries(fromActionProps).forEach(([name, aCreator]) => {        \r\n          res[name] = (...args) => dispatch(aCreator(...args));                \r\n        });                                                                    \r\n        return res;                                                            \r\n      }, [dispatch]);                                                          \r\n                                                                               \r\n      useShouldUpdate([actionProps, props, stateProps]);                       \r\n                                                                               \r\n      const finalProps = mapper                                                \r\n        ? mapper(stateProps, actionProps, props)                               \r\n        : {...props, ...stateProps, ...actionProps};                           \r\n                                                                               \r\n      return componentFn(finalProps);                                          \r\n    };                                                                         \r\n  };                                                                           \r\n};                                                                             \r\n```\r\n\r\nHow do you feel about this suggestion? Too weird? 😄 \r\n\r\nThanks,\r\n\r\nJosep",
                "createdAt": "2019-02-24T22:13:30Z",
                "author": {
                  "login": "josepot",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/8620144?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14946",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "dynamic load remote address",
                "state": "CLOSED",
                "number": 14947,
                "body": "\r\n\r\n## request for feature\r\n\r\nI want to dynamic load react bundle in remote address，\r\nand I see react lazy : https://reactjs.org/docs/code-splitting.html#reactlazy.\r\nBut I think it can‘t resolve my problem.\r\n\r\nThis is my expectant pseudo code:\r\n```\r\nuser.input((moduleName) => { // user input event listener\r\n  React.lazy(() => {\r\n    const DynamicModule import(`www.cdn.xxx/${moduleName}.js`);\r\n  });\r\n});\r\n```\r\n\r\nthis there have any way to resolve my requirement。\r\n\r\n",
                "createdAt": "2019-02-25T04:04:38Z",
                "author": {
                  "login": "hangyangws",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/9067839?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14947",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Resolution: Needs More Information",
                        "color": "fffde7"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "eslint-plugin-react-hooks - does not support node 6",
                "state": "CLOSED",
                "number": 14949,
                "body": "Currently eslint-plugin-react-hooks is stated to require node >= 6. \r\nIt should require node >= 7 since `Object.entries` is used:\r\nhttps://github.com/facebook/react/blame/master/packages/eslint-plugin-react-hooks/src/ExhaustiveDeps.js#L535",
                "createdAt": "2019-02-25T10:29:33Z",
                "author": {
                  "login": "mortentangen",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/499835?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14949",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "using p5.js",
                "state": "CLOSED",
                "number": 14950,
                "body": "\r\nHI,\r\nI really like p5.js library and I wanted to include my p5 work on my react website but i'm having a hard time combining these two together. Can someone help me ?",
                "createdAt": "2019-02-25T13:54:01Z",
                "author": {
                  "login": "FilipFranek1",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/46870205?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14950",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Collapse forwardRef and other wrappers in React error stacks",
                "state": "OPEN",
                "number": 14953,
                "body": "**Feature**\r\n\r\n**What is the current behavior?**\r\n\r\nWith a UI kit that uses forwardRefs, I get error messages like this:\r\n\r\n![image](https://user-images.githubusercontent.com/12100/53372321-61ceae00-3907-11e9-9d20-190315cc7f06.png)\r\n\r\n**What is the expected behavior?**\r\n\r\nIt would look a lot better if forwardRefs were a bit less obtrusive, and if they picked up the functions displayName rather than just the name of the function they wrap.\r\n\r\nIn our UI Kit we have a pattern like:\r\n\r\n```\r\nconst View = forwardRef(function UIView(){ return <div /> })\r\nView.displayName = 'SomeDisplayName'\r\n```\r\n\r\nFor some reason it's not showing that, just showing the inner one. Further the \"bigness\" of ForwardRef() makes it hard to see visually when scanning. Perhaps something more like this would help:\r\n\r\n```\r\nWarning: Encountered two children with the same key, `confluence`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.\r\n    in div (created by ForwardRef(Gloss))\r\n    in Gloss (ForwardRef)\r\n    in Gloss (ForwardRef) (created by OnboardMain)\r\n    in div (created by Gloss (ForwardRef))\r\n    in Gloss (ForwardRef)\r\n    in Gloss (ForwardRef) (created by SliderPane)\r\n```\r\n\r\nFurther, the `created by` information is often more useful to me, but it's never aligned nicely. Could do something like:\r\n\r\n```\r\nWarning: Encountered two children with the same key, `confluence`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.\r\n      in div (created by ForwardRef(Gloss))\r\n      in Gloss (ForwardRef)\r\n    from OnboardMain:\r\n      in Gloss (ForwardRef)\r\n   from Gloss (ForwardRef):\r\n      in div\r\n      in Gloss (ForwardRef)\r\n   from SliderPane:\r\n      in Gloss (ForwardRef)\r\n```\r\n\r\nAll together, if it would pick up displayNames, the stack would be far more readable for me:\r\n\r\n\r\n```\r\nWarning: Encountered two children with the same key, `confluence`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.\r\n      in div (created by Row)\r\n      in View (forwardRef)\r\n    from OnboardMain:\r\n      in Row (forwardRef)\r\n   from Col (forwardRef):\r\n      in div\r\n      in Grid (forwardRef)\r\n   from SliderPane:\r\n      in View (forwardRef)\r\n```\r\n",
                "createdAt": "2019-02-25T22:20:17Z",
                "author": {
                  "login": "natew",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/12100?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14953",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Type: Feature Request",
                        "color": "c7def8"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "act should keep flushing passive effects until there are none left",
                "state": "OPEN",
                "number": 14954,
                "body": "Currently, `act` will flush passive effect at the end of a batch of work. But if the effects themselves schedule additional work, and that work schedules more effects, `act` doesn't flush those.\r\n\r\nWhat it should do is keep flushing effects in a loop until there's nothing left to flush.",
                "createdAt": "2019-02-25T23:43:10Z",
                "author": {
                  "login": "acdlite",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/3624098?v=4"
                },
                "assignees": {
                  "nodes": [
                    {
                      "name": "Sunil Pai",
                      "avatarUrl": "https://avatars2.githubusercontent.com/u/18808?v=4"
                    }
                  ]
                },
                "url": "https://github.com/facebook/react/issues/14954",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Component: Test Utils",
                        "color": "eb6420"
                      }
                    },
                    {
                      "node": {
                        "name": "Type: Bug",
                        "color": "b60205"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "Element.createShadowRoot is deprecated and will be removed in M73, around March 2019. Please use Element.attachShadow instead",
                "state": "CLOSED",
                "number": 14956,
                "body": "include.preload.js:1 [Deprecation] Element.createShadowRoot is deprecated and will be removed in M73, around March 2019. Please use Element.attachShadow instead. See https://www.chromestatus.com/features/4507242028072960 for more details.\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n",
                "createdAt": "2019-02-26T03:21:06Z",
                "author": {
                  "login": "huisheng123666",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/35843376?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14956",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "[ESLint] Hardcore rule allowing default hooks using only inside custom ones",
                "state": "CLOSED",
                "number": 14957,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nfeature\r\n\r\n**What is the current behavior?**\r\nThere is no rule\r\n\r\n**What is the expected behavior?**\r\nWe have some hardcore plugins like `eslint-plugin-lodash-fp`.\r\nWhy not have ESLint hardcore rule allowing default hooks using only inside custom ones?\r\n",
                "createdAt": "2019-02-26T11:20:48Z",
                "author": {
                  "login": "Voronar",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/6104636?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14957",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Type: Feature Request",
                        "color": "c7def8"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "Unable to validate proptype for an argument of a function received as props",
                "state": "CLOSED",
                "number": 14958,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\nMissing Documentation for the same\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nRequest a feature\r\n\r\n**What is the current behavior?**\r\nUnable to validate proptype for an argument to a function passed as props\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\nwe should be directly validate the propTypes for the arguments right in the component itself.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nAll versions\r\n",
                "createdAt": "2019-02-26T12:39:24Z",
                "author": {
                  "login": "VAHMEZE",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/42061501?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14958",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Add label for Eslint (or as 'eslint-plugin')",
                "state": "CLOSED",
                "number": 14961,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature 🥇 \r\n\r\n**What is the current behavior?**\r\n\r\nno existing label for eslint, but lots of discussion on it in issues\r\n\r\n",
                "createdAt": "2019-02-26T17:07:03Z",
                "author": {
                  "login": "ahtee",
                  "avatarUrl": "https://avatars2.githubusercontent.com/u/5076085?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14961",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Password input type causes memory leak",
                "state": "OPEN",
                "number": 14962,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n*Bug*\r\n\r\n**What is the current behavior?**\r\n\r\nAn `<input type=\"password\"/>` causes a memory leak.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nYou can recreate the behavior by visiting https://iericallen.github.io/test-react/ and following the steps listed.\r\n\r\nPlease view our source code at: https://github.com/iericallen/test-react/tree/source\r\n\r\n**What is the expected behavior?**\r\n\r\nUnmounted components including `<input type=\"password\" />` can be garbage collected after next re-rendering.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nOS: macOS X Mojave 10.14.2 (18C54)\r\nChrome: 72.0.3626.109\r\nReact: 16.8.3\r\nReactDOM: 16.8.3",
                "createdAt": "2019-02-26T20:39:50Z",
                "author": {
                  "login": "iericallen",
                  "avatarUrl": "https://avatars2.githubusercontent.com/u/3165745?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14962",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Type: Needs Investigation",
                        "color": "fbca04"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "Cannot run create-react-app nameofapp",
                "state": "CLOSED",
                "number": 14963,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n**What is the current behavior?**\r\ncannot run create-react-app nameofapp\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\ncreate-react-app bob\r\n\r\nCreating a new React app in C:\\wamp64\\www\\bob.\r\n\r\nInstalling packages. This might take a couple of minutes.\r\nInstalling react, react-dom, and react-scripts...\r\n\r\nnpm ERR! Unexpected end of JSON input while parsing near '....tgz\"}},\"2.3.4\":{\"nam'\r\n\r\nnpm ERR! A complete log of this run can be found in:\r\nnpm ERR!     C:\\Users\\Ivana\\AppData\\Roaming\\npm-cache\\_logs\\2019-02-26T21_21_48_727Z-debug.log\r\n\r\nAborting installation.\r\n  npm install --save --save-exact --loglevel error react react-dom react-scripts has failed.\r\n\r\nDeleting generated file... package.json\r\nDeleting bob/ from C:\\wamp64\\www\r\nDone.\r\n\r\n**What is the expected behavior?**\r\nShould create new react app\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nNode v10.15.1\r\nnpm 6.7.0\r\n",
                "createdAt": "2019-02-26T22:14:50Z",
                "author": {
                  "login": "Geeeva",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/40319191?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14963",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Cannot get the latest values of the state inside useEffect hook( first load only ).",
                "state": "OPEN",
                "number": 14965,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n_BUG_\r\n\r\n**What is the current behavior?**\r\nCannot get the latest values of the state inside our useEffect function ( only on first load ). But can log the latest values of the state upon re-render.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n```\r\nconst {\r\n\t\tiframeWindow,\r\n\t\tiframeDocument,\r\n\t\tcomponent,\r\n\t\tnewMessageCount\r\n\t} = useContext(AppContext);\r\n\r\n\t/**\r\n\t * Information variables\r\n\t */\r\n\tconst [threadList, changeThreadList] = useState([]);\r\n\tconst [contactInfo, changeContactInfo] = useState({});\r\n\tconst [twilioNumbers, changeTwilioNumbers] = useState([]);\r\n\tconst [recipientOptions, changeRecientOptions] = useState([]);\r\n\r\n\t/**\r\n\t * Loading States\r\n\t */\r\n\tconst [searchLoading, changeSearchLoading] = useState(false);\r\n\tconst [sendingMessage, changeSendingMessage] = useState(false);\r\n\tconst [gettingList, changeGettingList] = useState(true);\r\n\r\n\t/**\r\n\t * Load more page start\r\n\t */\r\n\tconst [pageStart, changePageStart] = useState(1);\r\n\tconst [loadMoreCount, changeLoadMoreCount] = useState(0);\r\n\tconst [firstLoad, changeFirstLoad] = useState(true);\r\n\r\n\t/**\r\n\t * Message body content to be sent to the backend\r\n\t */\r\n\tconst messageBody = {\r\n\t\tconversation_id: useInput(),\r\n\t\tcontact_number_id: useInput([]),\r\n\t\tmessage: useInput(),\r\n\t\ttwilio_number_id: useInput(),\r\n\t\tsending: useState(false)\r\n\t};\r\n\r\n        .....\r\n\r\n        /**\r\n          * instantiate the Pusher\r\n         */\r\n        useEffect(() => {\r\n            getNewMessageEvent();\r\n            updateMessageStatusEvent();\r\n        }, [firstLoad]);\r\n        \r\n\r\n       ....\r\n\r\n       /**\r\n\t * updates the message status\r\n\t */\r\n\tfunction updateMessageStatusEvent() {\r\n\r\n\t\teventPusher.updatewMessageStatus(({ data: { id, status } }) => {\r\n\r\n                        /**\r\n\t\t\t *\r\n\t\t\t * PROBLEM here we cant get the value of the updated threadList its always empty\r\n\t\t\t *\r\n\t\t\t *\r\n                          */\r\n\t\t\tconsole.log('local thread list', threadList);\r\n\t\t\tlet message = find(threadList, ['id', id]);\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tconsole.log(id, threadList);\r\n\t\t\t}, 100);\r\n\t\t\t// if (typeof message != 'undefined') {\r\n\t\t\t// \tmessage.status = status;\r\n\t\t\t// \tconsole.log(threadList);\r\n\t\t\t// }\r\n\t\t});\r\n\t}\r\n\r\n        ....\r\n       return (\r\n          .....\r\n       );\r\n```\r\n\r\n**What is the expected behavior?**\r\nExpecting that the latest values of the state will be accessible inside our first load useEffect. Expecting that the state Array will be a pass by reference. Assuming that it can be accessible.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nUsing **^16.8.0**. This is a hooks implementation.\r\n",
                "createdAt": "2019-02-27T02:30:41Z",
                "author": {
                  "login": "gideonairex",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/6386061?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14965",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Resolution: Needs More Information",
                        "color": "fffde7"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "input cursor jump to end when call setState in setTimeout",
                "state": "CLOSED",
                "number": 14966,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nA bug.\r\n\r\n**What is the current behavior?**\r\n\r\nCursor jump to end when call setState in setTimeout\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n```jsx\r\nimport React, { useState, useCallback } from 'react';\r\nimport { render } from 'react-dom';\r\n\r\n\r\nclass App extends React.PureComponent {\r\n  state = {\r\n    input: '',\r\n  }\r\n  \r\n  handleInput = event => {\r\n    const value = event.target.value;\r\n    \r\n    setTimeout(() => {\r\n      this.setState({\r\n        input: value,\r\n      });\r\n    }, 1);\r\n  }\r\n  \r\n  render () {\r\n    return <input value={this.state.input} onChange={this.handleInput} />\r\n  }\r\n}\r\n\r\nrender(<App />, document.getElementById('root'));\r\n```\r\n\r\n[CodeSandbox](https://codesandbox.io/s/ojw817wmpy)\r\n\r\n**What is the expected behavior?**\r\n\r\nCursor should not jump to end\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact v16.8.3\r\n",
                "createdAt": "2019-02-27T10:13:21Z",
                "author": {
                  "login": "foisonocean",
                  "avatarUrl": "https://avatars3.githubusercontent.com/u/15059605?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14966",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "memo equality check function overrides state",
                "state": "CLOSED",
                "number": 14972,
                "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBUG\r\n\r\n**What is the current behavior?**\r\nWhen a component is wrapped with `React.memo` and is provided 2nd argument - equality check function, it overrides state in the parent component\r\n\r\n**What is the expected behavior?**\r\nIt should not override the state in parent component\r\n\r\nReproduction and detailed explanation of the bug is within this codesandbox:\r\nhttps://codesandbox.io/s/4j6ownx8x0\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nCodesandbox\r\n\r\n**Note**: I spent few hours verifying that this is a genuine bug and not a due to my misunderstanding, but I apologize if it is the latter.",
                "createdAt": "2019-02-28T07:03:47Z",
                "author": {
                  "login": "minheq",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/9356633?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14972",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "hook useEffect cannot wok width HMR",
                "state": "OPEN",
                "number": 14973,
                "body": "\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nif i use webpack's HMR and hook except useState that will has an error,i have tested if use class have no this bug.\r\n![image](https://user-images.githubusercontent.com/22429673/53551053-3f40cd00-3b73-11e9-96ab-1b3e54f1bae7.png)\r\n\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n```\r\nfunction PageContainer(props) {\r\n\tconst menu = [{\r\n\t\turl: '/test', title: 'test', index: '0', icon: ''\r\n\t},{\r\n\t\turl: '/test1', title: 'test1', index: '1', icon: ''\r\n\t}];\r\n\r\n\tconst [menuIndex, setMenuIndex] = useState('0');\r\n\tconst [openKey, setOpenKey] = useState(null);\r\n\tconst goMenu = (url, index) => {\r\n\t\treturn () => {\r\n\t\t\thistory.push(url)\r\n\t\t\tsetMenuIndex(index)\r\n\t\t}\r\n\t}\r\n\r\n\tconst setRoute = (url,list) => {\r\n    list.map((item) =>{\r\n      if(url.indexOf(item.url) > -1) {\r\n\t\t\t\tsetMenuIndex(item.index)\r\n        if(item.openKey) setOpenKey(item.openKey)\r\n      }else if(item.children) {\r\n        setRoute(url,item.children)\r\n      }\r\n    })\r\n  }\r\n\r\n  useEffect(()=> {\r\n\t\tsetRoute(window.location.pathname, menu)\r\n  })\r\n\treturn (\r\n\t\t<Layout style={{minHeight: '100vh'}}>\r\n\t\t\t<Header></Header>\r\n\t\t\t\t<Layout>\r\n          <Sider>\r\n            <Menu selectedKeys = {[menuIndex]} defaultSelectedKeys={[menuIndex]} defaultOpenKeys={[openKey]}>\r\n              {\r\n                menu.map((item)=>{\r\n\t\t\t\t\t\t\t\t\treturn <Menu.Item key={item.index} onClick={goMenu(item.url,item.index)}>\r\n                    <span className='pl10'>{item.title} </span>\r\n                  </Menu.Item>    \r\n                })\r\n              }\r\n            </Menu>\r\n          </Sider>\r\n        <Content>{props.children}</Content>\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n}\r\n\r\n**\r\npackage.json\r\n\"start\": \"webpack-dev-server --hot --config webpack.dev.conf.js\"\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nusing 16.8.3\r\n",
                "createdAt": "2019-02-28T08:36:17Z",
                "author": {
                  "login": "MichelleChe",
                  "avatarUrl": "https://avatars3.githubusercontent.com/u/22429673?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14973",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Resolution: Needs More Information",
                        "color": "fffde7"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "componentDidUpdate (and componentDidMount) before the updates ref",
                "state": "OPEN",
                "number": 14975,
                "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\ncomponentDidUpdate (and componentDidMount) before the updates ref\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://codepen.io/anon/pen/eXpENK?editors=0011\r\n\r\n**What is the expected behavior?**\r\ncomponentDidUpdate  (and componentDidMount) after ref update\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nbrowser. last version",
                "createdAt": "2019-02-28T11:44:03Z",
                "author": {
                  "login": "vflash",
                  "avatarUrl": "https://avatars3.githubusercontent.com/u/1237274?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14975",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Resolution: Needs More Information",
                        "color": "fffde7"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "Varying number of hook calls",
                "state": "CLOSED",
                "number": 14976,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nFeature\r\n\r\n**What is the current behavior?**\r\nI understand React relies on call order when using hooks, but I don't understand why I'm not allowed to call an arbitrary number of (some) hooks as long as I preserve call order\r\n\r\nI'm making a tooltip component with an \"open\" prop that also awaits a \"target\" ref before rendering:\r\n\r\nWhat I tried:\r\n```\r\nexport default props => {\r\n\t// Set up lifecycle callbacks - makes perfect sense to me that this has to be called before any return statements\r\n\tuseEffect(...) \r\n\r\n\tif (!props.open) return null;\r\n\t// I can safely use \"props.target\" below this point...\r\n\tif (!props.target) return null; \r\n\r\n\tconst { x, y } = props.target.getBoundingClientRect(); \r\n\r\n\tconst style = useMemo(..., [x, y]);\r\n\r\n\treturn ...\r\n}\r\n```\r\n\r\nTo avoid an error about \"fewer/more hooks called than previous render\", I have to refactor the above into the following:\r\n```\r\nexport default props => {\r\n\tuseEffect(...)\r\n\r\n\t// Now I have to code defensively because I can't guarantee target is defined...\r\n\tconst { x, y } = props.target ? props.target.getBoundingClientRect() : {};\r\n\r\n\t// I also have to code defensively in the useMemo handler because now x and y can be undefined\r\n\tconst style = useMemo(..., [x, y]); \r\n\r\n\t// And now my return values are down here, which isn't necessarily where I want them to be if I want to \"section\" my code a certain way\r\n\tif (!props.open) return null;\r\n\tif (!props.target) return null;\r\n\r\n\treturn ...\r\n}\r\n```\r\nI understand why I need to declare \"lifecycle hooks\" like useEffect before any return statements, but I don't understand why certain hooks like useMemo and useCallback have to adhere to the same principle.\r\n",
                "createdAt": "2019-02-28T12:12:53Z",
                "author": {
                  "login": "noobG",
                  "avatarUrl": "https://avatars2.githubusercontent.com/u/9032452?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14976",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Different createContext implementation in Production and Development builds",
                "state": "CLOSED",
                "number": 14977,
                "body": "**Do you want to request a _feature_ or report a _bug_?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nDevelopment and production version of createContext are different.\r\nMinified production version is setting `_context` prop only on Provider.\r\n```\r\ncreateContext: function(a, b) {\r\n      void 0 === b && (b = null);\r\n      a = {\r\n        $$typeof: w,\r\n        _calculateChangedBits: b,\r\n        _currentValue: a,\r\n        _currentValue2: a,\r\n        _threadCount: 0,\r\n        Provider: null,\r\n        Consumer: null\r\n      };\r\n      a.Provider = {$$typeof: v, _context: a};\r\n      return (a.Consumer = a);\r\n    },\r\n```\r\nWhile in development version, `_context` property is attached to both, Provider and Consumer.\r\n```\r\n  context.Provider = {\r\n    $$typeof: REACT_PROVIDER_TYPE,\r\n    _context: context\r\n  };\r\n\r\n  var hasWarnedAboutUsingNestedContextConsumers = false;\r\n  var hasWarnedAboutUsingConsumerProvider = false;\r\n\r\n  {\r\n    // A separate object, but proxies back to the original context object for\r\n    // backwards compatibility. It has a different $$typeof, so we can properly\r\n    // warn for the incorrect usage of Context as a Consumer.\r\n    var Consumer = {\r\n      $$typeof: REACT_CONTEXT_TYPE,\r\n      _context: context,\r\n      _calculateChangedBits: context._calculateChangedBits\r\n    };\r\n```\r\n**Codesandbox:**\r\n\r\nProduction version:\r\nhttps://codesandbox.io/s/zn09n09lo3\r\n\r\nDevelopment:\r\nhttps://codesandbox.io/s/487ym7xjk9\r\n\r\n**What is the expected behavior?**\r\nDevelopment version should match Production version. In terms of, you should be able to access `_context` from both, Consumer and Provider.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.8.2, 16.8.3 .\r\nFrom source code, i can see, that the changes to development build were added in 16.6.\r\n",
                "createdAt": "2019-02-28T15:30:40Z",
                "author": {
                  "login": "VladimirMilenko",
                  "avatarUrl": "https://avatars2.githubusercontent.com/u/18203255?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14977",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Extra attribute \"class\" warning on hydrate",
                "state": "OPEN",
                "number": 14978,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug, most likely. Or at least explanation why I get a warning and help fixing it.\r\n\r\n**What is the current behavior?**\r\nI've got a really simple app that's SSR'd:\r\n```jsx\r\nexport const App = () => (\r\n    <div className={styles.container}>Hello world!</div>\r\n);\r\n```\r\nimmediately when rendering it, I get a warning in console:\r\n```\r\nWarning: Extra attributes from the server: class\r\n```\r\nthat really doesn't make sense to me, because once you renderToString(), the className properties are mapped to normal \"class\" attribute - so during hydration, I expected React to ignore or map back to className, if necessary. Below is more or less what comes back rendered from server:\r\n```html\r\n<!DOCTYPE html>\r\n<html>\r\n    <head>\r\n        <meta charset=\"utf-8\" />\r\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/style.css\" /><script type=\"text/javascript\" src=\"/static/app.js\" defer></script></head>\r\n    <body>\r\n        <div id=\"app\"><div class=\"container_1G7pW\" data-reactroot=\"\">Hello world!</div></div>\r\n    </body>\r\n</html>\r\n```\r\nI noticed \"data-reactroot\" is ignored (makes sense), shouldn't the class be removed from the extraAttributeNames at some point as well?\r\n```js\r\nswitch (name) {\r\n        // Built-in SSR attribute is whitelisted\r\n        case 'data-reactroot':\r\n          break;\r\n        // Controlled attributes are not validated\r\n        // TODO: Only ignore them on controlled tags.\r\n        case 'value':\r\n          break;\r\n        case 'checked':\r\n          break;\r\n        case 'selected':\r\n          break;\r\n        default:\r\n          // Intentionally use the original name.\r\n          // See discussion in https://github.com/facebook/react/pull/10676.\r\n          extraAttributeNames.add(attributes[_i].name);\r\n      }\r\n```\r\n\r\n**What is the expected behavior?**\r\nNo warning for \"class\" attribute.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact/ReactDOM v16.8.2\r\n",
                "createdAt": "2019-02-28T16:47:19Z",
                "author": {
                  "login": "grzegorzjudas",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/3832059?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14978",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Resolution: Needs More Information",
                        "color": "fffde7"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "React custom hook \"Should have a queue. This is likely a bug in React\" error message.",
                "state": "OPEN",
                "number": 14979,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nGetting this error message: **Should have a queue. This is likely a bug in React. Please file an issue.**\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React.**\r\n\r\nI tried to implement a simple data cache in a custom hook:\r\n```  javascript\r\nimport { useState, useEffect } from 'react'\r\n\r\nconst get = url => {\r\n  return fetch(url)\r\n    .then(res => res.text())\r\n    .then(data => JSON.parse(data))\r\n}\r\n\r\nconst cache = new Map()\r\n\r\nconst useData = dataURL => {\r\n  const [data, setData] = useState(null)\r\n  if (cache.has(dataURL)) {\r\n    return cache.get(dataURL)\r\n  }\r\n\r\n  useEffect(() => {\r\n    get(dataURL).then(data => {\r\n      cache.set(dataURL, data)\r\n      setData(data)\r\n    })\r\n  }, [dataURL])\r\n\r\n  return data\r\n}\r\n\r\nexport default useData\r\n```\r\nThe entire project code is here: https://github.com/justin0022/dashboard/tree/cache\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nUsing React 16.8.2, Chrome, and MacOS. \r\n",
                "createdAt": "2019-02-28T17:06:48Z",
                "author": {
                  "login": "justin0022",
                  "avatarUrl": "https://avatars2.githubusercontent.com/u/8836578?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14979",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Resolution: Needs More Information",
                        "color": "fffde7"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "Misleading error description when using wrong useRef",
                "state": "OPEN",
                "number": 14980,
                "body": "There's a misleading error when using wrong the `useRef` hook.\r\n\r\n```\r\nfunction MyComponent() {\r\n    let nameRef = useRef();\r\n\r\n   return (\r\n      <div>\r\n        <input ref=\"nameRef\" type=\"text\" />       \r\n    </div>\r\n  );\r\n}\r\n```\r\n\r\nSee the example here https://codesandbox.io/s/yvl21qm62j\r\n\r\nThe code above leads to this error `Function components cannot have refs. Did you mean to use React.forwardRef()?`. I'm moving some class components to Hooks, and stumbled upon this, and it took me a while due to the wrong error message.",
                "createdAt": "2019-02-28T17:35:45Z",
                "author": {
                  "login": "madroneropaulo",
                  "avatarUrl": "https://avatars2.githubusercontent.com/u/4364107?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14980",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Resolution: Needs More Information",
                        "color": "fffde7"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "Throwing Error from hook not caught in error boundary ",
                "state": "CLOSED",
                "number": 14981,
                "body": "This may be more of a question than an issue but is it possible to throw errors in a hook and have them caught in an error boundary? Or will this not work? \r\n",
                "createdAt": "2019-02-28T18:55:18Z",
                "author": {
                  "login": "joepuzzo",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/9516899?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14981",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Resolution: Needs More Information",
                        "color": "fffde7"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "[reconciler] re-instanciating object in commitUpdate",
                "state": "CLOSED",
                "number": 14983,
                "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature, this is for https://github.com/drcmda/react-three-fiber\r\n\r\n**What is the current behavior?**\r\n\r\ncommitUpdate is supposed to simply update the instance, it seems that it cannot \"exchange\" the instance. \r\n\r\n**What is the expected behavior?**\r\n\r\nI need to re-instanciate the instance, just writing props to it is not enough in my case. Basically i am trying this:\r\n\r\n```js\r\n  commitUpdate(instance, updatePayload, type, oldProps, newProps, fiber) {\r\n    if (instance.isObject3D) {\r\n      applyProps(instance, newProps, oldProps)\r\n    } else {\r\n      // This is a data object, let's extract critical information about it\r\n      const parent = instance.__parent\r\n      const { args: argsNew = [], ...restNew } = newProps\r\n      const { args: argsOld = [], ...restOld } = oldProps\r\n      // If it has new props or arguments, then it needs to be re-instanciated\r\n      if (argsNew.some((value, index) => value !== argsOld[index])) {\r\n        // First it gets removed from its parent\r\n        removeChild(parent, instance)\r\n        // Next we create a new instance and append it again\r\n        const newInstance = createInstance(instance.type, newProps)\r\n        appendChild(parent, newInstance)\r\n        // Switch fiber node (???)\r\n        fiber.stateNode = newInstance // <---- this doesn't work\r\n```\r\n\r\nThis is a THREE data object which i am trying to map. Sometimes these objects cannot be mutated, THREE expects them to be re-created. One example of this is: https://threejs.org/docs/index.html#api/en/geometries/PlaneGeometry \r\n\r\n> Any modification after instantiation does not change the geometry.\r\n\r\nI am creating the object in JSX like so:\r\n\r\n```jsx\r\n<planeGeometry name=\"geometry\" args={[width, height]} />\r\n```\r\n\r\nWhen the args change the instance has to be recreated, no other way around unfortunately.\r\n\r\nIt would be amazing if commitUpdate would be allowed to return an instance. And if it does the reconciler writes it into the fiber node. I am trying fiber.stateNode here, but it doesn't help. Next time commitUpdate is called it passes on the old instance again, which doesn't have a parent any longer.\r\n\r\nI don't really understand how these nodes work but the stacktrace says  \r\n\r\n```jsx\r\ncommitWork(_current2, nextEffect)\r\n```\r\n\r\nwhere nextEffect ends up being \"fiber\" in the commitUpdate. \"_current2\" seems to be the one that still clings to the old stateNode.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8.3",
                "createdAt": "2019-02-28T21:27:18Z",
                "author": {
                  "login": "drcmda",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/2223602?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14983",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "package have wrong version",
                "state": "CLOSED",
                "number": 14985,
                "body": "package.json have wrong version.\r\nThe current release is 16.8.3, but the package.json version is 16.6.1.",
                "createdAt": "2019-03-01T03:49:36Z",
                "author": {
                  "login": "qingzi-king",
                  "avatarUrl": "https://avatars3.githubusercontent.com/u/13265583?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14985",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "If React Hooks surport useState(await ...) to getData,we can used in ssr be better",
                "state": "CLOSED",
                "number": 14986,
                "body": " I am new gay。\r\nwe konw  `Hooks can only be called inside the body of a function component`,but  if hooks can suppert it  we can easy get Default data in ssr,becauces  effect not be call by ssr\r\n\r\n\r\nExample\r\n```\r\nlet APP =  async() => {\r\n    let initState = async () => {\r\n        let response = await fetch('http://localhost:9991/mock/count.json');\r\n        let listData = await response.json();\r\n        return listData.count;\r\n    };\r\n    const [count, setCount] = useState(await initState());\r\n    return (\r\n        <div>\r\n                <span>Count:{count}</span>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n```",
                "createdAt": "2019-03-01T09:07:10Z",
                "author": {
                  "login": "dazjean",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/10277671?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14986",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Subscription to event listener in useEffect can miss an update",
                "state": "OPEN",
                "number": 14988,
                "body": "**Steps to reproduce:**\r\nRun the following app that uses an event-emitting counter and maintains a subscription to render updates:\r\n```js\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nfunction createCounter() {\r\n  let value = 0;\r\n  const listeners = new Set();\r\n\r\n  return {\r\n    get() { return value; },\r\n    on(listener) { listeners.add(listener); },\r\n    off(listener) { listeners.delete(listener); },\r\n    increment() { value++; listeners.forEach(listener => listener()); }\r\n  };\r\n}\r\n\r\nconst Counter = createCounter();\r\n\r\nfunction CounterWithHook() {\r\n  const [counter, setCounter] = React.useState(Counter.get);\r\n\r\n  React.useEffect(() => {\r\n    const onChange = () => setCounter(Counter.get());\r\n    Counter.on(onChange);\r\n    return () => Counter.off(onChange);\r\n  }, []);\r\n\r\n  return <div>counter: {counter}</div>;\r\n}\r\n\r\nReactDOM.render(\r\n  <>\r\n    <CounterWithHook />\r\n    <button onClick={Counter.increment}>increment</button>\r\n  </>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nrequestAnimationFrame(Counter.increment);\r\n```\r\n\r\nThe `requestAnimationFrame` at the end will increment the counter in a slightly insidious way.\r\n\r\n**Expected result:**\r\nAfter loading the app, I see `counter: 1` and clicking the `increment` button updates the UI to `counter: 2`.\r\n\r\n**Actual result:**\r\nAfter loading the app, I see `counter: 0` and clicking the button updates the UI to `counter: 2`.\r\n\r\nThe timing of the `Counter.increment` is such that it happens after the initial render, but before the listener is attached.\r\n\r\nImplementing the same thing with lifecycle methods behaves differently: `componentDidMount` runs soon enough to catch the update.\r\n\r\nIs that expected and a part of the `useEffect` contract? Is there a better way to maintain subscriptions? Note that the missed update came from an independent source, completely outside React.",
                "createdAt": "2019-03-01T10:01:51Z",
                "author": {
                  "login": "jsnajdr",
                  "avatarUrl": "https://avatars3.githubusercontent.com/u/664258?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14988",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Component: Concurrent Mode",
                        "color": "ffccd3"
                      }
                    },
                    {
                      "node": {
                        "name": "Component: Hooks",
                        "color": "c2f27b"
                      }
                    },
                    {
                      "node": {
                        "name": "Type: Discussion",
                        "color": "fef2c0"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "useState not bailing out when state does not change",
                "state": "OPEN",
                "number": 14994,
                "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nAs demonstrated in [this](https://codesandbox.io/s/1r539z96r3) codesandbox, trying to implement a pattern similar to the one discussed in https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops results in an infinite loop, even if the value of the state does not change. This seems like a bug, because, as documented [here](https://reactjs.org/docs/hooks-reference.html#bailing-out-of-a-state-update), `If you update a State Hook to the same value as the current state, React will bail out without rendering the children or firing effects.`\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\nSince the state does not change, bail out on the re-render.\r\nThis can be worked around by adding a check before `setState` to check if the state has changed before calling the function.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n",
                "createdAt": "2019-03-01T19:05:10Z",
                "author": {
                  "login": "perrin4869",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/5774716?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14994",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Type: Discussion",
                        "color": "fef2c0"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "Unexpected \"Hooks can only be called inside the body of a function component.\"",
                "state": "CLOSED",
                "number": 14995,
                "body": "I already know why this problem occurs.\r\n\r\nBut I'm needing for one solution to my case.\r\n\r\nI have three packages: a `Lib A`, and the `Project A` and `Project B`.\r\n\r\nThe projects use `Lib A`\r\n\r\nIf I generate a `Lib A` bundle and run the `Project A` or the `Project B` with this bundle, I receive this message: `Unexpected \"Hooks can only be called inside the body of a function component.\"`\r\n\r\nActually I can solve this with this command:\r\n\r\n`npm link ../project-a/node_modules/react` (In `Lib A` package)\r\n\r\nNow, when I run the `Project A`, the error message isn't appear.\r\n\r\nBut the problem isn't solved in the `Project B`.\r\n\r\nTo solve this in the `Project B` i need execute the same steps, and... It is a sucks :'(\r\n\r\nIs it possible solve this?\r\n\r\nI know that the error is because the two instances of React, but... How can I solve the problem?",
                "createdAt": "2019-03-01T20:36:37Z",
                "author": {
                  "login": "FabianoLothor",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/2192995?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14995",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Type: Discussion",
                        "color": "fef2c0"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "Keys for hooks",
                "state": "CLOSED",
                "number": 14998,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\nHooks must always be called in the same order.\r\n\r\n**What is the desired behavior?**\r\n\r\nIt would be useful to be able to use hooks in loops and conditions, as this would allow hooks to be lifted out of child components that are rendered by loops and conditions.\r\n\r\nFor example, consider this hook that stores the state for a contact form:\r\n\r\n```js\r\nfunction useContactModel({ defaultValue }) {\r\n  let [name, setName] = useState(defaultValue.name || '')\r\n  let [email, setEmail] = useState(defaultValue.email || '')\r\n\r\n  return {\r\n    error: name === '' ? 'Please enter a name' : undefined,\r\n    name: {\r\n      value: name,\r\n      onChange: e => setName(e.target.value),\r\n    },\r\n    email: {\r\n      value: email,\r\n      onChange: e => setEmail(e.target.value),\r\n    },\r\n  }\r\n}\r\n```\r\n\r\nThis hook works fine when it is used inside a form component -- let's call it `<ContactForm>`. But say that your requirements change and you now need to be able to embed an arbitrary number of contacts in the form, and thus want to lift the state up into a `<ContactList>` component so that you can access all the contact state at once (see [demo](https://frontarm.com/demoboard/?id=e1a331f5-3468-488c-ab53-9eb455730af5)) -- there's no way to reuse the `useContactModel()` hook within `<ContactList>`, because it would need to be called within a loop.\r\n\r\n```jsx\r\nfunction ContactList() {\r\n  let contactIds = ['a', 'b', 'c']\r\n  let contactModels = contactIds.map(useContactModel)\r\n\r\n  return contactIds.map((id, i) =>\r\n        <Contact\r\n          key={id}\r\n          model={contactModels[i]}\r\n        />\r\n  )\r\n}\r\n```\r\n\r\nThe contact form example feels a little contrived, but this scenario of wanting to store some \"model\" an arbitrary number of times comes up relatively often when building forms. \r\n\r\n**Proposed solution**\r\n\r\nI've taken a cursory look at the source but I really don't understand it enough to know if this could even work, but with that said...\r\n\r\nWould it be possible to somehow assign keys to hooks, just as you can with components, and use that extra information to reconcile hooks called in conditionals/loops? For example, a hypothetical `withKey` function could accept a key and a callback, and allow for hooks to be called within the callback as if they were being called in a child component -- but returning the result of the callback instead of rendering elements.\r\n\r\n```js\r\nlet contactIds = ['a', 'b', 'c']\r\nlet contactModels = contactIds.map(id => \r\n  withKey(id, () => useContactModel())\r\n)\r\n```\r\n\r\nNot sure if this is possible or even particularly desirable given the potential performance problems of the enormous hooks it would enable. It'd certainly make it easier to lift state up the tree, though.",
                "createdAt": "2019-03-02T15:17:13Z",
                "author": {
                  "login": "jamesknelson",
                  "avatarUrl": "https://avatars3.githubusercontent.com/u/161707?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14998",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Type: Discussion",
                        "color": "fef2c0"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "Suspended component's state gets reinitialized after Promise resolves",
                "state": "CLOSED",
                "number": 14999,
                "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nA stateful functional component gets suspended by throwing a Promise. When the Promise resolves, the component gets re-rendered as expected, but its state gets reinitialized.\r\n\r\n**CodeSandbox**\r\n\r\nhttps://codesandbox.io/s/5058xyw5p4 (Open the console)\r\n\r\n**What is the expected behavior?**\r\n\r\nState is preserved from one render to another, regardless of what happens after calling the hook.\r\n\r\nA simple workaround is to hoist state up to a parent component.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact/ReactDOM 16.8.3\r\nTested on Chrome and Firefox on macOS\r\nHaven't tried with any previous version\r\n",
                "createdAt": "2019-03-02T20:24:39Z",
                "author": {
                  "login": "alexkirsz",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/1621758?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/14999",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Calling `act()` implicitly",
                "state": "CLOSED",
                "number": 15000,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\na feature\r\n\r\n**What is the current behavior?**\r\n\r\nAny code causing state change should be wrapped into `act()` during tests.\r\n\r\n**What is the expected behavior?**\r\n\r\nOffering a module which when imported will alter `React.useState` and `React.useReducer` to make them call `act` automatically on every update. Something like the following would work I guess:\r\n\r\n```js\r\nconst React = require('react')\r\nconst {act} = require('react-dom/test-utils')\r\n\r\nconst wrap = fn => (...args) => {\r\n  let result\r\n  act(() => {\r\n    result = fn(...args)\r\n  })\r\n  return result\r\n}\r\n\r\nconst useState = React.useState\r\nconst useReducer = React.useReducer\r\n\r\nReact.useState = (...params) => {\r\n  const result = useState(...params)\r\n  result[1] = wrap(result[1])\r\n  return result\r\n}\r\n\r\nReact.useReducer = (...params) => {\r\n  const result = useReducer(...params)\r\n  result[1] = wrap(result[1])\r\n  return result\r\n}\r\n```\r\n\r\nI made a [small library](https://github.com/webNeat/react-act) offering this after a [story of issues with testing hooks](https://github.com/webNeat/react-act/blob/master/story.md) and it would be awesome if this was part of React DOM itself.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8+ and React DOM 16.8+\r\n",
                "createdAt": "2019-03-03T04:15:07Z",
                "author": {
                  "login": "webNeat",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/2133333?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15000",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Requires Babel \"^7.0.0-0\", but was loaded with \"6.26.3\".",
                "state": "CLOSED",
                "number": 15001,
                "body": "Requires Babel \"^7.0.0-0\", but was loaded with \"6.26.3\". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention \"@babel/core\" or \"babel-core\" to see what is calling Babel.\r\n\r\nThis error has been reported, tried many methods, but still unable to solve\r\n",
                "createdAt": "2019-03-03T08:01:44Z",
                "author": {
                  "login": "jerry-f",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/30689170?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15001",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Resolution: Support Redirect",
                        "color": "106099"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "Manipulating child by parent's components",
                "state": "CLOSED",
                "number": 15004,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nNo,\r\n\r\n**What is the current behavior?**\r\nThe component rerenders 3 more times than needed \r\n\r\n**What is the expected behavior?**\r\nThe component to rerender once \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.8\r\n\r\n\r\n```\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Lower } from \"./lower\";\r\n\r\nimport \"./styles.css\";\r\n\r\nfunction App() {\r\n  const [state, setState] = React.useState(\"nochange\");\r\n  const change = () => {\r\n    console.log(\"runs\");\r\n    setState(\"change\");\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      <Lower mode={state} />\r\n      <p />\r\n      <button onClick={() => change()}>click to change</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n```\r\n\r\n\r\n```\r\nimport React from \"react\";\r\n\r\nexport const Lower = props => {\r\n  const [state, setState] = React.useState(1);\r\n  console.log(props.mode);\r\n  React.useEffect(() => {\r\n    props.mode === \"change\" && setState(2);\r\n  });\r\n  return state;\r\n};\r\n\r\n```\r\n\r\n\r\nMy repo is [https://codesandbox.io/s/kkkl61mrzv](url) and I am trying to send a prop to my child via manipulating the state with the new hooks. the component does work however in my console.log I can see that the component rerenders quite a few times. please help me find a proper way to have this done with rerendering once.\r\n",
                "createdAt": "2019-03-03T19:37:30Z",
                "author": {
                  "login": "Hypothesis-github",
                  "avatarUrl": "https://avatars3.githubusercontent.com/u/20628299?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15004",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "useEffect memory leak when setting state in fetch promise",
                "state": "OPEN",
                "number": 15006,
                "body": "**Do you want to request a *feature* or report a *bug*?**\r\nReporting a possible bug\r\n\r\n**What is the current behavior?**\r\nMy app renders fine with no errors but I can't seem to figure out why I keep getting this warning:\r\n\r\nindex.js:1446 Warning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.\r\n    in ArtistProfile (at App.js:51)\r\n    in component (created by Route)\r\n\r\napi-calls.js (Here's a link):\r\nhttps://github.com/ryansaam/litphum/blob/master/src/api-calls.js\r\n\r\nApp.js\r\n```javascript\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      user: {},\r\n      spotifyAPI: {}\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    if (user_token) {\r\n      sessionStorage.setItem('access_token', user_token)\r\n      this.setState({\r\n        spotifyAPI: new spotifyAPI( user_token )\r\n      })\r\n    } else if (sessionStorage.getItem('access_token')) {\r\n      this.setState({\r\n        spotifyAPI: new spotifyAPI( sessionStorage.getItem('access_token') )\r\n      })\r\n    }\r\n  }\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.spotifyAPI !== prevState.spotifyAPI)\r\n      this.state.spotifyAPI.getUserProfile()\r\n      .then(data => this.setState({user: data}))\r\n  }\r\n  \r\n  render() {\r\n    const { user, spotifyAPI } = this.state\r\n    const token = sessionStorage.getItem('access_token')\r\n    return (\r\n      <Router>\r\n        <div className=\"App\">\r\n            { (spotifyAPI.user_token && user)\r\n            ? (<div className=\"logged-in\">\r\n                <div style={{width: \"250px\", height: \"100%\", position: \"relative\", float: \"left\"}} >\r\n                  <Nav image={user.images ? user.images[0].url : null} user={user} />\r\n                </div>\r\n                <main id=\"main\">\r\n                  <Route path={`/${user.type}/${user.id}`} exact component={() => <Home spotifyAPI={spotifyAPI} />} />\r\n                  <Route path=\"/artist/\" component={() => <ArtistProfile spotifyAPI={spotifyAPI} />} />\r\n                </main>\r\n              </div>) \r\n            : <div onClick={() => window.location = \"http://localhost:8888/login\"} >log in</div>\r\n            }\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n```\r\n\r\nArtistProfile.js\r\n```javascript\r\nconst  ArtistProfile = props => {\r\n  const [artistData, setArtistData] = useState(null)\r\n  const { getArtist, getArtistAlbums, getArtistTopTracks } = props.spotifyAPI\r\n\r\n  useEffect(() => {\r\n    const id = window.location.pathname.split(\"/\").pop()\r\n    const ac = new AbortController()\r\n    console.log(id)\r\n    Promise.all([\r\n      getArtist(id, ac),\r\n      getArtistAlbums(id, [\"album\"],\"US\", 10, 0, ac),\r\n      getArtistTopTracks(id, \"US\", ac)\r\n    ])\r\n    .then(response => {\r\n      setArtistData({\r\n        artist: response[0],\r\n        artistAlbums: response[1],\r\n        artistTopTracks: response[2]\r\n      })\r\n    })\r\n    .catch(ex => console.error(ex))\r\n    return () => ac.abort()\r\n  }, [])\r\n  console.log(artistData)\r\n  return (\r\n    <div>\r\n      <ArtistProfileContainer>\r\n        <AlbumContainer>\r\n          {artistData ? artistData.artistAlbums.items.map(album => {\r\n            return (\r\n              <AlbumTag\r\n                image={album.images[0].url}\r\n                name={album.name}\r\n                artists={album.artists}\r\n                key={album.id}\r\n              />\r\n            )\r\n          })\r\n          : null}\r\n        </AlbumContainer>\r\n      </ArtistProfileContainer>\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nIf you can see in ArtistProfile.js I am using a clean up function that aborts when the component does unmount. The fetch would be aborted and state shouldn't update but for some reason I am still getting this memory leak warning.\r\n\r\nWhat I am expecting is for the warning to no longer throw because am using a clean up function that aborts the fetch.\r\n\r\nLink to repo: https://github.com/ryansaam/litphum\r\n\r\n- Files mentioned\r\n    App.js: https://github.com/ryansaam/litphum/blob/master/src/App.js\r\n    ArtistProfile.js: https://github.com/ryansaam/litphum/blob/master/src/components/ArtistProfile.js\r\n    api-calls.js: https://github.com/ryansaam/litphum/blob/master/src/api-calls.js\r\n\r\nMy stackoverflow question: https://stackoverflow.com/questions/54954385/react-useeffect-causing-cant-perform-a-react-state-update-on-an-unmounted-comp/54964237#54964237\r\n\r\n\r\n**Which versions of React, and which browser**\r\nReact 16.8.2\r\nLatest version of Chrome\r\n",
                "createdAt": "2019-03-03T23:23:36Z",
                "author": {
                  "login": "ryansaam",
                  "avatarUrl": "https://avatars3.githubusercontent.com/u/38289731?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15006",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Resolution: Needs More Information",
                        "color": "fffde7"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "Firefox addon + injection of React UI + React events + some specific websites = weird issue",
                "state": "CLOSED",
                "number": 15007,
                "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nI'm developing an extension for Firefox with React UI being injected into a website's content and I face a weird issue with events handling in React. I made a minimal project which can be used to reproduce the problem.\r\n\r\nRequirements:\r\n1. Use Firefox\r\n2. The code must be executed in an extension's sandbox\r\n3. Reproducable only on several websites (one example is below)\r\n\r\nThe steps:\r\n1. Clone the repository https://github.com/karataev/firefox-addon-react-events-issue\r\n2. Open Firefox and type about:debugging in url\r\n3. Click \"Load Temporary Add-on\"\r\n4. Open manifest.json in the src folder\r\n5. Navigate to the website https://www.ezibuy.com/shop/au/\r\n6. Open devtools, console\r\n7. Click with intervals on the CLICK ME window in the top left corner\r\n8. Notice that after some time \"Click from React\" stops logging, but \"Click from addEventListener\" logs all the time.\r\n\r\nHere's the screenshot.\r\n![firefox-react](https://user-images.githubusercontent.com/12277086/53738427-bf439b80-3ec1-11e9-931b-462f8facc999.jpg)\r\n\r\nOn first clicks both \"Click from React\" and \"Click from addEventListener\" are being logged. After some time there are only \"Click from addEventListener\" left.\r\nI guess it happens because of some website's code being broken or something. But the extension's code is executed in a separate sandbox and it shouldn't affect React events behavior, right? Why React events handlers stops executing, but native events work as expected?\r\n\r\nOne last note: this bug is reproducable in the extension only. The repo contains direct-injection.js file with almost the same code which can be executed right in the devtools console. And the bug is gone.\r\n\r\nI've spent half a day on this issue and I'm frustrated. Please, halp 😫\r\n\r\n**What is the expected behavior?**\r\n\"Click from React\" should always be logged.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nWindows 10, Firefox 65. React 16.",
                "createdAt": "2019-03-04T14:19:57Z",
                "author": {
                  "login": "karataev",
                  "avatarUrl": "https://avatars2.githubusercontent.com/u/12277086?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15007",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Invariant Violation: Minified React error #307",
                "state": "CLOSED",
                "number": 15010,
                "body": " I am getting below error when try host app with production build, I have used new React Hooks.\r\n\r\nInvariant Violation: Minified React error #307; visit https://reactjs.org/docs/error-decoder.html?invariant=307 for the full message or use the non-minified dev environment for full errors and additional helpful warnings. \r\n\r\n\r\n",
                "createdAt": "2019-03-04T21:12:34Z",
                "author": {
                  "login": "Damdias",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/16229310?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15010",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "exhaustive-deps support for dynamic array",
                "state": "CLOSED",
                "number": 15011,
                "body": "Maybe it's antipattern and maybe it isn't. Note how I leverage deps for createdAt subselect.\r\n\r\n```ts\r\nconst TaskLists: FunctionComponent = () => {\r\n  const taskLists = useAppState(state => state.taskLists);\r\n  const sortedTaskLists = useMemo(() => {\r\n    return Object.values(taskLists).sort((a, b) => a.createdAt - b.createdAt);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, Object.values(taskLists).map(item => item.createdAt));\r\n\r\n  const children = useMemo(() => {\r\n    return (\r\n      <>\r\n        {sortedTaskLists.map(taskList => (\r\n          <TaskListLink id={taskList.id} key={taskList.id} />\r\n        ))}\r\n      </>\r\n    );\r\n  }, [sortedTaskLists]);\r\n\r\n  return children;\r\n};\r\n```",
                "createdAt": "2019-03-04T23:37:21Z",
                "author": {
                  "login": "steida",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/66249?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15011",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Type: Question",
                        "color": "cc317c"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "`data-reactroot=\"\"` lost in server render if element inside `<Context.Provider>`",
                "state": "OPEN",
                "number": 15012,
                "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug.\r\n\r\n**What is the current behavior?**\r\n\r\nCalling `.renderToString()` on `<React.Fragment><div>Hello!</div></React.Fragment>` produces `<div data-reactroot=\"\">Hello!</div>`.\r\n\r\nHowever, many other combinations of DOM root element within \"invisible\" React elements are rendered without `data-reactroot=\"\"`.\r\n\r\ne.g. all of the following produce `<div>Hello!</div>` (without `data-reactroot=\"\"`):\r\n\r\n```\r\n<React.Fragment><React.Fragment><div>Hello!</div></React.Fragment></React.Fragment>\r\n\r\n<Context.Provider><div>Hello!</div></Context.Provider>\r\n\r\n<Context.Consumer>{() => <div>Hello!</div>}</Context.Consumer>\r\n\r\n<React.StrictMode><div>Hello!</div></React.StrictMode>\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nSee above.\r\n\r\n**What is the expected behavior?**\r\n\r\nI assume that any of the above examples should produce markup including `data-reactroot=\"\"` on the `div` element.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nIssue present in all versions >= 16.7.0, possibly earlier versions too.\r\n\r\nThis is a minor issue - I guess would only affect where the markup is rehydrated on client side using `.render()` rather than `.hydrate()` - usage which is discouraged. However, using `.render()` to rehydrate is still officially supported.\r\n\r\nI can implement a fix and make a PR. But can anyone confirm that the expected behavior is what I think it is, and that this is indeed a bug?",
                "createdAt": "2019-03-04T23:46:54Z",
                "author": {
                  "login": "overlookmotel",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/557937?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15012",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Component: Server Rendering",
                        "color": "d4c5f9"
                      }
                    },
                    {
                      "node": {
                        "name": "Type: Bug",
                        "color": "b60205"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "DOM tree normalization causes React to enter an irrecoverable error state",
                "state": "CLOSED",
                "number": 15014,
                "body": "Reproduction:\r\n1) Open any React site that has a variable adjacent to other text\r\n2) Type document.body.normalize() into javascript console\r\n3) React enters an irrecoverable error state\r\n\r\nThis was previously raised by @sebmarkbage in issue #9836.\r\n\r\nThe deciding factor of whether React should support [Node.normalize](https://developer.mozilla.org/en-US/docs/Web/API/Node/normalize):\r\n`The resolution is that we'll ship a version to see how badly this breaks and under which conditions to get more data.`\r\n\r\nNow that React 16 has long been shipped, there is an overwhelming amount of issues that are related to React's inability to function when the DOM is in a normalized state. My suspicion is that very few javascript engineers (and even fewer React developers) are familiar with DOM tree normalization, which results in many related issues being opened that are never attributed back to the decision whether React should work when the DOM tree is normalized.\r\n\r\nAt one point, an issue was submitted addressing the fact that React's own website breaks in Chrome: https://github.com/facebook/react/issues/12460 which is an issue that also links back to #11538.\r\n\r\n#11538 is an issue getting a lot of attention (based on the number of people who send me links to it, including engineering managers from Fortune 500 companies in connection with services we provide)\r\n\r\nThat ticket was closed with the final comment from @gaearon saying `Since there's nothing else that I can see actionable here, I'm closing this.`. \r\n@gaearon's final take on issue #9836 that originally addressed whether normalization is important to support was `¯\\(ツ)/¯`\r\n\r\nThe decision was clearly made haphazardly (and without the data we have now, that haphazard decision was likely appropriate back then.) But looking back at the issues that stemmed from that decision, I think it appropriate to reconsider this.\r\n\r\nIn issue #11538 @gaearon correctly raised the point that the problem might be related to issue #9836 (2nd comment down) that debated whether normalization should be supported.\r\n\r\nPR https://github.com/facebook/react/pull/9853 was opened in 2017 by @sebmarkbage to remove tests relating to DOM normalization. The description of that PR: `According to #9836 we're intentionally choosing to not support this until we have better proof of this being a big need. E.g. to protect against extensions. In a way that it's not better to push extensions to be fixed.`\r\n\r\nissue https://github.com/facebook/react/issues/11538  was worthy enough to warrant the attention of Chromium developers, with React maintainers requesting that chromium *change the Chrome browser to accommodate React limitations* https://bugs.chromium.org/p/chromium/issues/detail?id=872770\r\n\r\nThat Chromium ticket may appear as though DOM normalization isn't related, but if you consider what would need to happen for that ticket to be resolved, DOM normalization becomes very relevant, if not necessary. See [Comment 9](https://bugs.chromium.org/p/chromium/issues/detail?id=872770#c9) and more directly relevant, [Comment 12](https://bugs.chromium.org/p/chromium/issues/detail?id=872770#c11).\r\n\r\nI could go on, but instead I'll include a list of tickets that (in 10 minutes time) I could find to be attributed to React's inability to function when the DOM is in a normalized state. (I fully assume this issue won't change anyone's mind, but at the very least, changelogs and documentation should clearly state this as a limitation to be aware of before deciding to use React, and before deciding whether to upgrade to React 16),\r\n\r\nRelated issues:\r\nhttps://github.com/reactjs/reactjs.org/pull/1148 - A pull request to the reactjs.org website that attempts to solve the problem by *overwriting methods on the Node prototype, which is horribly inadvisable* (according to a simple google search, not my opinion)\r\nAnother one: https://github.com/WoWAnalyzer/WoWAnalyzer/issues/948\r\nAnother https://github.com/facebook/react/issues/11774\r\nAnother: https://github.com/facebook/react/issues/13278\r\nAnother: https://github.com/facebook/react/pull/13341\r\nAnother: https://github.com/facebook/react/pull/13347\r\nAnother: https://github.com/reduxjs/react-redux/issues/982\r\nAnother; https://github.com/facebook/draft-js/issues/1320\r\nhttps://github.com/draft-js-plugins/draft-js-plugins/issues/1124\r\nhttps://github.com/facebook/react/issues/9134\r\nhttps://github.com/eight04/linkify-plus-plus-core/issues/2\r\n\r\n(While not all of the above specifically say \"this is caused by not supporting normalization,\" the truth is most all of them are indirectly a result of React's decision to use un-normalized adjacent text nodes as boundaries in certain scenarios, where in previous version of React, these boundaries were achieved with comment nodes, and in other version, span wrappers -- it's absolutely possible to achieve support for normalization of the DOM, but doing so would require re-implementing how React creates boundaries where within a text string)\r\n\r\nFollowing are more specific reproduction steps to show how easily a basic react app will completely fail with a single line of code (which can come from a chrome extension, the browser itself in the case of Google Translate, 3rd party libraries, other javascript frameworks, etc... \r\n```\r\n- Open the demo link from the original ticket (https://nn92zy7240.codesandbox.io/)\r\n- Click the button once\r\n- In the javascript console run document.body.normalize(); \r\n- Click the button again.\r\n- The text on the page disappears\r\n- Click the button again.\r\n- The button on the page disappears (page is fully broken at this point)\r\n```\r\n\r\nTo me, this issue highlights how brittle React is (particularly when seeing how easy it is to kill the above react example with a single DOM normalization operation).\r\n\r\n(I'm unsubscribing from this thread in anticipation of backlash -- I currently don't use React, and am posting this due to the number of complaints I've received from other developers running into issues caused by how React must maintain adjacent un-normalized text nodes (which prevents React from supporting Node.normalize)",
                "createdAt": "2019-03-05T04:13:53Z",
                "author": {
                  "login": "paton",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/609881?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15014",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Type: Discussion",
                        "color": "fef2c0"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "Question about React.Children",
                "state": "CLOSED",
                "number": 15015,
                "body": "Why use `React.Children` to manipulate children? why not `children.map`, `children.forEach` and so on?",
                "createdAt": "2019-03-05T04:41:36Z",
                "author": {
                  "login": "rabbitooops",
                  "avatarUrl": "https://avatars2.githubusercontent.com/u/20941062?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15015",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "TypeError: nextDeps.join is not a function",
                "state": "CLOSED",
                "number": 15016,
                "body": "I am getting this error while using hooks. \r\n![image](https://user-images.githubusercontent.com/902571/53800806-aab8df00-3f65-11e9-8357-73774694b275.png)\r\n\r\nThis is related code.\r\n\r\n`const market = useContext(MarketContext); `\r\n` useEffect(() => {`\r\n  \r\n      nav.items[1] = {\r\n                     name: 'Market',\r\n                    url: '/market',\r\n                    icon: 'icon-speedometer',\r\n                    badge: {\r\n                           variant: market == \"Live\" ? \"primary\" : \"secondary\",\r\n                    text: market,\r\n               }\r\n      };    \r\n `},  market)`\r\n\r\n\r\n",
                "createdAt": "2019-03-05T11:09:45Z",
                "author": {
                  "login": "rockfight",
                  "avatarUrl": "https://avatars3.githubusercontent.com/u/902571?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15016",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Use createRefs API for variable amount of elements",
                "state": "CLOSED",
                "number": 15017,
                "body": "Hi guys,\r\n\r\nI want to report an improvement or a missing documented guidance (if there is already a solution to this problem). I couldn't find a solution so far by looking in the docs or other issues. The only related link to this problem might be this one where the solution is a hacky workaround which does not work for dynamic defined arrays: https://dev.to/ajsharp/-an-array-of-react-refs-pnf\r\n\r\n*The actual problem:*\r\nBefore the new `createRef` API it was possible to create a map with the shape `{[id]: ref}`. In my render function I was able to to spawn a list of elements and store their reference in this map. For the new way of defining references I need to generate the \"storage\" for references in advance (in the constructor). Since my elements are defined and changed by props I would need to regenerate this collection of references each time before they are actually rendered. Since \"componentWillUpdate\" is deprecated I don't have a chance to recreate those references and link them in my render functions.\r\n\r\nFor more clarification on my problem here is a short example how this could work right now with componentWillUpdate: https://jsfiddle.net/zqxw6Lg4/3/\r\n\r\nI need those references because I want to scroll specific components in this list afterwards.\r\n\r\nVersions:\r\n- react: \"16.6.3\"\r\n- react-dom: \"16.6.3\"\r\n\r\n\r\nGreetings,\r\nThomas\r\n",
                "createdAt": "2019-03-05T14:45:46Z",
                "author": {
                  "login": "Chaoste",
                  "avatarUrl": "https://avatars2.githubusercontent.com/u/9327071?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15017",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "The browser crashes when use React.lazy return Promise.resolve(undefined)",
                "state": "OPEN",
                "number": 15019,
                "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nThe browser crashes \r\n\r\n```js\r\nconst Loading = () => <div>loading...</div>;\r\nconst Component = lazy(() => Promise.resolve(undefined));\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Suspense fallback={<Loading />}>\r\n        <Component />\r\n      </Suspense>\r\n    </div>\r\n  );\r\n}\r\n```\r\n*I can't provide an example of CodeSandbox, which would cause the browser to crash*\r\n\r\n**What is the expected behavior?**\r\nthrow Error\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nreact@16.8.3\r\nreact-dom@16.8.3\r\nchrome 72.0.3626.119",
                "createdAt": "2019-03-05T15:45:18Z",
                "author": {
                  "login": "angular-moon",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/7876335?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15019",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Type: Needs Investigation",
                        "color": "fbca04"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "Should setting state inside discrete events cause cleanup to run?",
                "state": "CLOSED",
                "number": 15020,
                "body": "This bug is pretty confusing:\r\n\r\nhttps://twitter.com/kentcdodds/status/1102659818660102145\r\n\r\nI think it happens because `fn` scheduled by `setInterval(fn, 0)` jumps in front of the `[running]` effect cleanup caused by `setRunning(false)`. So the interval still fires, overwriting `setLapse(0)` that happened during the event with its `setLapse(someValue)`.\r\n\r\nThis reminds me of the issue described in https://github.com/facebook/react/issues/14750#issuecomment-460409609, or at least a part of it:\r\n\r\n>In fact, this problem exists even for regular React keystrokes (and other “discrete” events). The solution to that would be to flush passive effects before we get a discrete event.\r\n\r\nBut here, it seems like this wouldn’t be sufficient because the effect flips *as a result* of the click, not before it. So should `setState` inside a discrete event *also* flush passive effect? Seems like not. (That would defeat the purpose of delaying them.)\r\n\r\nSo this is working as designed, and the fix is just `useLayoutEffect` when the timing matters? Or the rAF solution?",
                "createdAt": "2019-03-05T16:49:38Z",
                "author": {
                  "login": "gaearon",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/810438?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15020",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Component: Hooks",
                        "color": "c2f27b"
                      }
                    },
                    {
                      "node": {
                        "name": "Type: Question",
                        "color": "cc317c"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "Gotcha when using state hooks and async callbacks",
                "state": "CLOSED",
                "number": 15027,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nMaybe not exactly a bug, but it certainly was surprising behavior when I ran into it.\r\n\r\n**What is the current behavior?**\r\n\r\nWhen using a `useState` hook, it is preferable (and even recommended in the docs about hooks) to use an individual `useState` hook for each atomic piece of state your component may contain.\r\n\r\nThis is all well and good, except that `setState`s are not batched in async code. I was writing a component that used a few different pieces of state, but had some pieces which all needed to be set at more or less the same time, and as a response to an asynchronous action.\r\n\r\nI set both pieces of state, and when I went to test it the whole page crashed. It then took me several minutes of debugging to realize why not all of my state was set, despite my handler looking sound: the component was rerendered *during* the `setState` call.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nThis is a contrived example, but you can imagine how a real asynchronous method like a web request or other promise-based api could easily lead to the issue: https://codesandbox.io/s/zk1kwlmp4p\r\n\r\nIn my exact case, `a` was actually a `currentPage` string, and `b` was an object which a child component needed in order to render, which was fetched asynchronously and passed down.\r\n\r\n**What is the expected behavior?**\r\n\r\nI'm not here to say that this is necessarily a bug per se, since this has also been true for class components for a long time and hasn't really been an issue. I've been working in react for two years and have never had a problem with class components and async code, for example.\r\n\r\nI'm also well aware of possible workarounds, like storing both fields in the same state object, or reordering the `setState`s such that the render doesn't switch to the new \"mode\" until the required state has been set. The first simple seems like it's non-idiomatic for hooks, and as for the second, one could imagine that it would become complicated once there are more modes, and the inter-dependencies between different pieces of state get messier.\r\nI could also use the unstable batched updates api, but I don't like the idea of depending on an unstable api, especially in code where I can't easily insulate myself from breaking changes in the api down the line.\r\n\r\nI'd just like to point out that this was what to me seemed like a very natural way to write the component, and that the crash caught me entirely by surprise.\r\n\r\nI know that it has been mentioned elsewhere that react may move to always batching `setState`s, and I think this gotcha may increase the impetus to go ahead and do so.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAny version since hooks were released, independent of browser or operating system.\r\n",
                "createdAt": "2019-03-06T00:06:37Z",
                "author": {
                  "login": "EthanRutherford",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/5589147?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15027",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Mutliple state hooks resulting in mis-paint",
                "state": "CLOSED",
                "number": 15028,
                "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nA paint seems to occur between a state update, and before an effect that is \"listening\" to that state gets a chance to run it's synchronous state update function.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/x2qnpykl5z\r\n\r\n1. run the profiler\r\n2. click the \"change mode\" button\r\n3. slide through the screenshots from the profile\r\n4. *err* there is a paint with \"old\" data but in the \"new\" mode before the \"showLoader\" boolean is set to true\r\n\r\n**What is the expected behavior?**\r\nI would have expected that there would not be a paint of the state update if useEffect had that state listed as a dependency, and that the paint would wait until useEffect had at least done any state changes that weren't async.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.8.3 chrome latest, fedora (but i think all os)",
                "createdAt": "2019-03-06T01:10:39Z",
                "author": {
                  "login": "drKnoxy",
                  "avatarUrl": "https://avatars3.githubusercontent.com/u/604015?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15028",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "use `displayName` of `useDebugValue`",
                "state": "CLOSED",
                "number": 15031,
                "body": "**Do you want to request a *feature* or report a *bug*?**\r\n> *feature*\r\n\r\n**What is the current behavior?**\r\n> I can't find a way to custom the display name of `useDebugValue` hook.\r\n\r\n`useDebugValue` seems now only detect the display name from the function name. For the common `Component`, we can used the static `displayName` field to custome the name of the `Component` show in the `React dev tools`, why not let the `useDebugValue` hook works in the same way too?",
                "createdAt": "2019-03-06T06:15:02Z",
                "author": {
                  "login": "zhengxiaoyao0716",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/12682063?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15031",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Proposal : Promise render hooks",
                "state": "OPEN",
                "number": 15032,
                "body": "I was playing with flutter and I found the widget [FutureBuilder](https://docs.flutter.io/flutter/widgets/FutureBuilder-class.html) pretty useful.\r\n\r\nThis type of component enables to render itself based on the status of a promise.\r\n\r\nTypically, this could be used to display a \"loading\" state while the promise is resolved and then, display the actual component with the freshly resolved value.\r\n\r\nExample :\r\n\r\n```js\r\n\r\nfunction Hello() {\r\n  \r\n  const snapshot = usePromise(fetchData())\r\n  \r\n  let text = 'Loading'\r\n  \r\n  if (snapshot.hasValue) {\r\n    text = snapshot.value\r\n  }\r\n  \r\n  return <span>{text}</span>\r\n}\r\n```\r\n\r\nI made an example on [CodeSandbox](https://codesandbox.io/s/ykzv1jv88j). First, a 'loading' text is displayed and after a second (promise resolved), display 'hello'.\r\n\r\nFinally, this is just a wrapper around a `useState` but I found it pretty convenient (less boilercode, more expressive).\r\n\r\nDo you think this could be a nice addition to the hooks ?\r\n",
                "createdAt": "2019-03-06T07:06:35Z",
                "author": {
                  "login": "rozaxe",
                  "avatarUrl": "https://avatars2.githubusercontent.com/u/3525604?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15032",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Unable to dynamically combined multiple applications each instantiating i18next (hooks error)",
                "state": "CLOSED",
                "number": 15038,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nBug is related to this issue:\r\nhttps://github.com/i18next/react-i18next/issues/765\r\n\r\nSample repo:\r\nhttps://github.com/Icehunter/i18n-issue-app/tree/master\r\n\r\n**What is the expected behavior?**\r\n\r\nhttps://reactjs.org/docs/error-decoder.html/?invariant=307 does not happen.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8.x\r\nChrome/Firefox\r\nOSX\r\n\r\nDidn't have to worry about it in previous versions as hooks weren't available.\r\n\r\nIf there's more info I can provide please let me know. The maintainer of react-i18next was able to reproduce the issue by making a simple hook in code.",
                "createdAt": "2019-03-06T15:51:14Z",
                "author": {
                  "login": "Icehunter",
                  "avatarUrl": "https://avatars3.githubusercontent.com/u/677341?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15038",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Resolution: Needs More Information",
                        "color": "fffde7"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "react-debug-tools doesn't support legacy context (Component.contextTypes)",
                "state": "OPEN",
                "number": 15039,
                "body": "Original report: https://github.com/facebook/react-devtools/issues/1304\r\n\r\nRepro case: https://64yojj2wyk.codesandbox.io/",
                "createdAt": "2019-03-06T16:54:36Z",
                "author": {
                  "login": "bvaughn",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/29597?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15039",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Type: Bug",
                        "color": "b60205"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "react 16.6.1 No matching version found for scheduler@^0.13.4",
                "state": "CLOSED",
                "number": 15040,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nYesterday I could npm install. Today with no changes to package.json I see this:\r\n\r\n`npm ERR! code ETARGET\r\nnpm ERR! notarget No matching version found for scheduler@^0.13.4\r\nnpm ERR! notarget In most cases you or one of your dependencies are requesting\r\nnpm ERR! notarget a package version that doesn't exist.`\r\n\r\nAlso posted on stackoverflow: https://stackoverflow.com/questions/55030422/no-matching-version-found-for-scheduler0-13-4\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\ninstall scheduler@^0.13.4 by itself or install with react@16.6.1 as a dependency\r\n\r\n**What is the expected behavior?**\r\nReact and scheduler should get installed\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.6.1 with RN ",
                "createdAt": "2019-03-06T19:10:48Z",
                "author": {
                  "login": "turnipdabeets",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/11654201?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15040",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "React Hooks useState updating an array",
                "state": "CLOSED",
                "number": 15041,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nHooks Clarification\r\n\r\n**What is the current behavior?**\r\nI'm trying to understand the lifecycle of `useState`.\r\n\r\nI have a mock application using a mock websocket. Every second, it sends a new message from the backend. The new message is meant to be appended to an array using `useState`. \r\n\r\nHere are a few different examples that highlight my confusion:\r\n\r\n**Example 1**\r\n[In this example](https://codesandbox.io/s/zz2lj8knyp), if I set the websocket's `onmessage` function once in `useEffect`, then whenever I call `setMessages` to update the `messages` array, the `messages` array I receive as an input is empty.\r\n\r\n```js\r\nconst [messages, setMessages] = useState([]);\r\n\r\nfunction receiveMsg(msg) {\r\n  setMessages(messages.concat(JSON.parse(msg.data)));\r\n}\r\n\r\nuseEffect(function() {\r\n    if (_.isUndefined(socket)) {\r\n      let ws = new MockWebsocket(\"ws://127.0.0.1:8080/\");\r\n      ws.onmessage = receiveMsg;\r\n    }\r\n});\r\n```\r\n\r\nThe effect of this is that I only ever get the latest message in my array.\r\n\r\n**Example 2**\r\nIf, however, I set the `onmessage` function on every render [as in this example](https://codesandbox.io/s/73kr25mkrj), then I get my full array with data appended as I would expect.\r\n\r\n```js\r\nconst [messages, setMessages] = useState([]);\r\n\r\nfunction receiveMsg(msg) {\r\n  setMessages(messages.concat(JSON.parse(msg.data)));\r\n}\r\n\r\nif (!_.isUndefined(socket)) {\r\n  socket.onmessage = receiveMsg;\r\n}\r\n\r\nuseEffect(function() {\r\n  if (_.isUndefined(socket)) {\r\n    let ws = new MockWebsocket(\"ws://127.0.0.1:8080/\");\r\n    ws.onmessage = receiveMsg;\r\n  }\r\n});\r\n```\r\n\r\nIn the `receiveMessage` function, my `messages` array is the whole array instead of an empty one in this example.\r\n\r\n**Example 3**\r\nBUT, if I assign a new reference to `messages`, [as in this example](https://codesandbox.io/s/j1n0py5zz3), and re-assign the value inside `receiveMsg`, then I don't have to re-assign the `onmessage` function over and over.\r\n\r\n```js\r\nconst [messages, setMessages] = useState([]);\r\nlet msgRef = messages;\r\n\r\nfunction receiveMsg(msg) {\r\n  msgRef = msgRef.concat(JSON.parse(msg.data));\r\n  setMessages(msgRef);\r\n}\r\n\r\nuseEffect(function() {\r\n  if (_.isUndefined(socket)) {\r\n    let ws = new MockWebsocket(\"ws://127.0.0.1:8080/\");\r\n    ws.onmessage = receiveMsg;\r\n  }\r\n});\r\n```\r\n\r\n**Example 4**\r\nBut, if I assign a new reference and don't re-assign to it, [as in this example](https://codesandbox.io/s/8pkwr86p29), I continue ending up with an empty array. This suggests it's the assignment back to `msgRef` that is keeping the entire array within the closure.\r\n\r\n```js\r\nconst [messages, setMessages] = useState([]);\r\nlet msgRef = messages;\r\n\r\nfunction receiveMsg(msg) {\r\n  setMessages(msgRef.concat(JSON.parse(msg.data)));\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\nMy original expectation was that example #1 would work. I can tell there's something I'm not totally understanding about the way the assignment of variables to closure works with this hook, but I'm struggling to define what exactly's going on. Can someone shed some light on why this works this way?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8",
                "createdAt": "2019-03-06T19:51:42Z",
                "author": {
                  "login": "brettshollenberger",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/4041410?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15041",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Type: Question",
                        "color": "cc317c"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "Numpad Decimal key producing a different \"key\" between Chrome and Internet Explorer 11.",
                "state": "OPEN",
                "number": 15042,
                "body": "Possible **bug** in v**16.8.3**.\r\n\r\nWhen I push the `.` key on the numpad (with \"Num Lock\" turned on of course), it produces the following property values within the `onKeyPress` handler, in the event object in Chrome: \r\n```\r\ncharCode: 46,\r\nkey: \".\",\r\nkeyCode: 0\r\n```\r\nBut in Internet Explorer, it produces:\r\n```\r\ncharCode: 46,\r\nkey: \"Delete\",\r\nkeyCode: 0\r\n```\r\nI would expect the `key` property to be equal in both cases. The value `\"Delete\"` is incorrect as it is the decimal which is being pushed. But the decimal key is in fact the Delete key when the Num Lock is off... but it's weird that Chrome would understand that, but not IE, especially considering the key is producing the same `charCode` on both browsers.\r\n\r\nMy understanding is that I am dealing with a \"Synthetic Event\" whose job it is to normalize the cross-browser differences. This seems like it would've been caught via tests or other issues, so I'm not sure this is a React issue. Does React own the library which provides the Synthetic Event implementation?\r\n\r\nThank you for any help :)",
                "createdAt": "2019-03-06T21:13:52Z",
                "author": {
                  "login": "papiro",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/8143236?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15042",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Component: DOM",
                        "color": "fef2c0"
                      }
                    },
                    {
                      "node": {
                        "name": "Type: Needs Investigation",
                        "color": "fbca04"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "State is mutable from function called inside of componentDidUpdate",
                "state": "CLOSED",
                "number": 15043,
                "body": "**Do you want to request a feature or report a bug?**\r\nBug\r\n\r\nWhen calling a function from inside of componentDidUpdate(), the state becomes mutable and is changed without calling this.setState().  \r\n\r\nNote: It is only mutable when the state is an object, and not a primitive data type. \r\n\r\n**Example code to reproduce:**\r\n\r\n```\r\nclass App extends Component {\r\n  constructor(props ) {\r\n    super(props);\r\n    this.state = {\r\n      clicked: {key: false}\r\n    };\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState){\r\n\r\n    if(prevState.clicked!== this.state.clicked){\r\n      this.updateState();\r\n    };\r\n\r\n    //meow is printed!! \r\n    console.log(this.state.clicked)\r\n  };\r\n\r\n  updateState = () => {\r\n    let myObj= this.state.clicked;\r\n    if(myObj!== null){\r\n      myObj.key = 'meow'\r\n    };\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <button onClick={() => this.setState({clicked: {key: true}})}>Set to true </button>\r\n          <button onClick={() => this.setState({clicked: {key: false}})}>Set to false</button>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n```\r\n\r\nReact Version:  16.2.0 - 16.8.4 (Tested in both Typescript and Javascript)\r\nBrowser: Chrome (72.03)\r\n",
                "createdAt": "2019-03-06T22:14:22Z",
                "author": {
                  "login": "alex13indas",
                  "avatarUrl": "https://avatars2.githubusercontent.com/u/42160735?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15043",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Hook's setState returns a different value then required",
                "state": "CLOSED",
                "number": 15045,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nComponent maintains previous state even when called with new props.\r\n\r\nI have a following component:\r\n\r\n```\r\nconst NameProperty: React.FC<PropertyProps> = ({ element, modelling }) => {\r\n  const [name, setName] = React.useState(element.businessObject.name, [element]);\r\n  return <div>{name}</div> \r\n}\r\n```\r\n\r\nWhen this component is updated with a new element, it renders a previous value as state is not updated:\r\n\r\n![reactbug](https://user-images.githubusercontent.com/2682705/53925795-49b01900-40d5-11e9-8d69-2598b133eafc.gif)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nHer it is.\r\n\r\nhttps://codesandbox.io/s/22y81wm5p\r\n\r\n**What is the expected behavior?**\r\n\r\nOn second re-render the new value is used, not the value from the state.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nAll browsers, React latest.",
                "createdAt": "2019-03-07T01:42:47Z",
                "author": {
                  "login": "tomitrescak",
                  "avatarUrl": "https://avatars2.githubusercontent.com/u/2682705?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15045",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "No warnings displayed for \"unknown props\"",
                "state": "CLOSED",
                "number": 15048,
                "body": "React is supposed to warn about \"unknown props\" as described here https://reactjs.org/warnings/unknown-prop.html\r\n\r\nIt looks like I have a bug or edge case condition that there's some unknown props but react emits no warnings!!!\r\n\r\nRight not I dont have steps to reproduce, but I have some screenshots, Ill take a look later for \"steps\" if Im ever able to reproduce this in some simple way\r\n\r\n1. No warnings in the console \r\nhttps://i.imgur.com/fWkxBlX.png\r\n\r\n2. This is technically an \"unknown prop\"\r\nThe w=\"250px\"  https://i.imgur.com/vf4ZUac.png\r\nif that's not enough maybe what about the  'mt=10px'  https://i.imgur.com/bbioGTE.png also look https://i.imgur.com/zBPmvCM.png\r\n\r\n-------- \r\n\r\nI tried to search for an open issue, is this known? I should try to figure out what the heck is going on?\r\n\r\nThanks",
                "createdAt": "2019-03-07T04:58:14Z",
                "author": {
                  "login": "titoBouzout",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/64156?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15048",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Hooks set state on animationEnd event - undefined",
                "state": "CLOSED",
                "number": 15049,
                "body": "I'm new to React Hooks but I think that this should work.\r\nThe state and the set state are undefined on the animationEnd event.\r\n\r\n\"react\": \"^16.8.4\",\r\n\"react-dom\": \"^16.8.4\"\r\n\r\n```\r\nimport cn from \"classnames\";\r\nimport { useState } from \"react\";\r\n\r\nfunction Loading(props) {\r\n  const { animationCompleted, setAnimationCompleted } = useState(false);\r\n\r\n  const hideLoading = () => {\r\n    // setAnimationCompleted is undefined\r\n    setAnimationCompleted(true);\r\n  };\r\n\r\n  return (\r\n    <div className={cn(\"loading-wrap\", { \"fade-out\": props.loaded, hide: animationCompleted })} onAnimationEnd={() => hideLoading()}>\r\n      <div className=\"spinner\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n```",
                "createdAt": "2019-03-07T08:48:06Z",
                "author": {
                  "login": "mario-iliev",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/17314713?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15049",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Hooks error from external component",
                "state": "CLOSED",
                "number": 15050,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\nWe are trying to create an external module which will be imported in main app.\r\nHere is the module : \r\n```import React, { useState } from 'react';\r\nexport const MyHelloComponent = (props) => {\r\n  const [test, setTest] = useState();\r\n  return (<div>Hello</div>);\r\n}\r\n```\r\nImporting this simple code into main app gives us the error : \r\n\r\n> Uncaught Invariant Violation: Hooks can only be called inside the body of a function component\r\n\r\nRemoving hooks this code works fine.\r\n\r\nWe have followed instructions from [https://reactjs.org/warnings/invalid-hook-call-warning.html#duplicate-react](https://reactjs.org/warnings/invalid-hook-call-warning.html#duplicate-react) but error still thrown\r\n\r\nIf we link react as mentionned in documentation, works but it only can be done in development not in production.\r\n\r\nWe are not the only one having this issue [Side package with React Hooks failing with Invariant Violation when called in main package](https://stackoverflow.com/questions/54916349/side-package-with-react-hooks-failing-with-invariant-violation-when-called-in)\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**Code from external component :** \r\npackage.json\r\n``` \r\n{\r\n  \"name\": \"app-component\",\r\n  \"version\": \"1.0.0\",\r\n  \"main\": \"build/index.js\",\r\n  \"license\": \"MIT\",\r\n  \"private\": true,\r\n  \"peerDependencies\": {\r\n    \"react\": \"^16.8.4\",\r\n    \"react-dom\": \"^16.8.4\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.3.4\",\r\n    \"@babel/plugin-proposal-class-properties\": \"^7.3.4\",\r\n    \"@babel/plugin-proposal-object-rest-spread\": \"^7.3.4\",\r\n    \"@babel/plugin-transform-react-jsx\": \"^7.3.0\",\r\n    \"@babel/plugin-transform-regenerator\": \"^7.3.4\",\r\n    \"@babel/preset-env\": \"^7.3.4\",\r\n    \"@babel/preset-react\": \"^7.0.0\",\r\n    \"babel-loader\": \"^8.0.5\",\r\n    \"css-loader\": \"^2.1.0\",\r\n    \"react\": \"^16.8.4\",\r\n    \"react-dom\": \"^16.8.4\",\r\n    \"style-loader\": \"^0.23.1\",\r\n    \"styled-jsx\": \"^3.2.1\",\r\n    \"webpack\": \"^4.29.5\",\r\n    \"webpack-cli\": \"^3.2.3\"\r\n  },\r\n  \"scripts\": {\r\n    \"build\": \"./node_modules/.bin/webpack --mode production\",\r\n    \"dev\": \"./node_modules/.bin/webpack --mode development --watch\"\r\n  },\r\n  \"files\": [\r\n    \"build\"\r\n  ],\r\n  \"dependencies\": {\r\n    \"@material-ui/core\": \"^3.9.2\"\r\n  }\r\n}\r\n ```\r\nwebpack.config.js\r\n\r\n```\r\nconst path = require('path');\r\nconst pkg = require('./package.json');\r\n\r\nconst libraryName= pkg.name;\r\n\r\nmodule.exports = (env, argv) => ({\r\n  entry: './src/index.js',\r\n  output: {\r\n    path: path.resolve(__dirname, 'build'),\r\n    filename: 'index.js',\r\n    library: libraryName,\r\n    libraryTarget: 'commonjs2',\r\n    publicPath: '/build/',\r\n  },\r\n  devtool: argv.mode !== 'production' ? 'inline-source-map': false,\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.js$/,\r\n        include: path.resolve(__dirname, 'src'),\r\n        exclude: /(node_modules|bower_components)/,\r\n        use: ['babel-loader']\r\n      },\r\n      {\r\n        test: /\\.css$/,\r\n        use: ['style-loader', 'css-loader']\r\n      },\r\n    ]\r\n  },\r\n\r\n  resolve: {\r\n    alias: {\r\n      'react': path.resolve('./node_modules/react'),\r\n      'react-dom': path.resolve('./node_modules/react-dom'),\r\n    }\r\n  },\r\n  externals: {\r\n    react: \"react\",\r\n    \"react-dom\": \"react-dom\"\r\n  }\r\n});\r\n```\r\nsrc/index.js\r\n```\r\nexport * from './components/hello';\r\n```\r\nsrc/components/hello.js\r\n```\r\nimport React, { useState } from 'react';\r\nexport const MyHelloComponent = (props) => {\r\n  const [test, setTest] = useState();\r\n  return (<div>Hello</div>);\r\n}\r\n```\r\n\r\n**Code from main app:** \r\nwebpack.config.js\r\n```\r\nmodule.exports = {\r\n  entry: './src/index.js',\r\n  output: {\r\n    path: __dirname + '/dist',\r\n    publicPath: '/dist/',\r\n    filename: 'bundle.js'\r\n  },\r\n  devServer: {\r\n    contentBase: './public',\r\n  },\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.(js|jsx)$/,\r\n        exclude: /node_modules/,\r\n        use: ['babel-loader']\r\n      }\r\n    ]\r\n  },\r\n};\r\n```\r\n\r\npackage.json\r\n```\r\n{\r\n  \"name\": \"react-app-shell\",\r\n  \"version\": \"1.0.0\",\r\n  \"main\": \"index.js\",\r\n  \"license\": \"MIT\",\r\n  \"scripts\": {\r\n    \"start\": \"webpack-dev-server --mode development\"\r\n  },\r\n  \"dependencies\": {\r\n    \"react\": \"^16.8.4\",\r\n    \"react-dom\": \"^16.8.4\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@babel/core\": \"^7.3.4\",\r\n    \"@babel/preset-env\": \"^7.3.4\",\r\n    \"@babel/preset-react\": \"^7.0.0\",\r\n    \"babel-loader\": \"^8.0.5\",\r\n    \"webpack\": \"^4.29.6\",\r\n    \"webpack-cli\": \"^3.2.3\",\r\n    \"webpack-dev-server\": \"^3.2.1\"\r\n  }\r\n}\r\n```\r\nsrc/index.js\r\n\r\n```\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {MyHelloComponent} from 'app-component';\r\n\r\nclass Welcome extends React.Component {\r\n  render() {\r\n    return <><h1>Main App</h1><MyHelloComponent/></>;\r\n  }\r\n}\r\nReactDOM.render(<Welcome />, document.getElementById(\"root\"));\r\n```\r\n\r\nTo be able to make it works, you have to do `yarn link` after (or before) having built it  from component and `yarn link \"app-component\"` from main app.\r\n\r\n\r\n**What is the expected behavior?**\r\nuse hooks from external components works obviously.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact 16.8.4 and with previous version it doest not work too\r\n\r\n",
                "createdAt": "2019-03-07T09:48:29Z",
                "author": {
                  "login": "mrbinr",
                  "avatarUrl": "https://avatars2.githubusercontent.com/u/5592292?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15050",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "React Portals rendered into fragments don't support/listen to events",
                "state": "OPEN",
                "number": 15051,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nIf you create and render a react component into a Portal using a document fragment then events aren't listened to or triggered\r\n\r\nWe have a library that allows users to supply their own components that are then rendered into our layout at runtime. This works well but the need for us to render the components into divs/spans creates layout issues for our users. \r\n\r\nIn an attempt to mitigate against this problem we tried to use document fragments as the target but have found that doing so solves the rendering issues, but means that events are no longer listened to.\r\n\r\nI've created a repo that illustrates this here: https://github.com/seanlandsman/react-portal-fragment\r\n\r\nThis isn't quite how our library works but I've tried to create a repro of the problem that is as simplified as I could make it\r\n\r\n**What is the expected behavior?**\r\n\r\nComponent events should be triggered/listened \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8.4\r\n\r\nNo, Portals were only supported in 16.x",
                "createdAt": "2019-03-07T12:29:22Z",
                "author": {
                  "login": "seanlandsman",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/1329081?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15051",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "setState has wrong type",
                "state": "CLOSED",
                "number": 15052,
                "body": "We have interface:\r\n\r\n```\r\ninterface State {\r\n  condition: boolean;\r\n  left: number;\r\n  right: number;\r\n}\r\n```\r\n\r\nand defined state:\r\n\r\n```\r\n  public state: State = {\r\n    condition: true,\r\n    left: 0,\r\n    right: 0,\r\n  };\r\n```\r\nConsider method:\r\n\r\n```\r\n  public change= (value: number) => {\r\n    this.setState((state) => {\r\n      if(state.condition) {\r\n        return {\r\n          left: value,\r\n        }\r\n      } else {\r\n        return {\r\n          right: value,\r\n        }\r\n      }\r\n    });\r\n  };\r\n```\r\nThis cause an error during compilation. \r\n\r\nTS:\r\n```\r\n...\r\n        Type '{ left: number; right?: undefined; }' is not assignable to type 'Pick<State, \"left\" | \"right\">'.\r\n          Types of property 'right' are incompatible.\r\n            Type 'undefined' is not assignable to type 'number'.\r\n```\r\n\r\nPosible Solution:\r\n\r\n```\r\n       setState<K extends keyof S>(\r\n            state: ((prevState: Readonly<S>, props: Readonly<P>) => (Partial<Pick<S, K>> | S | null)) | (Pick<S, K> | S | null),\r\n            callback?: () => void\r\n        ): void;\r\n```\r\n\r\n",
                "createdAt": "2019-03-07T13:42:10Z",
                "author": {
                  "login": "laxip",
                  "avatarUrl": "https://avatars2.githubusercontent.com/u/20876055?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15052",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "useImperativeHandle callback never called (when rendering w/ enzyme)",
                "state": "OPEN",
                "number": 15054,
                "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nI have the code:\r\n\r\n```\r\nfunction Form(props, ref) {\r\n\r\n  React.useImperativeHandle(ref, () => {\r\n    debugger;\r\n    return {\r\n      setErrors: () => {},\r\n    };\r\n  });\r\n}\r\n\r\nexport default React.forwardRef(Form);\r\n```\r\n\r\nWhen I use the component, the callback passed to `useImperativeHandle` is never called. (The debugger statement is never hit).\r\n\r\nThe code that I have using the component is:\r\n\r\n```\r\nimport {mount} from 'enzyme';\r\n\r\ndescribe('Form component', () => {\r\n  test('exposes a ref', async () => {\r\n    let formRef;\r\n    mount(<Form ref={ref => (formRef = ref)}>{() => <span>test</span>}</Form>);\r\n    await pause(500); // this is just a setTimeout to give time for the hooks to run.\r\n    expect(formRef.setErrors).toBeDefined();\r\n  });\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/v8rqy75mn5\r\n\r\n**What is the expected behavior?**\r\n\r\nCallback should be called and returned value should be used as the ref.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n```\r\n    \"react\": \"16.8.0-alpha.1\",\r\n    \"react-dom\": \"16.8.0-alpha.1\",\r\n    \"enzyme\": \"3.8.0\",\r\n    \"enzyme-adapter-react-16\": \"1.8.0\",\r\n```\r\n",
                "createdAt": "2019-03-07T19:34:32Z",
                "author": {
                  "login": "rally25rs",
                  "avatarUrl": "https://avatars3.githubusercontent.com/u/38535?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15054",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Resolution: Needs More Information",
                        "color": "fffde7"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "Controlled contentEditable element contents not updated when state changes",
                "state": "CLOSED",
                "number": 15056,
                "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nAn element with contentEditable does not update the content when state updates.\r\n\r\nReproduce:\r\nhttps://codesandbox.io/s/kk421m2jmr\r\n1. Type something in the contentEditable div.\r\n2. Click reset\r\n3. Expected div to contain \"TEXT RESET!\"\r\n\r\n**Which versions of React\r\n16.8.4",
                "createdAt": "2019-03-07T20:50:31Z",
                "author": {
                  "login": "klase",
                  "avatarUrl": "https://avatars2.githubusercontent.com/u/1711650?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15056",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "setState in useEffect causing a \"React state update on an unmounted component\" warning",
                "state": "OPEN",
                "number": 15057,
                "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nThe warning is triggered after an intricate sequence of events. I stumbled upon it by accident, assumed it was an error in my code, but then step by step removed everything in my application until I was left with a fairly small bit of code that doesn't seem to be doing anything illegal from the API point of view, yet is triggering a warning.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem:**\r\n\r\nhttps://codesandbox.io/s/q87882qv64\r\n\r\nThe example is my real application code trimmed down as much as possible to demonstrate the warning. So some of the code might be a bit nonsensical/contrived, but that's because I removed lots of surrounding code leaving only the relevant bits for reproducing the issue.\r\n\r\nIn other words, there might weird looking uses of useEffect and weird sequencing of things, but that sort of falls out of how I've structured my routes, state, components in the full app, etc.\r\n\r\n**What is the expected behavior?**\r\n\r\nI would like to know if\r\n\r\na) is this a React bug that I stumbled upon that should be fixed?\r\nb) is this something I'm doing \"wrong\" and how I could fix that in my application (i.e. is this a real memory leak being caused because of the way I structured the code)\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.8.4",
                "createdAt": "2019-03-07T23:17:45Z",
                "author": {
                  "login": "KidkArolis",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/324440?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15057",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Type: Bug",
                        "color": "b60205"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "react dom doesn't leave white space in text when there is a line break followed by an inline element",
                "state": "CLOSED",
                "number": 15058,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug.\r\n\r\n**What is the current behavior?**\r\n\r\nReact treats line breaks in text differently than how pure HTML does it.\r\n\r\n**How to reproduce:**\r\n\r\nIf you try this out in React:\r\n\r\n```\r\nexport default () => (\r\n  <p>\r\n    foo\r\n    <strong>bar</strong>\r\n  </p>\r\n)\r\n```\r\n\r\nYou'll see that is behaves differently than in pure HTML:\r\n\r\n```\r\n<p>\r\n  foo\r\n  <strong>bar</strong>\r\n</p>\r\n```\r\n\r\nReact ends up cropping out some more white space than I expected it to.\r\n\r\n**React**\r\n<img width=\"61\" alt=\"screen shot 2019-03-07 at 8 29 44 pm 1\" src=\"https://user-images.githubusercontent.com/25176023/53996652-0c20af80-4118-11e9-9fb5-dd975b9f6a45.png\">\r\n**Pure HTML**\r\n<img width=\"65\" alt=\"screen shot 2019-03-07 at 8 29 03 pm\" src=\"https://user-images.githubusercontent.com/25176023/53996663-16db4480-4118-11e9-9068-0f72d8eb9e3c.png\">\r\nI haven't looked more into this, because I'm not sure it is actually a bug or a design choice. It is also not a super big problem, as far as I see it. \r\n\r\nI would be happy to look into it, if this was confirmed as a bug, though :)\r\n\r\n**What is the expected behavior?**\r\n\r\nI expected React to leave a white space between my text even if I break a line before an inline element (in my example a `<strong>`). In this case I would have to remove my line break for it to work. \r\n\r\nTo illustrate, this works fine:\r\n```\r\nexport default () => (\r\n  <p>\r\n    foo <strong>bar</strong>\r\n  </p>\r\n)\r\n```\r\n\r\nSo, when I checked in the console, I see the DOM created by React indeed trims out white spaces from the begining and the end of my string. The `nodeValue` for the `foo` text node in React is just that `nodeValue: \"foo\"` and in pureHTML it is `nodeValue: \"\\n    foo\\n    \"`.\r\n\r\nI should note that even if I add a space before the line break, it is still trimmed.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nI don't know if this used to work, but currently I'm using MacOS Mojave, I have tested this in Firefox 67 and Chrome 72 and my React version is 16.\r\n\r\n---\r\n\r\n_Sorry for the clumsy bug report, hope this helps._\r\n\r\n:)\r\n",
                "createdAt": "2019-03-08T00:45:04Z",
                "author": {
                  "login": "brizental",
                  "avatarUrl": "https://avatars2.githubusercontent.com/u/25176023?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15058",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "The warning appear whenever npm install",
                "state": "CLOSED",
                "number": 15059,
                "body": "![screen shot 2019-03-07 at 4 50 31 pm](https://user-images.githubusercontent.com/47307975/54000487-6c095d00-40fc-11e9-9778-06e63f7b6fcc.png)\r\n![screen shot 2019-03-07 at 4 50 51 pm](https://user-images.githubusercontent.com/47307975/54000489-6f044d80-40fc-11e9-907f-f66c3543d978.png)\r\n",
                "createdAt": "2019-03-08T01:15:21Z",
                "author": {
                  "login": "wmgstar",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/47307975?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15059",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "react-dom-server.browser.production in bundle. Why?",
                "state": "CLOSED",
                "number": 15060,
                "body": "Also asked here: https://github.com/apollographql/react-apollo/issues/2828.\r\n\r\nSimply updating `react-apollo` from `2.2.4` to `2.3.0` alter bundle size like in the screens below:\r\n\r\n**- from this:**\r\n![image](https://user-images.githubusercontent.com/41120635/53606934-f877c500-3bbc-11e9-9b93-f340a0450f24.png)\r\n\r\n**- to this:**\r\n![image](https://user-images.githubusercontent.com/41120635/53606973-1cd3a180-3bbd-11e9-9f06-063649a00092.png)\r\n\r\n**Do you know why?**\r\n\r\n- **Version:** \"react\": \"16.8.4\"\r\n",
                "createdAt": "2019-03-08T03:03:40Z",
                "author": {
                  "login": "frederikhors",
                  "avatarUrl": "https://avatars3.githubusercontent.com/u/41120635?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15060",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Why not using object spread to provide value and callback in useState and useReducer?",
                "state": "CLOSED",
                "number": 15062,
                "body": "Is there a specific reason/pattern that you guys are putting two return values in an array but not an object?\r\n\r\nI can understand below code might look ugly:\r\n```\r\nconst { state: open, setState: setOpen } = useState(false);\r\n```\r\n\r\nBut when it comes to custom hooks, code like this is not healthy, either:\r\n```\r\nconst [open, toggleOpen, visible, toggleVisible] = useOpenAndVisibleToggler(false, false);\r\n```\r\n\r\nI have some guess about the reason:\r\n\r\n### Renaming\r\n\r\nIf renaming is the only reason not to use object spread, can I say, I can use it in my custom hooks? e.g.\r\n\r\n```\r\nconst { open, toggleOpen } = useOpenToggler(false);\r\n```\r\n\r\n### Value/Callback Separate\r\n \r\nIf there's a concern about separating values and callbacks, I want to write code like this:\r\n\r\n```\r\nconst [{ open, visible }, { toggleOpen, toggleVisible } ]= useOpenAndVisibleToggler({\r\n  open: false,\r\n  visible: false,\r\n});\r\n```\r\n",
                "createdAt": "2019-03-08T09:25:48Z",
                "author": {
                  "login": "Stupidism",
                  "avatarUrl": "https://avatars2.githubusercontent.com/u/5801015?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15062",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "eslint-plugin-react-hooks on vscode with formatOnSave enabled strange insertion on useEffect skipping array",
                "state": "OPEN",
                "number": 15063,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug\r\n\r\n**What is the current behavior?**\r\n\r\nOn VSCode with formatOnSave enabled, the eslint-plugin-react-hooks appends inside useEffect's skipping array the function I'm invoking in useEffect.\r\n\r\nInitial\r\n1. useEffect(() => { fetchData() }, [aProp])\r\n2. const fetchData = async () => { ... }\r\n\r\nAfter saving\r\n\r\nuseEffect(() => { fetchData() }, [aProp, fetchData])\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\n**What is the expected behavior?**\r\n\r\nIt shouldn't append the function inside the skipping array of useEffect.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n",
                "createdAt": "2019-03-08T10:59:39Z",
                "author": {
                  "login": "sartios",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/917573?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15063",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Type: Discussion",
                        "color": "fef2c0"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "Double-invoking the render function in StrictMode is somewhat too deterministic",
                "state": "OPEN",
                "number": 15065,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nfeature in the development mode\r\n\r\n**What is the current behavior?**\r\n\r\nInside `<StrictMode>`, the render function is invoked twice, but always the second one is committed.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/k938koy8mv\r\nI made a tiny change in @gaearon 's code.\r\n```\r\n  // This may not work in concurrent mode.\r\n  savedCallback.current = callback;\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nDevelopers can notice the wrong code (unintentionally mutating refs in the render function).\r\n\r\nOne idea is to occasionally (ex. `Math.random() < 0.25`) commit the first result from double-invoked render function.\r\nThe other could be to introduce `<StrictStrictMode>` which is to triple-invoke the render function and commit the second one.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.8",
                "createdAt": "2019-03-08T14:15:26Z",
                "author": {
                  "login": "dai-shi",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/490574?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15065",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Type: Discussion",
                        "color": "fef2c0"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "What is the react-cache good for?",
                "state": "CLOSED",
                "number": 15066,
                "body": "At the first sight it seems illogical. I'm glad you're caching like last 500 resources, but _Why_?\r\nThe browser itself caches everything anyway - that's why we have so many headers in HTTP.\r\nHow does the react-cache help?",
                "createdAt": "2019-03-08T14:16:48Z",
                "author": {
                  "login": "novellizator",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/2641229?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15066",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Ammend documentation for skipping useEffect",
                "state": "CLOSED",
                "number": 15068,
                "body": "This is a documentation improvement request. \r\n\r\nCurrently https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects explains skipping a useEffect based on a state variable by showing the following code:\r\n\r\n```javascript\r\nuseEffect(() => {\r\n  document.title = `You clicked ${count} times`;\r\n}, [count]); // Only re-run the effect if count changes\r\n```\r\n\r\nWith the following explanation:\r\n\r\n> In the example above, we pass [count] as the second argument. What does this mean? If the count is 5, and then our component re-renders with count still equal to 5, React will compare [5] from the previous render and [5] from the next render. Because all items in the array are the same (5 === 5), React would skip the effect. That’s our optimization.\r\n\r\nHowever, this does not explain why an array is needed: it still needs to explain what happens when an array with more than one value is passed. Is `useEffect` bypassed when _all_ values are the same, or when _some_ values are the same?\r\n\r\n(and of course the answer to that question should be the PR that updates the documentation, not an issue comment =)",
                "createdAt": "2019-03-08T16:45:20Z",
                "author": {
                  "login": "Pomax",
                  "avatarUrl": "https://avatars2.githubusercontent.com/u/177243?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15068",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Can an error boundary prevent React's error logging?",
                "state": "OPEN",
                "number": 15069,
                "body": "I noticed [this unconditional `console.error`](https://github.com/facebook/react/blob/d0289c7e3a2dfc349dcce7f9eb3dee22464e97bd/packages/react-reconciler/src/ReactFiberErrorLogger.js#L86) which I'd like to prevent to keep the console clean from errors that are already \"caught\" in an error boundary.\r\n\r\nMaybe a condition on `capturedError.errorBoundaryFound` could prevent this logging?",
                "createdAt": "2019-03-08T20:11:45Z",
                "author": {
                  "login": "silverwind",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/115237?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15069",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Trivial point, but why must the render() return have the left paren on the same line?",
                "state": "CLOSED",
                "number": 15070,
                "body": "Haven't modern parsers progressed a little beyond that?",
                "createdAt": "2019-03-08T22:44:18Z",
                "author": {
                  "login": "jh-orange",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/2505617?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15070",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "useReducer's dispatch",
                "state": "OPEN",
                "number": 15073,
                "body": "useReducer's `dispatch()` function is not processing the action triggered by some of my components. I imported `useReducer` locally inside of each of my 3 components. The `dispatch()` inside the parent component is working but not in 2 child components. I tried to make the parent component the only source of `dispatch()` and pass it to the 2 child components as a prop (`props.dispatch`) but it didn't work as well.",
                "createdAt": "2019-03-09T07:53:00Z",
                "author": {
                  "login": "jstarnate",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/38130563?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15073",
                "labels": {
                  "edges": [
                    {
                      "node": {
                        "name": "Resolution: Needs More Information",
                        "color": "fffde7"
                      }
                    }
                  ]
                }
              }
            },
            {
              "node": {
                "title": "React.StrictMode combined with useState causes component to render twice",
                "state": "CLOSED",
                "number": 15074,
                "body": "**Do you want to request a *feature* or report a *bug*?**\r\nBug (maybe)\r\n\r\n**What is the current behavior?**\r\nIf wrapped in React.StrictMode and a function component contains a call to `useState`, the function (render) is called twice - even if the state setter is never called.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem.**\r\nhttps://codesandbox.io/s/lyw9514j4q\r\n(please see console)\r\n\r\n**What is the expected behavior?**\r\nI would expect it to only render once.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.8.3 in Chrome on macOS Mojave; requires hooks so not tested with previous versions.\r\n\r\nThis may be related to https://github.com/facebook/react/issues/12961 - but note that nowhere am I setting state (only initializing it).\r\n\r\nIf this is expected behavior please feel free to close. Thank you!",
                "createdAt": "2019-03-09T15:57:06Z",
                "author": {
                  "login": "TrueWill",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/1709726?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15074",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "shallow renderer: when getDerivedStateFromProps changes state, componentDidUpdate is not called.",
                "state": "OPEN",
                "number": 15075,
                "body": "Demonstrated in https://github.com/airbnb/enzyme/pull/2027 - when gDSFP returns a state change, cDU does not seem to be called by the shallow renderer. I'm not sure how to make a simple test case; but the identical enzyme tests pass for `mount` (ie, when using React itself) but fail for `shallow` (when using the shallow renderer). enzyme doesn't have any logic for calling or interacting with `getDerivedStateFromProps`, so I suspect it's not an issue with enzyme (but it might be!)",
                "createdAt": "2019-03-09T22:31:03Z",
                "author": {
                  "login": "ljharb",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/45469?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15075",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Add React.use(customHook) wrapper for improving DX",
                "state": "CLOSED",
                "number": 15076,
                "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nFeature\r\n\r\n**What is the current behavior?**\r\n\r\n\"A custom Hook is a JavaScript function whose name starts with `use`...\",  \r\nso `useFriendStatus` is a \"potential\" custom hook.\r\n\r\nCopying from https://reactjs.org/docs/hooks-custom.html,\r\n\r\n> Q. Do I have to name my custom Hooks starting with “use”?\r\nA. Please do. This convention is very important. Without it, we wouldn’t be able to automatically check for violations of rules of Hooks because we couldn’t tell if a certain function contains calls to Hooks inside of it.\r\n\r\ne.g. `const isAwesome = useAwesomeLogic(props.id);`\r\n\r\n**What is the expected behavior?**\r\n\r\nIt'd be great if we could remove the \"ambiguity\" around whether a function used in a component is a hook or not, by adding a wrapper method in React which just returns the function passed in the argument. Think of it as syntactic sugar for expressing that a certain method is being \"used\" as a hook.\r\n\r\ne.g.\r\n```\r\nconst isAwesome = React.use(awesomeLogic(props.id));\r\nor\r\nconst isAwesome = React.useCustom(awesomeLogic(props.id));\r\nor\r\nconst isAwesome = React.useCustomHook(awesomeLogic(props.id));\r\n```\r\n\r\nI started learning React last week, so please ignore this if I missed something trivial or it just doesn't make any sense. 😅\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue?**\r\n\r\n16.8+",
                "createdAt": "2019-03-10T09:50:16Z",
                "author": {
                  "login": "swapagarwal",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/2833845?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15076",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "production build + SSR + hooks = error",
                "state": "OPEN",
                "number": 15077,
                "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\n\r\nbug\r\n\r\n**What is the current behavior?**\r\n\r\nusing `useContext` or `useState`  hooks in the production version of react throws error #307 (Hooks can only be called inside the body of a function component)\r\n\r\n**reproduction**\r\n\r\nhttps://codesandbox.io/s/w234280ox5\r\n\r\nNotice when using the development version it renders as expected.\r\n\r\nIn line 4 change the import to development \r\n\r\n**What is the expected behavior?**\r\n\r\nto render without throwing. \r\n\r\nreact/react-dom version `16.8.3`\r\n\r\n",
                "createdAt": "2019-03-10T12:40:39Z",
                "author": {
                  "login": "salzhrani",
                  "avatarUrl": "https://avatars2.githubusercontent.com/u/302896?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15077",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "Consider exporting `batchedUpdates` from React",
                "state": "OPEN",
                "number": 15080,
                "body": "ReactDOM and React Native both currently export an `unstable_batchedUpdates` API.  Because batching is a renderer/reconciliation-level concern, this API is exported by the renderer packages, not the core `react` package.\r\n\r\nThe React team has recently encouraged the Redux team to make use of `unstable_batchedUpdates` in React-Redux.  However, this becomes complicated due to how that API is being exported.\r\n\r\nIt's possible to deal with this at the bundler level.  Some experimentation shows that creating an alternate file with a `.native.js` extension will cause that to be picked up by the RN bundler, as in this example:\r\n\r\n```js\r\n// batch.js\r\nimport {unstable_batchedUpdates} from \"./react-dom\";\r\n\r\n// ./react-dom.js\r\nexport {unstable_batchedUpdates} from \"react-dom\"\r\n\r\n// ./react-dom.native.js\r\nexport {unstable_batchedUpdates} from \"react-native\"\r\n```\r\n\r\nHowever, this does not handle the case where an alternative React renderer is being used.  The [list of other React renderers is continuing to grow](https://github.com/chentsulin/awesome-react-renderer), which means that a React library that needs batching would have to deal with that situation in some way.  This becomes extremely complicated when you start considering variations on bundlers, module formats, and build environments.\r\n\r\nIt would be extremely beneficial if the React core itself exported a `batchedUpdates` API.  That could default to being a noop wrapper like `(callback) => callback()` if no suitable implementation was available.\r\n\r\nI know that `unstable_batchedUpdates()` is, uh... \"unstable\".  However, the React team has stated that \"it's the most stable of the unstable APIs\", and \"half of Facebook depends on this\".\r\n\r\nI think it would really help the ecosystem if some form of this API was solidified and exported from the core React package itself.",
                "createdAt": "2019-03-10T23:51:41Z",
                "author": {
                  "login": "markerikson",
                  "avatarUrl": "https://avatars1.githubusercontent.com/u/1128784?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15080",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "eslint-react-hooks: should we enforce to use React.useMemo if there is no state hooks?",
                "state": "OPEN",
                "number": 15081,
                "body": "1. Regarding the performance optimization, should we always use React.useMemo in case there is no state hooks inside a function component?\r\n2. If the answer is yes, can we use some eslint rules to make sure everyone do it?",
                "createdAt": "2019-03-11T02:26:13Z",
                "author": {
                  "login": "BigYu",
                  "avatarUrl": "https://avatars0.githubusercontent.com/u/5934735?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15081",
                "labels": {
                  "edges": []
                }
              }
            },
            {
              "node": {
                "title": "shrinking nav onscroll text behind it",
                "state": "OPEN",
                "number": 15082,
                "body": "When text scrolls behind the navbar I created the navbar has a spaz attack. I am using create-react-app, styled-components, and react-router-dom. I create a sample of the issue in code sandbox https://codesandbox.io/s/r06jv3yoqp?fontsize=14 ",
                "createdAt": "2019-03-11T06:56:25Z",
                "author": {
                  "login": "brickmaker17",
                  "avatarUrl": "https://avatars3.githubusercontent.com/u/34072446?v=4"
                },
                "assignees": {
                  "nodes": []
                },
                "url": "https://github.com/facebook/react/issues/15082",
                "labels": {
                  "edges": []
                }
              }
            }
          ]
        }
      }
    }
  }