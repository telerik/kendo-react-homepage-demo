{
  "data": {
    "repository": {
      "issues": {
        "edges": [
          {
            "node": {
              "title": "Handling non Error instance errors is broken",
              "state": "CLOSED",
              "number": 1393,
              "body": "Currently graphql handles resolve error as follows:\r\n```\r\nfunction asErrorInstance(error) {\r\n  return error instanceof Error ? error : new Error(error || undefined);\r\n}\r\n```\r\nThis is problematic because if the error is not a string or an instance of `Error` then the error will be serialized as `[object Object]` and the workaround (filling up the code with try-catch statements and converting them to `Error` instances) defeats the purpose of handling errors at the graphql library level.\r\n\r\nPlease provide a configurable mechanism for dealing with errors.",
              "createdAt": "2018-06-15T07:47:38Z",
              "author": {
                "login": "geogeim",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/16436533?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1393",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "enhancement",
                      "color": "84b6eb"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "14.0.0-rc.2 cannot be used in Angular app",
              "state": "CLOSED",
              "number": 1394,
              "body": "I tried to use the prerelease version in an Angular 6 app, but the app could not be compiled:\r\n\r\n<pre>\r\nERROR in ./node_modules/graphql/index.mjs\r\n34:0-49 Can't reexport the named export 'graphql' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n34:0-49 Can't reexport the named export 'graphqlSync' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'DEFAULT_DEPRECATION_REASON' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'GraphQLBoolean' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'GraphQLDeprecatedDirective' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'GraphQLDirective' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'GraphQLEnumType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'GraphQLFloat' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'GraphQLID' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'GraphQLIncludeDirective' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'GraphQLInputObjectType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'GraphQLInt' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'GraphQLInterfaceType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'GraphQLList' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'GraphQLNonNull' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'GraphQLObjectType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'GraphQLScalarType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'GraphQLSchema' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'GraphQLSkipDirective' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'GraphQLString' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'GraphQLUnionType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'SchemaMetaFieldDef' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'TypeKind' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'TypeMetaFieldDef' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'TypeNameMetaFieldDef' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export '__Directive' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export '__DirectiveLocation' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export '__EnumValue' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export '__Field' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export '__InputValue' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export '__Schema' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export '__Type' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export '__TypeKind' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'assertAbstractType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'assertCompositeType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'assertEnumType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'assertInputObjectType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'assertInputType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'assertInterfaceType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'assertLeafType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'assertListType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'assertNamedType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'assertNonNullType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'assertNullableType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'assertObjectType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'assertOutputType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'assertScalarType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'assertType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'assertUnionType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'assertValidSchema' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'assertWrappingType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'getNamedType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'getNullableType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'introspectionTypes' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isAbstractType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isCompositeType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isDirective' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isEnumType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isInputObjectType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isInputType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isInterfaceType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isIntrospectionType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isLeafType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isListType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isNamedType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isNonNullType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isNullableType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isObjectType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isOutputType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isScalarType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isSchema' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isSpecifiedDirective' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isSpecifiedScalarType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isUnionType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'isWrappingType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'specifiedDirectives' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'specifiedScalarTypes' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n36:0-47:50 Can't reexport the named export 'validateSchema' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n49:0-52:117 Can't reexport the named export 'BREAK' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n49:0-52:117 Can't reexport the named export 'DirectiveLocation' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n49:0-52:117 Can't reexport the named export 'Kind' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n49:0-52:117 Can't reexport the named export 'Source' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n49:0-52:117 Can't reexport the named export 'TokenKind' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n49:0-52:117 Can't reexport the named export 'getLocation' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n49:0-52:117 Can't reexport the named export 'getVisitFn' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n49:0-52:117 Can't reexport the named export 'parse' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n49:0-52:117 Can't reexport the named export 'parseType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n49:0-52:117 Can't reexport the named export 'parseValue' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n49:0-52:117 Can't reexport the named export 'print' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n49:0-52:117 Can't reexport the named export 'visit' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n49:0-52:117 Can't reexport the named export 'visitInParallel' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n49:0-52:117 Can't reexport the named export 'visitWithTypeInfo' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n54:0-101 Can't reexport the named export 'defaultFieldResolver' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n54:0-101 Can't reexport the named export 'execute' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n54:0-101 Can't reexport the named export 'getDirectiveValues' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n54:0-101 Can't reexport the named export 'responsePathAsArray' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n55:0-68 Can't reexport the named export 'createSourceEventStream' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n55:0-68 Can't reexport the named export 'subscribe' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'FieldsOnCorrectTypeRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'FragmentsOnCompositeTypesRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'KnownArgumentNamesRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'KnownDirectivesRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'KnownFragmentNamesRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'KnownTypeNamesRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'LoneAnonymousOperationRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'NoFragmentCyclesRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'NoUndefinedVariablesRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'NoUnusedFragmentsRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'NoUnusedVariablesRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'OverlappingFieldsCanBeMergedRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'PossibleFragmentSpreadsRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'ProvidedRequiredArgumentsRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'ScalarLeafsRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'SingleFieldSubscriptionsRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'UniqueArgumentNamesRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'UniqueDirectivesPerLocationRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'UniqueFragmentNamesRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'UniqueInputFieldNamesRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'UniqueOperationNamesRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'UniqueVariableNamesRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'ValidationContext' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'ValuesOfCorrectTypeRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'VariablesAreInputTypesRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'VariablesInAllowedPositionRule' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'specifiedRules' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n57:0-59:675 Can't reexport the named export 'validate' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n61:0-64 Can't reexport the named export 'GraphQLError' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n61:0-64 Can't reexport the named export 'formatError' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n61:0-64 Can't reexport the named export 'printError' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'BreakingChangeType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'DangerousChangeType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'TypeInfo' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'assertValidName' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'astFromValue' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'buildASTSchema' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'buildClientSchema' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'buildSchema' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'coerceValue' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'concatAST' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'doTypesOverlap' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'extendSchema' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'findBreakingChanges' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'findDangerousChanges' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'findDeprecatedUsages' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'getDescription' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'getIntrospectionQuery' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'getOperationAST' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'getOperationRootType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'introspectionFromSchema' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'introspectionQuery' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'isEqualType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'isTypeSubTypeOf' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'isValidJSValue' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'isValidLiteralValue' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'isValidNameError' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'lexicographicSortSchema' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'printIntrospectionSchema' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'printSchema' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'printType' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'separateOperations' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'typeFromAST' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'valueFromAST' from non EcmaScript module (only default export is available)\r\nERROR in ./node_modules/graphql/index.mjs\r\n63:0-96:42 Can't reexport the named export 'valueFromASTUntyped' from non EcmaScript module (only default export is available)\r\n<pre>\r\n",
              "createdAt": "2018-06-18T14:23:05Z",
              "author": {
                "login": "Ben305",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/2217367?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1394",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Problem with GraphQLList",
              "state": "CLOSED",
              "number": 1403,
              "body": "I am getting this error \r\nError: Expected [object Object] to be a GraphQL type. \r\nwhenever I try to use GraphQLList in this type file and this is how my type file is\r\n\r\nconst graphql = require(\"graphql\");\r\nconst ProjectType = require(\"./projectType\");\r\n\r\nconst { GraphQLObjectType, GraphQLString, GraphQLList } = graphql;\r\n\r\nconst UserType = new GraphQLObjectType({\r\n  name: \"UserType\",\r\n  fields: () => ({\r\n    id: { type: GraphQLString },\r\n    name: { type: GraphQLString },\r\n    githubProfile: { type: GraphQLString },\r\n    username: { type: GraphQLString },\r\n    password: { type: GraphQLString },\r\n    email: { type: GraphQLString },\r\n    projects: {\r\n      type: new GraphQLList(ProjectType),\r\n      resolve(parentValues, args) {\r\n        return new Promise((resolve, reject) => {\r\n          User.findById(parentValues.id)\r\n            .populate(\"projects\")\r\n            .then(user => {\r\n              resolve(user.projects);\r\n            });\r\n        });\r\n      }\r\n    },\r\n\r\n    \r\n\r\n  })\r\n});\r\n\r\nmodule.exports = UserType;\r\n\r\n\r\nThis question is also stackoverflow but no one was able to answer to so I am opening it here.\r\nhttps://stackoverflow.com/questions/50905175/error-expected-object-object-to-be-a-graphql-type\r\nThanks in advance\r\n",
              "createdAt": "2018-06-23T11:16:20Z",
              "author": {
                "login": "highskillzz",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/20688709?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1403",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "CATs support",
              "state": "OPEN",
              "number": 1404,
              "body": "[GraphQL Compatibility Acceptance Tests](https://github.com/graphql-cats/graphql-cats) (or `graphql-cats`) is a project that aims to provide a set of compatibility acceptance tests for libraries that implement the [GraphQL specification](https://github.com/facebook/graphql). \r\n\r\nWe discussed this at several [GraphQL WG](https://github.com/graphql/graphql-wg) meetings and there was a general consensus on implementing a graphql-cats diver for reference implementation as well. \r\n\r\nIf somebody is interested in working on it, we would be happy to support you along the way. You can join our [gitter chat](https://gitter.im/graphql-cats/graphql-cats?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge) if you have some questions or would like to discuss something. Also feel free to [create issues](https://github.com/graphql-cats/graphql-cats/issues/new) and PRs for graphql-cats. (I would be happy to work on the reference implementation driver myself, but due to some time constraints I can't dedicate enough time for it).\r\n\r\n[\"Example Driver Implementation\"](https://github.com/graphql-cats/graphql-cats#example-driver-implementation) provides some guidance for a driver implementation, although all examples are written in scala. I hope that as soon as we have driver for a reference implementation, we can rewrite this section of the docs and provide all examples in JavaScript.",
              "createdAt": "2018-06-23T20:16:18Z",
              "author": {
                "login": "OlegIlyenko",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/156569?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1404",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "help wanted",
                      "color": "159818"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Default values for Non Null types",
              "state": "CLOSED",
              "number": 1405,
              "body": "When supplying a default value for a required field, it is not used and instead throws a validation error.\r\n\r\n```js\r\nconst { graphql, buildSchema } = require('graphql')\r\n\r\nconst schema = buildSchema(`\r\ntype Query {\r\n  hello(x: Int! = 42): Int\r\n}\r\n`)\r\n\r\nconst root = {\r\n  hello: (args) => args.x\r\n}\r\n\r\ngraphql(schema, '{ hello }', root).then(console.log)\r\n``` \r\n\r\nProduces:\r\n`GraphQLError: Field \"hello\" argument \"x\" of type \"Int!\" is required but not provided.`",
              "createdAt": "2018-06-25T16:29:33Z",
              "author": {
                "login": "benwaffle",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/1713819?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1405",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "bug",
                      "color": "fc2929"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Website broken",
              "state": "CLOSED",
              "number": 1407,
              "body": "https://graphql.org goes into an infinite redirect loop... totally unusable.",
              "createdAt": "2018-06-26T15:31:06Z",
              "author": {
                "login": "murrayju",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/508461?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1407",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "ObjectType implementing InterfaceType doesn't end up in the schema",
              "state": "CLOSED",
              "number": 1413,
              "body": "Consider this code:\r\n\r\n```js\r\nconst {\r\n  GraphQLID,\r\n  GraphQLInterfaceType,\r\n  GraphQLNonNull,\r\n  GraphQLObjectType,\r\n  GraphQLSchema,\r\n  printSchema,\r\n} = require('graphql')\r\n\r\nconst NodeType = new GraphQLInterfaceType({\r\n  name: 'Node',\r\n  fields: {\r\n    id: {\r\n      type: new GraphQLNonNull(GraphQLID),\r\n    },\r\n  },\r\n})\r\n\r\nclass Car {} // Kept brief for demo purpose\r\n\r\nconst CarType = new GraphQLObjectType({\r\n  name: 'Car',\r\n  interfaces: [NodeType],\r\n  fields: {\r\n    id: {\r\n      type: new GraphQLNonNull(GraphQLID),\r\n    },\r\n  },\r\n  isTypeOf: value => value instanceof Car,\r\n})\r\n\r\nconst schema = new GraphQLSchema({\r\n  query: new GraphQLObjectType({\r\n    name: 'Query',\r\n    fields: {\r\n      node: {\r\n        type: NodeType,\r\n        args: {\r\n          id: {\r\n            type: new GraphQLNonNull(GraphQLID),\r\n          },\r\n        },\r\n        resolve: () => new Car(),\r\n      },\r\n    },\r\n  }),\r\n})\r\n\r\nconsole.log(printSchema(schema))\r\n```\r\n\r\nWhich gives this output:\r\n\r\n```gql\r\ninterface Node {\r\n  id: ID!\r\n}\r\n\r\ntype Query {\r\n  node(id: ID!): Node\r\n}\r\n```\r\n\r\nThis is a very simplified demo of the problem I'm running in to. Cars (in this case) don't have their own queries so they don't end up in the schema even though you can query for them by the interface they implement.\r\n\r\nHow can I make them appear in the printed schema?",
              "createdAt": "2018-07-09T11:05:08Z",
              "author": {
                "login": "CrocoDillon",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/3235119?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1413",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "documentation",
                      "color": "bfe5bf"
                    }
                  },
                  {
                    "node": {
                      "name": "help wanted",
                      "color": "159818"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "master",
              "state": "CLOSED",
              "number": 1415,
              "body": "# Questions regarding how to use GraphQL\r\n\r\nWe want to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track bugs and features that affect development.\r\n\r\nIf you have a question on how to use GraphQL, please [post it to Stack Overflow](https://stackoverflow.com/questions/ask?tags=graphql) with the tag [#graphql](http://stackoverflow.com/questions/tagged/graphql).\r\n\r\nPlease do not post general questions directly as GitHub issues. They may sit for weeks unanswered, or may be spontaneously closed without answer.\r\n\r\n# Reporting issues with GraphQL.js\r\n\r\nBefore filing a new issue, make sure an issue for your problem doesn't already exist.\r\n\r\nThe best way to get a bug fixed is to provide a *pull request* with a simplified failing test case (or better yet, include a fix).\r\n\r\n# Feature requests\r\n\r\nGraphQL.js is a reference implementation of the [GraphQL specification](https://github.com/facebook/graphql). To discuss new features which are not GraphQL.js specific and fundamentally change the way GraphQL works, open an issue against the specification.\r\n\r\n# Security bugs\r\n\r\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe disclosure of security bugs. With that in mind, please do not file public issues; go through the process outlined on that page.\r\n",
              "createdAt": "2018-07-11T20:51:59Z",
              "author": {
                "login": "ryangueraa",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/35643741?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1415",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "[Feature requests]Allow resolve function returns a custom deferred object in order to do decent query optimization.",
              "state": "OPEN",
              "number": 1416,
              "body": "I have read https://github.com/graphql/graphql-js/issues/26 , https://github.com/graphql/graphql-js/issues/700 and https://github.com/graphql/graphql-js/pull/304 . It seems like there is no well-agreed way to combine GraphQL and database. GraphQL.js loses a certain amount of chances to do query optimization. Am I right? I have a simple proposal. In the `resolve` function, we can return a DeferredObject instead of a normal JS object or Promise. Only in the very last moment, the deferred object queries the DB. Does this make sense?\r\n\r\nThe special DeferredObjects links with each other. So the minimal query fields needed can be detected. GraphQL.js may finally call `await someDeferredObject.excute()` multiple times. Since we have ES6 getter and setter. I think it may be quite seamless to current code base.",
              "createdAt": "2018-07-12T18:34:22Z",
              "author": {
                "login": "JimChengLin",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/16563096?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1416",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Typed arguments in resolvers",
              "state": "OPEN",
              "number": 1419,
              "body": "It's kinda feature request. I've [posted a question](https://stackoverflow.com/questions/51337630/detecting-argument-types-in-resolver) how to do this using existing tools (btw I'l be very grateful if someone can help with this), but I think this really should be in a spec/ref implementation.\r\n\r\nResolver accepts arguments as plain javascript object, already combined from inline arguments and variables. But GraphQL is strongly typed and this benefit doesn't work here. I get arguments, but I don't know types of these arguments. Getting types of args in resolver is useful because it gives more possibilities to process input. To validate or transform it based on types. This is especially useful in scenarios when you have deeply nested input with relations, multiple named input types, repeated types (lists of objects), etc.\r\n\r\nAnd I see two variants of improving this:\r\n1. Change plain object in resolver args to special object with types mappings\r\n2. Add a function to graphql core that given args and resolverInfo will return type map",
              "createdAt": "2018-07-14T10:46:54Z",
              "author": {
                "login": "terion-name",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/1060205?v=4"
              },
              "assignees": {
                "nodes": [
                  {
                    "name": "Terion",
                    "avatarUrl": "https://avatars0.githubusercontent.com/u/1060205?v=4"
                  }
                ]
              },
              "url": "https://github.com/graphql/graphql-js/issues/1419",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "enhancement",
                      "color": "84b6eb"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Setting type via object directly and object through a function has different results",
              "state": "CLOSED",
              "number": 1420,
              "body": "Hi,\r\n\r\nI'm not sure if this is a bug can't see any obvious reason as to why it wouldn't work, the other issue I'm facing is that I'm not getting any errors returns and just an empty object.\r\n\r\n```\r\n// works using module.exports = new GraphQLObjectType({...}); in ./type\r\nconst type = require('./type');\r\n\r\nmodule.exports = () => ({\r\n  object: {\r\n    type: type,\r\n    resolve: () => ({})\r\n  },\r\n});\r\n\r\n\r\n// does NOT work using module.exports = () => new GraphQLObjectType({...}); in ./type\r\nconst type = require('./type');\r\n\r\nmodule.exports = () => ({\r\n  object: {\r\n    type: type(),\r\n    resolve: () => ({})\r\n  },\r\n});\r\n```\r\n\r\nBeing able to use a function would be ideal as I can then pass a database connection through which is proving difficult with a \"static\" object.\r\nIs there any obvious reason why this wouldn't work as they both seem to return exactly the same object when creating a schema, but the schema creation fails.\r\n\r\nThanks,\r\nGary",
              "createdAt": "2018-07-16T08:44:43Z",
              "author": {
                "login": "garyrutland",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/3715101?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1420",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Parser for Language Services and Editor Tooling",
              "state": "OPEN",
              "number": 1426,
              "body": "Hello.\r\n\r\nI was wondering if supporting/enabling editor tooling and language services is in the scope of this project.\r\nMore specifically I was wondering if **having a Parser that has low level capabilities for supporting editor tooling is within the scope of this project.**\r\n\r\nSuch capabilities may include:\r\n* Fault Tolerance and reporting multiple syntax errors to the user.\r\n* Syntactic Content Assist (providing the next possible kind of Token).\r\n* **Lossless** output format (Know where every comma and parenthesis are in the text).\r\n* Re-useable parser that does not only output the compiler AST, meaning it can be customized to output different kinds of outputs for different needs.\r\n\r\nI saw there is work done on the [graphql-language-service](https://github.com/graphql/graphql-language-service) And there there seems to be a [separate parser](https://github.com/graphql/graphql-language-service/tree/master/packages/parser) implemented there.\r\n\r\nCheers.\r\nShahar.\r\n\r\n",
              "createdAt": "2018-07-18T19:42:34Z",
              "author": {
                "login": "bd82",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/4233843?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1426",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "needs exploration",
                      "color": "fbca04"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "merge ast trees",
              "state": "OPEN",
              "number": 1428,
              "body": "# Feature request\r\n\r\nAnother feature that is extremely useful and utils are lacking it: merging ast trees.\r\n\r\nPrimary use case: merging two queries (selections) to dynamically construct queries. There are plenty of cases where it is needed, mainly in libraries and in cases of  graphql to graphql communication.\r\n\r\nPS\r\nIt would be great if somebody can say how to do this properly now (simple deep merge doesn't wotk properly)",
              "createdAt": "2018-07-21T14:25:22Z",
              "author": {
                "login": "terion-name",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/1060205?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1428",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "help wanted",
                      "color": "159818"
                    }
                  },
                  {
                    "node": {
                      "name": "proposal",
                      "color": "1d76db"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Please make subscription value structure consistent with query value structure",
              "state": "CLOSED",
              "number": 1433,
              "body": "So imagine the following basic schema:\r\n\r\n```graphql\r\ntype Query {\r\n  foo(tag: String): MetadataItem\r\n}\r\n\r\ntype Subscription {\r\n  foo(tag: String): MetadataItem\r\n}\r\n```\r\nMy resolver for `Query.foo` can return a `Promise<MetadataItem>`.\r\nYou would think my `subscribe` resolver could return an `AsyncIterable<MetadataItem>`.\r\nBut noooo...\r\nFor whatever reason it has to return an `AsyncIterable<{foo: MetadataItem}>`.\r\nWhy do I have to wrap the values I yield in an object?\r\nIs there a good reason for this or is it just a mistake?\r\n\r\nThis is really annoying and it always trips me up.  Why were subscriptions designed this way instead of being more consistent with queries?  I feel very angry about how often I have had to debug issues stemming from this, because it's just not an intuitive inconsistency.  It's very easy to forget about.\r\n\r\nGraphQL could so easily wrap the values I yield in an object with the field name, the only reason I can imagine that it doesn't is some performance nitpick.",
              "createdAt": "2018-07-26T03:52:26Z",
              "author": {
                "login": "jedwards1211",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/1448194?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1433",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Improve error for \"Subscription field must return Async Iterable. Received: undefined\"",
              "state": "OPEN",
              "number": 1442,
              "body": "The error thrown \"Subscription field must return Async Iterable. Received: undefined\" should include where in the schema it called the subscription field and it returned undefined. ",
              "createdAt": "2018-07-31T19:02:17Z",
              "author": {
                "login": "thomassuckow",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/3100037?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1442",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "enhancement",
                      "color": "84b6eb"
                    }
                  },
                  {
                    "node": {
                      "name": "help wanted",
                      "color": "159818"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Inconsistent definition of value nodes",
              "state": "CLOSED",
              "number": 1461,
              "body": "I noticed that \"value nodes\" are defined differently in language/ast and language/predicates:\r\n\r\n```\r\nexport type ValueNode =\r\n  | VariableNode  // <-- missing in isValueNode\r\n  | IntValueNode\r\n  | FloatValueNode\r\n  | StringValueNode\r\n  | BooleanValueNode\r\n  | NullValueNode\r\n  | EnumValueNode\r\n  | ListValueNode\r\n  | ObjectValueNode;\r\n```\r\n```\r\nexport function isValueNode(node: ASTNode): boolean %checks {\r\n  return (\r\n    node.kind === Kind.INT ||\r\n    node.kind === Kind.FLOAT ||\r\n    node.kind === Kind.STRING ||\r\n    node.kind === Kind.BOOLEAN ||\r\n    node.kind === Kind.NULL ||\r\n    node.kind === Kind.ENUM ||\r\n    node.kind === Kind.LIST ||\r\n    node.kind === Kind.OBJECT ||\r\n    node.kind === Kind.OBJECT_FIELD   // <-- missing in ValueNode\r\n  );\r\n}\r\n```\r\n\r\nShouldn't these two definitions be consistent with each other?",
              "createdAt": "2018-08-11T14:07:18Z",
              "author": {
                "login": "Cito",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/464599?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1461",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "printType function to get GraphQLSchema object as a query string",
              "state": "CLOSED",
              "number": 1464,
              "body": "Hi everyone, \r\nI've been struggling to mix Graphql query language with `GraphQLObjectType`  in `makeExecutableSchema` and I realized at the moment there is not any neat way to do so. \r\n\r\nHowever, there is a function to print the schema object which is `printSchema` and I wonder if there is any functionality like a `printType` function or any other solution to implement such a transformation from `GraphQLObjectType` to Graphql query language?\r\n\r\nThanks",
              "createdAt": "2018-08-13T07:36:45Z",
              "author": {
                "login": "PedramMarandi",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/7813872?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1464",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Excessive number of requests. Has to be a bug",
              "state": "CLOSED",
              "number": 1468,
              "body": "My graphql setup file looks like below\r\n\r\n```\r\n    app.use((req, res, next) => {\r\n        logger.entry('info', req); //LOG HERE - It's the first ever middleware\r\n        next();\r\n    });\r\n    app.use(bodyParser.json());\r\n    app.use(bodyParser.urlencoded({ extended: true }));\r\n    app.use(express.static('public'));\r\n    \r\n    app.use('/graphql',\r\n        authMiddleware,\r\n        apolloUploadExpress({\r\n            uploadDir: path.resolve(__dirname, 'public', 'img'),\r\n        }),\r\n        graphqlExpress(req => ({\r\n            schema: executableSchema,\r\n            context: {\r\n                ...req.user,\r\n                connection: {\r\n                    remoteAddress: req.connection.remoteAddress,\r\n                },\r\n                headers: {\r\n                    ...req.headers,\r\n                },\r\n                postLoader: new DataLoader(keys => batches.batchPosts(keys, req)),\r\n                commentLoader:new DataLoader(keys => batches.batchComments(keys, req)),\r\n                commentCommentLoader: new DataLoader(keys => batches.batchComments(keys, req, true)),\r\n                imageLoader:new DataLoader(keys => batches.batchPostImages(keys, req)),\r\n                hashTagLoader:new DataLoader(keys => batches.batchPostHashTags(keys, req)),\r\n                postLikableLoader:new DataLoader(keys => batches.batchPostLikables(keys, req)),\r\n                postDislikableLoader:new DataLoader(keys => batches.batchPostLikables(keys, req, false)),\r\n                postFactcheckLoader:new DataLoader(keys => batches.batchFactcheckables(keys, req)),\r\n                postFollowingLoader: new DataLoader(keys => batches.batchPostFollowing(keys, req)),\r\n                commentLikeableLoader:new DataLoader(keys => batches.batchCommentLikable(keys, req)),\r\n                commentDislikeableLoader:new DataLoader(keys => batches.batchCommentLikable(keys, req, false))\r\n            },\r\n            formatError,\r\n        })));\r\n\r\n```\r\nI have dataloader properly configured and working. However, the request was still taking too long to load mere 14 posts with simple texts so I tried logging the entry of the request and I get below \r\n\r\n```\r\n    2018-08-13T19:07:07.091Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.102Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.108Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.111Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.111Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.111Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.113Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.114Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.115Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.115Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.115Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.118Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.121Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.121Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.121Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.124Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.127Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.127Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.127Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.127Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.130Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.130Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.131Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.131Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.133Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.133Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.134Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n    2018-08-13T19:07:07.134Z [ info ] #ENTRY# IP:127.0.0.1 Route:undefined AuthToken:undefined RefreshToken:undefined\r\n```\r\n\r\nI get slightly over 30 request for a single request that I try to achieve. I thought it was the schema nesting problem; however, even after I have deleted all my field request except for ID - so definitely only single request is required, I still have 28 requests hitting the server. It does not seem normal at all and I think my server would pick up a lot more speed if I can reduce these unnecessary requests. Can someone help me or point me to right direction please?\r\n\r\nBelow is an example that causes 20+ request with only one field request.\r\n\r\n```\r\n    import gql from 'graphql-tag';\r\n    \r\n    export default gql`\r\n        query paginatePosts($count:Int, $after:String){\r\n          paginatePosts(count:$count, after:$after){\r\n              id\r\n          }\r\n        }\r\n    `\r\n```",
              "createdAt": "2018-08-13T19:13:32Z",
              "author": {
                "login": "serendipity1004",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/20388249?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1468",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "GraphQL issue with custom type",
              "state": "CLOSED",
              "number": 1469,
              "body": "Hi I am learning to use graphql and was facing an issue in mutation I am getting this error:\r\n**Error: Mutation.signup field type must be Output Type but got: [object Object].** \r\nwhenever I am defining mutation like this.\r\n\r\nuser_type.js\r\n```js\r\nconst graphql = require('graphql');\r\nconst {GraphQLObjectType,GraphQLString} = graphql;\r\n\r\nconst UserType = new GraphQLObjectType({\r\n  name : 'UserType',\r\n  fields : {\r\n    email : { type : GraphQLString }\r\n  }\r\n});\r\n\r\nmodule.expots = UserType;\r\n```\r\nmutation.js\r\n```js\r\nconst graphql = require('graphql');\r\nconst {\r\n  GraphQLObjectType,\r\n  GraphQLString\r\n} = graphql;\r\nconst UserType = require('./types/user_type');\r\nconst AuthService = require('../services/auth');\r\n\r\nconst mutation = new GraphQLObjectType({\r\n  name : 'Mutation',\r\n  fields : {\r\n    signup : {\r\n      type : UserType,\r\n      args : {\r\n        email : { type : GraphQLString },\r\n        password : { type : GraphQLString }\r\n      },\r\n      resolve(parentValue, { email, password}, req){\r\n        return AuthService.signup({ email, password, req })\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nmodule.exports = mutation;\r\n```\r\nand if I copy paste the code of user_type.js to mutation.js it is working fine. I am not able to understand why it is behaving like this.\r\n\r\nThis is the code which is working.\r\nmutation.js\r\n```js\r\nconst graphql = require('graphql');\r\nconst {\r\n  GraphQLObjectType,\r\n  GraphQLString\r\n} = graphql;\r\n//const UserType = require('./types/user_type');\r\nconst AuthService = require('../services/auth');\r\n\r\nconst UserType = new GraphQLObjectType({\r\n  name : 'UserType',\r\n  fields : {\r\n    email : { type : GraphQLString }\r\n  }\r\n});\r\n\r\nconst mutation = new GraphQLObjectType({\r\n  name : 'Mutation',\r\n  fields : {\r\n    signup : {\r\n      type : UserType,\r\n      args : {\r\n        email : { type : GraphQLString },\r\n        password : { type : GraphQLString }\r\n      },\r\n      resolve(parentValue, { email, password}, req){\r\n        return AuthService.signup({ email, password, req })\r\n      }\r\n    }\r\n  }\r\n});\r\n\r\nmodule.exports = mutation;\r\n```\r\n\r\n\r\n",
              "createdAt": "2018-08-13T20:36:53Z",
              "author": {
                "login": "shriharidani",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/14224917?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1469",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "GraphQL returning empty response",
              "state": "CLOSED",
              "number": 1474,
              "body": "I am getting empty response from GraphQL server when connecting it with REST endpoint, however, I confirmed that I am getting response from REST endpoint. I have provided detailed explanation in SO.\r\n\r\nhttps://stackoverflow.com/questions/51913873/graphql-returning-empty-response/51920269",
              "createdAt": "2018-08-19T19:28:23Z",
              "author": {
                "login": "vishrantgupta",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/1741243?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1474",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Create custom Root Type",
              "state": "CLOSED",
              "number": 1475,
              "body": "Hi I wonder if it is possible to create custom Root Type in GraphQL as following with the \"Auth\" Root type : ​\r\n```\r\nmodule.exports = new GraphQLSchema({ \r\n    query : new GraphQLObjectType({ \r\n    name: \"Query\", \r\n    fields: queries\r\n     }), \r\n    mutation: new GraphQLObjectType({\r\n     name: \"Mutation\", \r\n    fields: mutations }),\r\n    auth: new GraphQLObjectType({\r\n     name: \"Auth\", \r\n    fields: auth })\r\n });\r\n\r\n```\r\nSeems my GraphQL server fails to support it so far,\r\n\r\nany hint would be great,\r\n\r\nthanks​",
              "createdAt": "2018-08-22T11:47:34Z",
              "author": {
                "login": "Hocoh",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/40642296?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1475",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "AST Printer vs Schema Printer?",
              "state": "CLOSED",
              "number": 1478,
              "body": "The schema printer renders description block strings differently than the AST printer renders block string descriptions. I imagine there are a few other differences between the printers as well. \r\n\r\nI'm implementing a GraphQL server based on GraphQL JS. For printing the schema, I first convert the schema to an AST, then re-use the AST printer. This means I have to modify some of the test cases because the implementation of the schema printer differs slightly (as in the case of descriptions) from the AST printer. \r\n\r\n***What is the rationale in GraphQL JS of having both a schema printer and an AST printer, and should GraphQL JS consider migrating to the use of the single AST printer (assuming there was a function to convert a schema to an AST)?***",
              "createdAt": "2018-08-24T04:33:19Z",
              "author": {
                "login": "craigsmitham",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/42036?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1478",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "needs exploration",
                      "color": "fbca04"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "\"one instance of graphql\" error when using esm package.",
              "state": "CLOSED",
              "number": 1479,
              "body": "When using `esm` package (https://github.com/standard-things/esm) even most simple package.json configurations (only dependancies are `esm` and `graphql-yoga`) results in the `Error: Cannot use GraphQLSchema \"[object Object]\" from another module or realm.` error when using imports.\r\n\r\n`node -r esm testWithImport.js` will fail while `node testWithRequire.js` and `node -r esm testWithRequire.js` will work.",
              "createdAt": "2018-08-24T10:45:03Z",
              "author": {
                "login": "Pokute",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/5271115?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1479",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "needs exploration",
                      "color": "fbca04"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "ExecutionResult type should have a generic type for its data property",
              "state": "CLOSED",
              "number": 1480,
              "body": "Today when you write a `mutation`, even if you provide generic types for it, the resulting object does not have `data` object strongly typed. Please see example:\r\n```ts\r\ntype CreateTodoResult = {\r\n  id: number;\r\n  text: string;\r\n  isDone: boolean;\r\n}\r\n\r\ntype CreateTodoMutation = {\r\n  __typename?: \"Mutation\";\r\n  createTodo: CreateTodoResult;\r\n}\r\n\r\nthis.apollo.mutate<CreateTodoMutation, {}>({ mutation }).subscribe(res => {\r\n  // res.data is of type any instead of CreateTodoMutation\r\n  console.log(res.data.createTodo)\r\n});\r\n```\r\nIn the example above `res.data` will be of type `any` instead of expected `CreateTodoMutation`.\r\nI can submit a PR fixing the issue if nobody has objections.",
              "createdAt": "2018-08-25T21:15:03Z",
              "author": {
                "login": "DmitryEfimenko",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/2098175?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1480",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Enable Flow in test files",
              "state": "OPEN",
              "number": 1484,
              "body": "Currently, tests are covering only runtime behavior and not testing Flow types.\r\nSo it's very easy to break Flow types for public APIs and have it to pass `yarn t`, e.g. https://github.com/graphql/graphql-js/pull/1483#discussion_r212811061",
              "createdAt": "2018-08-26T13:43:39Z",
              "author": {
                "login": "IvanGoncharov",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/8336157?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1484",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "enhancement",
                      "color": "84b6eb"
                    }
                  },
                  {
                    "node": {
                      "name": "help wanted",
                      "color": "159818"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Parser/Lexer error with an empty query type",
              "state": "CLOSED",
              "number": 1495,
              "body": "Hei,\r\n\r\nI have a very simple schema with only mutations. The server library I use requires a query type to be defined, so I defined an empty Query type.\r\n\r\nThis is my very simple schema:\r\n```\r\ntype Query {}\r\n```\r\n\r\nAnd the error when I try to parse it:\r\n\r\n```\r\nV:\\whatever\\node_modules\\graphql\\language\\parser.js:1299\r\n  throw (0, _error.syntaxError)(lexer.source, token.start, 'Expected ' + kind + ', found ' + (0, _lexer.getTokenDesc)(token));\r\n  ^\r\nSyntax Error: Expected Name, found }\r\n\r\nGraphQL request (1:13)\r\n1: type Query {}\r\n```\r\n\r\nGraphQL Version : 0.13.2",
              "createdAt": "2018-08-30T12:05:54Z",
              "author": {
                "login": "fungiboletus",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/45740?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1495",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "14.0.1 is missing on NPM",
              "state": "CLOSED",
              "number": 1512,
              "body": "Latest version on NPM:\r\nhttps://www.npmjs.com/package/graphql\r\n![image](https://user-images.githubusercontent.com/8336157/45181422-188a8500-b227-11e8-9d87-bb59ea241c34.png)\r\n\r\nThis happened because of this:\r\nhttps://travis-ci.org/graphql/graphql-js/jobs/424976995#L491-L493\r\n```\r\nAuthenticated with email lee@leebyron.com and API key ****************b8da\r\nNPM API key format changed recently. If your deployment fails, check your API key in ~/.npmrc.\r\nhttp://docs.travis-ci.com/user/deployment/npm/\r\n```\r\n\r\nDetails: https://blog.npmjs.org/post/175824896885/incident-report-npm-inc-operations-incident-of\r\n> As a precautionary measure, npm has revoked every access token that had been created prior to 2:30 pm UTC (7:30 am California time) today. This measure requires every registered npm user to re-authenticate to npmjs.com and generate new access tokens,",
              "createdAt": "2018-09-06T19:59:17Z",
              "author": {
                "login": "IvanGoncharov",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/8336157?v=4"
              },
              "assignees": {
                "nodes": [
                  {
                    "name": "Lee Byron",
                    "avatarUrl": "https://avatars3.githubusercontent.com/u/50130?v=4"
                  },
                  {
                    "name": "Matt Mahoney",
                    "avatarUrl": "https://avatars2.githubusercontent.com/u/1741248?v=4"
                  }
                ]
              },
              "url": "https://github.com/graphql/graphql-js/issues/1512",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "String coercion broken for Float Scalar type in 14.0.0",
              "state": "CLOSED",
              "number": 1513,
              "body": "I was noticing in the release notes that there is stricter coercion introduced with this release per the spec. But I believe there might be an issue with the Float scalar.\r\n\r\nPer the spec.\r\n\r\n> GraphQL servers may coerce non‐floating‐point internal values to Float when reasonable without losing information, otherwise they must raise a field error. Examples of this may include returning 1.0 for the integer number 1, or 123.0 for the string \"123\".\r\n\r\nTo my understanding, that is saying the Float scalar should handle a string that is a valid number such as \"123\". I'm receiving errors after upgrading when entering a value like that now. Is my understanding incorrect? \r\n\r\n\r\nStacktrace.\r\nTypeError: Float cannot represent non numeric value: \"500\"\r\n    at GraphQLScalarType.coerceFloat [as parseValue] (/Users/kylezinter/Developement/launchplan/api/node_modules/graphql/type/scalars.js:110:11)\r\n    at coerceValue (/Users/kylezinter/Developement/launchplan/api/node_modules/graphql/utilities/coerceValue.js:53:30)\r\n    at coerceValue (/Users/kylezinter/Developement/launchplan/api/node_modules/graphql/utilities/coerceValue.js:126:30)\r\n    at /Users/kylezinter/Developement/launchplan/api/node_modules/graphql/utilities/coerceValue.js:88:27\r\n    at Array.forEach (<anonymous>)\r\n    at forEach (/Users/kylezinter/Developement/launchplan/api/node_modules/iterall/index.js:83:25)\r\n    at coerceValue (/Users/kylezinter/Developement/launchplan/api/node_modules/graphql/utilities/coerceValue.js:87:28)\r\n    at coerceValue (/Users/kylezinter/Developement/launchplan/api/node_modules/graphql/utilities/coerceValue.js:40:12)\r\n    at coerceValue (/Users/kylezinter/Developement/launchplan/api/node_modules/graphql/utilities/coerceValue.js:126:30)\r\n    at getVariableValues (/Users/kylezinter/Developement/launchplan/api/node_modules/graphql/execution/values.js:85:54)\r\n    at buildExecutionContext (/Users/kylezinter/Developement/launchplan/api/node_modules/graphql/execution/execute.js:196:63)\r\n    at executeImpl (/Users/kylezinter/Developement/launchplan/api/node_modules/graphql/execution/execute.js:70:20)\r\n    at Object.execute (/Users/kylezinter/Developement/launchplan/api/node_modules/graphql/execution/execute.js:62:229)\r\n    at doRunQuery (/Users/kylezinter/Developement/launchplan/api/node_modules/apollo-server-core/dist/runQuery.js:124:42)\r\n    at /Users/kylezinter/Developement/launchplan/api/node_modules/apollo-server-core/dist/runQuery.js:21:56\r\n    at process._tickCallback (internal/process/next_tick.js:68:7)",
              "createdAt": "2018-09-06T21:23:33Z",
              "author": {
                "login": "kylezinter",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/3508358?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1513",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "[Feature Request] Resolver Middleware",
              "state": "OPEN",
              "number": 1516,
              "body": "I'm interested to hear how others feel about the idea of using middleware installed on resolver functions to allow all resolvers in a schema to perform common functionality.\r\n\r\nAs my schema grows I've found more and more of a need to add some of the same logic to all my resolvers. It would be nice if we could add some middleware that would be executed on resolvers in the schema when we go to execute the query. This could allow users to implement things like custom error handling, logging, and authorization on all resolvers without the need to add them to each resolver on the schema.\r\n",
              "createdAt": "2018-09-07T19:18:31Z",
              "author": {
                "login": "dereklavigne18",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/31934019?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1516",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "enhancement",
                      "color": "84b6eb"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Parser/Lexer error with an empty interface",
              "state": "CLOSED",
              "number": 1517,
              "body": "Related to https://github.com/graphql/graphql-js/issues/1495\r\n\r\nIs having empty interface in schema allowed?\r\n\r\n```gql\r\ninterface Node\r\n```\r\n\r\nI was wondering when [empty type](https://github.com/graphql/graphql-js/blob/master/src/language/__tests__/schema-kitchen-sink.graphql#L37) is possible, empty interface could be too. Thanks!",
              "createdAt": "2018-09-10T13:06:40Z",
              "author": {
                "login": "simPod",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/327717?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1517",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Unable to query for MongoDB ObjectIDs",
              "state": "CLOSED",
              "number": 1518,
              "body": "I recently updated from `0.13.2` to `14.0.2` which includes breaking changes.\r\n\r\nThis introduced errors with existing queries which include MongoDB Object Ids (probably from #1382):\r\n\r\n> ID cannot represent value: { _bsontype: \\\"ObjectID\\\", id: <Buffer 5b 96 3d bf 98 0a 04 09 85 c6 6e a1> }\r\n\r\nRepository with complete, minimal repeatable example [here](https://github.com/alexmcmillan/graphql-mongodb-query-fail-demo):\r\n\r\n```\r\nconst Thing = mongoose.model('Thing', new mongoose.Schema({\r\n  id: mongoose.Schema.Types.ObjectId,\r\n  name: String\r\n}));\r\n\r\nconst ThingType = new GraphQLObjectType({\r\n  name: 'thing',\r\n  fields: function () {\r\n    return {\r\n      id: { type: GraphQLID },\r\n      name: { type: GraphQLString }\r\n    }\r\n  }\r\n});\r\n\r\nconst RootMutation = new GraphQLObjectType({\r\n  name: 'CreateMutation',\r\n  fields: {\r\n    create: {\r\n      type: ThingType,\r\n      description: 'Create new thing',\r\n      args: {\r\n        name: {\r\n          name: 'Name of Thing',\r\n          type: new GraphQLNonNull(GraphQLString)\r\n        }\r\n      },\r\n      resolve: (root, args) => {\r\n        const newThing = new Thing({ name: args.name });\r\n        newThing.id = newThing._id;\r\n        return new Promise((res, rej) => {\r\n          newThing.save(err => {\r\n            if (err) return rej(err);\r\n            res(newThing);\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }\r\n});\r\n```",
              "createdAt": "2018-09-10T20:25:36Z",
              "author": {
                "login": "alexmcmillan",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/1639176?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1518",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Feature request: flag for old, deprecated variable scalar coercion behavior",
              "state": "CLOSED",
              "number": 1519,
              "body": "To start, I think the changes made in #1382 are good and definitely the direction GraphQL should be going!\r\n\r\nHowever, for my team, this is a _huge_ breaking change that will prevent us from updating to 14.x or later for the forseeable future. I suspect there are many client applications depending on our GraphQL server that send incorrect variable types, expecting them to be coerced. Right now I'm just doing a bit of housekeeping on the dependencies of the server - I simply don't have the bandwidth to go through all of these client applications and fix them, or even to investigate where this might be happening.\r\n\r\nPrevious breaking changes (ex. https://github.com/graphql/graphql-js/pull/927) have provided flags and options to affected functions - can we get one of those for this change? This would allow my team to at least stay up to date and save this chore for another time.",
              "createdAt": "2018-09-10T23:03:12Z",
              "author": {
                "login": "dallonf",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/346300?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1519",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "enhancement",
                      "color": "84b6eb"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Description when print a AST graphql object",
              "state": "CLOSED",
              "number": 1521,
              "body": "Hi, currently I've parsing a graphQL schema with parse function to AST object. Later I split the schema into different array of object to store into different files, one per type (interface, object type, enums...).\r\n\r\nWhen I print the partial AST object to string again, this function avoid the descriptions attribute.. Then I lost all schema description. There are any solution for that or maybe this will be implement as new feature?\r\n\r\nExample:\r\ntype Object1{\r\n #description of attribute att1\r\n att1: String\r\n}\r\n\r\nWhen print the AST object I lost descriptions\r\ntype Object1{\r\n att1: String\r\n}\r\n",
              "createdAt": "2018-09-12T20:31:24Z",
              "author": {
                "login": "amian84",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/840567?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1521",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Feature request: strip whitespace from GraphQL queries / fragments / mutations / subscriptions",
              "state": "CLOSED",
              "number": 1523,
              "body": "Currently, when issuing requests to a GraphQL API, the GraphQL string describing the query contains a lot of whitespace. While this makes readability in development mode easier, it is wasteful in production.\r\n\r\nWould it be possible to add a function to this library that strips this whitespace away? Here's some example code that does this:\r\n\r\n```js\r\nlet graphQLQuery = `...` // some GraphQL literal\r\n\r\ngraphQLQuery = graphQLQuery\r\n    .replace(/#.*\\n/g, '')\r\n    .replace(/[\\s|,]*\\n+[\\s|,]*/g, ' ')\r\n    .replace(/:\\s/g, ':')\r\n    .replace(/,\\s/g, ',')\r\n    .replace(/\\)\\s\\{/g, '){')\r\n    .replace(/\\}\\s/g, '}')\r\n    .replace(/\\{\\s/g, '{')\r\n    .replace(/\\s\\}/g, '}')\r\n    .replace(/\\s\\{/g, '{')\r\n    .replace(/\\)\\s/g, ')')\r\n    .replace(/\\(\\s/g, '(')\r\n    .replace(/\\s\\)/g, ')')\r\n    .replace(/\\s\\(/g, '(')\r\n    .replace(/=\\s/g, '=')\r\n    .replace(/\\s=/g, '=')\r\n    .replace(/@\\s/g, '@')\r\n    .replace(/\\s@/g, '@')\r\n    .replace(/\\s\\$/g, '$')\r\n    .replace(/\\s\\./g, '.')\r\n    .trim()\r\n```\r\n\r\nThis code turns a GraphQL query such as this one:\r\n\r\n```gql\r\nquery SomeQuery($foo: String!, $bar: String) {\r\n  someField(foo: $foo, bar: $bar) {\r\n    a\r\n    b {\r\n      c\r\n      d\r\n    }\r\n  }\r\n} \r\n```\r\n\r\ninto:\r\n\r\n```gql\r\nquery SomeQuery($foo:String!$bar:String){someField(foo:$foo bar:$bar){a b{c d}}}\r\n```\r\n\r\nPreferably this would happen at compile time for a production build, so the GraphQL literals in the source code would be minified in the output bundle and thus sent in minified form to the GraphQL API.\r\n\r\nProposed name for this function: `condense`.",
              "createdAt": "2018-09-14T09:21:41Z",
              "author": {
                "login": "rybon",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/1155839?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1523",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "enhancement",
                      "color": "84b6eb"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "After upgrading package got \"Expected ... to be a GraphQL schema\"",
              "state": "CLOSED",
              "number": 1524,
              "body": "Hello.\r\n\r\nAfter upgrading package from `\"graphql\": \"^0.13.2\"` to `\"graphql\": \"^14.0.2\",`,\r\nWhen I'm trying to get any query, I receive error:\r\n`Expected [object GraphQLSchema] to be a GraphQL schema.`\r\n\r\n<img width=\"1440\" alt=\"screen shot 2018-09-14 at 7 37 50 pm\" src=\"https://user-images.githubusercontent.com/12682937/45563339-b8fb2d80-b855-11e8-8462-f7a2cba93802.png\">\r\n\r\nMy package.json:\r\n[package.txt](https://github.com/graphql/graphql-js/files/2384162/package.txt)\r\n\r\nApp structure:\r\n<img width=\"1440\" alt=\"screen shot 2018-09-14 at 7 39 38 pm\" src=\"https://user-images.githubusercontent.com/12682937/45563435-024b7d00-b856-11e8-8d42-3ba1266437ad.png\">\r\n<img width=\"1440\" alt=\"screen shot 2018-09-14 at 7 39 47 pm\" src=\"https://user-images.githubusercontent.com/12682937/45563451-0d9ea880-b856-11e8-8c4c-48707b980dca.png\">\r\n\r\nCan this be issue in a package or it's some migration problem ?\r\n(I didn't updated project after it)\r\n\r\nThank you.\r\n",
              "createdAt": "2018-09-14T16:41:40Z",
              "author": {
                "login": "vlad1777d",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/12682937?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1524",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "RFC: Extra property on field definition to pass extra metadata",
              "state": "OPEN",
              "number": 1527,
              "body": "I'm currently adding extra properties to some graphql object field definitions, like the following:\r\n\r\n```js\r\nconst MutationType = new GraphQLObjectType({\r\n  name: 'Mutation',\r\n  fields: () => ({\r\n    AddSomething: {\r\n      // ... normal field properties\r\n      somethingElse: {},\r\n    }\r\n  }),\r\n})\r\n```\r\n\r\nAnd then using them later on via the `info` argument inside some middlewares (using [`graphql-middleware`](https://github.com/prisma/graphql-middleware/)):\r\n```js\r\nconst mutationField = info.schema.getMutationType().getFields()[info.fieldName];\r\nconsole.log(mutationField.somethingElse);\r\n```\r\n\r\nFor more details, see the following medium post: [graphql mutation arguments validation using yup](https://itnext.io/graphql-mutation-arguments-validation-with-yup-using-graphql-middleware-645822fb748)\r\n\r\n---\r\n\r\nThe thing is, this is relying on internal behavior.\r\nThe following code spreads all properties given to the field:\r\nhttps://github.com/graphql/graphql-js/blob/81719749e01f030cfb3a01a97e7e4bfc534bb08f/src/type/definition.js#L720-L724\r\n\r\nIs that something expected to not change? If yes, then no need for any other extra property or for this issue. 😄 \r\n\r\nBut if this is something that can change in future versions, I would love the possibility of having an extra field for that extra metadata.\r\n\r\nI'm available to work on adding this, if it's approved.",
              "createdAt": "2018-09-20T13:52:40Z",
              "author": {
                "login": "JCMais",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/1041647?v=4"
              },
              "assignees": {
                "nodes": [
                  {
                    "name": "Ivan Goncharov",
                    "avatarUrl": "https://avatars0.githubusercontent.com/u/8336157?v=4"
                  }
                ]
              },
              "url": "https://github.com/graphql/graphql-js/issues/1527",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "enhancement",
                      "color": "84b6eb"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Fragments with aliases: Cannot return null for non-nullable fields",
              "state": "CLOSED",
              "number": 1530,
              "body": "# Reporting issues with GraphQL.js\r\n\r\nGiven the following schema:\r\n\r\n```\r\ntype Query {\r\n  books: Books\r\n}\r\n\r\ntype Books {\r\n  categoryHierarchy: [Category]!\r\n  name: String!\r\n}\r\n\r\ntype Category {\r\n  name: String!\r\n  categories: [Category]!\r\n}\r\n```\r\n\r\nAnd then issuing a query:\r\n\r\n```\r\n{\r\n  books {\r\n    name\r\n    categoryHierarchy {\r\n      ...category\r\n      categories {\r\n        ...category\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfragment category on Category {\r\n  abc: name\r\n}\r\n```\r\n\r\nI am seeing a regression in 0.13.x+ (coming from 0.11.7) where `graphql` is throwing the following error:\r\n\r\n    Cannot return null for non-nullable field Category.name.\r\n\r\nIf I remove the `abc` alias, it works. Aliases in the query selection set and on nullable fields appears to work.",
              "createdAt": "2018-09-21T14:51:07Z",
              "author": {
                "login": "kamranayub",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/563819?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1530",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "npm install graphql peer dependency issues",
              "state": "CLOSED",
              "number": 1531,
              "body": "Running `npm install --save apollo-server graphql` gave me the following peer dependency issues:\r\n\r\n```\r\nnpm WARN graphql-subscriptions@0.5.8 requires a peer of graphql@^0.10.5 || ^0.11.3 || ^0.12.0 || ^0.13.0 but none is installed. You must install peer dependencies yourself.\r\nnpm WARN graphql-tools@3.1.1 requires a peer of graphql@^0.13.0 but none is installed. You must install peer dependencies yourself.\r\nnpm WARN graphql-tag@2.9.2 requires a peer of graphql@^0.9.0 || ^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0 but none is installed. You must install peer dependencies yourself.\r\nnpm WARN @apollographql/apollo-upload-server@5.0.3 requires a peer of graphql@^0.13.1 but none is installed. You must install peer dependencies yourself.\r\n```\r\n\r\nThe resolved versions:\r\n\r\n```\r\n+ apollo-server@2.1.0\r\n+ graphql@14.0.2\r\n```\r\n\r\nIt seems as if the minor version of 14 got moved to a major version on graphql, thus not satisfying peer dependencies of the above packages.",
              "createdAt": "2018-09-21T22:36:33Z",
              "author": {
                "login": "sdgandhi",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/2608428?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1531",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Subscriptions do not work with asynchronous resolver function",
              "state": "OPEN",
              "number": 1535,
              "body": "I noticed that the `subscribe` function does not work properly when it is used with an asynchronous field resolver function.\r\n\r\nAlso, there is no unit test for this case. This is what I have in mind (must be added to `subscribe-test.js`):\r\n\r\n```javascript\r\n  it('should work with an asynchronous resolver', async () => {\r\n    const asyncEmailSchema = emailSchemaWithResolvers(\r\n      async function*() {\r\n        yield { email: { subject: 'Hello' } };\r\n      },\r\n      async function*(email) { // <-- this currently does not work\r\n        return email;\r\n      },\r\n    );\r\n\r\n    const subscription = await subscribe(\r\n      asyncEmailSchema,\r\n      parse(`\r\n        subscription {\r\n          importantEmail {\r\n            email {\r\n              subject\r\n            }\r\n          }\r\n        }\r\n      `),\r\n    );\r\n\r\n    const payload = await subscription.next();\r\n    expect(payload).to.deep.equal({\r\n      done: false,\r\n      value: {\r\n        data: {\r\n          importantEmail: {\r\n            email: {\r\n              subject: 'Hello',\r\n            },\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    expect(await subscription.next()).to.deep.equal({\r\n      done: true,\r\n      value: undefined,\r\n    });\r\n  });\r\n```\r\n\r\nIs this an oversight? Or am I doing something stupid or against the spec? As far as I see the [ResolveFieldEventStream](https://facebook.github.io/graphql/draft/#sec-Source-Stream) section says nothing about whether the resolver function can be asynchronous, so I am assuming that is allowed, just at it is for resolver function used for normal queries, and as far as I understand it is intended that they are compatible.",
              "createdAt": "2018-09-26T18:31:46Z",
              "author": {
                "login": "Cito",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/464599?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1535",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "process.env.NODE_ENV reference causes error \"require is not defined\" when bundling with webpack (for GraphiQL)",
              "state": "CLOSED",
              "number": 1536,
              "body": "When bundling graphql-js with webpack, e.g. as dependency of graphiql, you get this error at runtime:\r\n\r\n```\r\nReferenceError: require is not defined\r\n    at Module.../sourcegraph/node_modules/graphql/jsutils/instanceOf.mjs (instanceOf.mjs:28)\r\n    at __webpack_require__ (bootstrap:63)\r\n    at Module.../sourcegraph/node_modules/graphql/type/definition.mjs (definition.mjs:1)\r\n    at __webpack_require__ (bootstrap:63)\r\n    at Module.../sourcegraph/node_modules/graphql/type/validate.mjs (validate.mjs:1)\r\n    at __webpack_require__ (bootstrap:63)\r\n    at Module.../sourcegraph/node_modules/graphql/graphql.mjs (graphql.mjs:1)\r\n    at __webpack_require__ (bootstrap:63)\r\n    at Module.../sourcegraph/node_modules/graphql/index.mjs (index.mjs:2)\r\n    at __webpack_require__ (bootstrap:63)\r\n```\r\n\r\nThis is because `instanceOf.js` contains a reference to `process.env`: https://github.com/graphql/graphql-js/blob/dec24f9/src/jsutils/instanceOf.js#L19-L36\r\n\r\nIn the ESM build, which is used by webpack by following the `module` field in package.json, the file gets compiled to a `.mjs` file, which does not get applied the webpack `ProvidePlugin`, see https://github.com/webpack/webpack/issues/7032.\r\n\r\nThis makes it impossible to bundle [`graphiql`](https://github.com/graphql/graphiql) with webpack.",
              "createdAt": "2018-09-28T18:15:37Z",
              "author": {
                "login": "felixfbecker",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/10532611?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1536",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Feature request: Support asynchronous iterators as return values from resolvers",
              "state": "CLOSED",
              "number": 1537,
              "body": "So far resolvers are expected to return an \"`Iterable`\" object (`Symbol.iterator`). But many I/O packages in Node.js work with asynchronous Promises, as does e.g. the popular [Sequelize relational database ORM](http://docs.sequelizejs.com/). Enabling asynchronous iterators would elegantly facilitate reading very large amounts of records, e.g. from a relational database, and return them without causing heavy load on memory. See [this Stackoverflow question](https://stackoverflow.com/questions/52577461/in-the-graphql-reference-implementation-resolvers-are-expected-to-return-an-iter) for a more detailed discussion of the example. So far in such a case the only solution is standard pagination, which forces the client to implement batch wise loading of large data-sets. Especially when client and provider are maintained by different organisations, this can lead to issues.  \r\nCould support for asynchronous iterators (`Symbol.asyncIterator`) be implemented in graphql-js, please?",
              "createdAt": "2018-10-01T08:36:32Z",
              "author": {
                "login": "asishallab",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/575529?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1537",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Throwing error inside Subscription resolver",
              "state": "OPEN",
              "number": 1539,
              "body": "/label question\r\n\r\nI would like to check for some permission before user subscribe to an endpoint. An error should be thrown and the client should be able to catch the error.\r\n\r\nThe following is what I am trying:\r\n\r\n```\r\nsomeSubscriptionEndpoint: {\r\n\tsubscribe: (payload, args, context, info) => {\r\n\t\tthrow new Error('Internal server error');\r\n         }\r\n}\r\n```\r\n\r\nBut the error I receive on client side is `\"Subscription field must return Async Iterable. Received: [object Object]\"`\r\n\r\nhttps://github.com/graphql/graphql-js/blob/master/src/subscription/subscribe.js#L272\r\n\r\nThis line is called twice, the first time eventStream is the error I threw so condition is true and the error is wrapped and rethrown. The second time I received  `{ errors: [ [GraphQLError] ] }` and the the error in line 281 is thrown.\r\n\r\nWhat is the correct way of throwing an error when client subscribes to an specific subscription endpoint?\r\n",
              "createdAt": "2018-10-02T01:24:30Z",
              "author": {
                "login": "DBL-Lee",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/8804410?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1539",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "14.1.0",
              "state": "CLOSED",
              "number": 1543,
              "body": "I think we need to start preparing `14.1.0`.\r\nBeyond #1520 it would be great to include all RFC we agree on at last WG.\r\n\r\n@mjmahone What do you think?\r\n\r\n",
              "createdAt": "2018-10-03T16:55:32Z",
              "author": {
                "login": "IvanGoncharov",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/8336157?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1543",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "How to use array in mutation args?",
              "state": "CLOSED",
              "number": 1549,
              "body": "I have an array like `[{email:\"email1@gmail.com\"},{email:\"email2@gmail.com\"}]`\r\n\r\nmy schema like below\r\n```\r\n AddMembers: {\r\n        type: membertypes,\r\n        args: { group_id:{type:new GraphQLNonNull(GraphQLUUID)},members: { type: GraphQLList } },\r\n        resolve: async (obj, args, context) => {\r\n\r\n}\r\n}\r\n```\r\nwhen i executed it, i got error like below\r\n```\r\nThe type of Mutation.AddMembers(members:) must be Input Type but got: [function GraphQLList].\\n\\nExpected GraphQL named type but got: [function GraphQLList]\r\n```\r\nplease help me to resolve this issue.",
              "createdAt": "2018-10-08T07:40:44Z",
              "author": {
                "login": "ramreddy",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/240225?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1549",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "'Abstract type must resolve to an object' error; resolver maps not resilient",
              "state": "CLOSED",
              "number": 1553,
              "body": "# Feature requests\r\n\r\nHi,\r\n\r\nI came across the expected error 'Abstract type must resolve to an object' when using a resolver map to resolve various entities in a collection to their respective types. Turns out the immediate issue causing the error was one record in the collection had stale data that didn't resolve to either of the expected types. \r\n\r\nI tried a few variations of the resolver map (see below for snippets) but as afar i can tell from experimentation and researching there is no way around the limitation to get the all the \"good\" data, and ignore the bad record..either *all* the queried data conforms to the resolver map OR you get back 0 results and the 'Abstract type must resolve to an object' error. From my applications perspective, getting all available valid results would be preferable, and there would a 'soft' error that can be handled / logged etc. not a hard error for a bad record.\r\n\r\nHere are the approaches I tried that didn't work to ignore the one bad record:\r\n\r\nExample 1 of resolver map (graphql-tools syntax) - returns nothing if obj typename isn't a match\r\n\r\n```\r\n  Activity: {\r\n    __resolveType(obj, context, info) {\r\n      if (obj instanceof NoteActivity) {\r\n        return 'NoteActivity';\r\n      } else if (obj instanceof CallActivity) {\r\n        return 'CallActivity';\r\n      } else if (obj instanceof MeetingActivity) {\r\n        return 'MeetingActivity';\r\n      }\r\n    }\r\n  }\r\n```\r\nExample 2 - I tried defaulting to returning null or empty object {}\r\n```\r\n  Activity: {\r\n    __resolveType(obj, context, info) {\r\n      if (obj instanceof NoteActivity) {\r\n        return 'NoteActivity';\r\n      } else if (obj instanceof CallActivity) {\r\n        return 'CallActivity';\r\n      } else if (obj instanceof MeetingActivity) {\r\n        return 'MeetingActivity';\r\n      } else {\r\n        return {} // OR return null\r\n    }\r\n  }\r\n```\r\n\r\nIf there is some solution aside from what I've tried, please share, but at this point in my research i'm guessing that this is a constraint of graphql.\r\n\r\nThanks!\r\n\r\n-S. Arora",
              "createdAt": "2018-10-14T17:01:40Z",
              "author": {
                "login": "sarora2073",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/8941430?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1553",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Text color in search bar using \"light\" theme",
              "state": "CLOSED",
              "number": 1556,
              "body": "Quite a minor \"issue\", if you can even call it that. \r\n\r\nWhen using the \"light\" theme on the graphql Playground, the text \"Search:\" and contents within the SearchBar are nearly invisible. I have text input into the field however you're unable to tell since the color of both mentioned texts are white.\r\n\r\nMaybe just change to black when the theme is switched?\r\n\r\n<img width=\"1314\" alt=\"screen shot 2018-10-22 at 3 07 49 pm\" src=\"https://user-images.githubusercontent.com/9575583/47316337-7ecb3b80-d60c-11e8-98e5-55464b6d9e38.png\">\r\n",
              "createdAt": "2018-10-22T20:13:11Z",
              "author": {
                "login": "dabyland",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/9575583?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1556",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Require properties by default",
              "state": "CLOSED",
              "number": 1561,
              "body": "Is there a way to require properties by default? Currently, I'm placing ! on everything. Is there a setting to have it considered required by default with selective ones as not required?",
              "createdAt": "2018-10-25T01:03:27Z",
              "author": {
                "login": "TriStarGod",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/8272754?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1561",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Feature request: accept AST query in graphql()?",
              "state": "CLOSED",
              "number": 1564,
              "body": "```javascript\r\nimport schema from './';\r\nimport gql from 'graphql-tag';\r\nimport { graphql } from 'graphql';\r\n\r\ntest('root graphql query', async () => {\r\n  const r = await graphql(schema, gql`query { hello }`);\r\n  expect(r.data).toEqual({ hello: 'Hello world!' });\r\n});\r\n```\r\n\r\nIt would be nice if an AST could be passed instead of a string for the `query` argument of graphql(). My editor (vim) does GraphQL syntax highlighting whenever I use the `gql` tag :O ",
              "createdAt": "2018-10-29T07:28:29Z",
              "author": {
                "login": "olalonde",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/416585?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1564",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Wrong Result Generated by findArgChanges",
              "state": "OPEN",
              "number": 1567,
              "body": "# Reporting issues with GraphQL.js\r\n\r\nHi there. The function `findArgChanges` may generate wrong result if **default value of the field is an Array**:  \r\n``` js\r\nconst oldSchema = buildSchema(`\r\n    type Type1 {\r\n      field1(name: [String!] = []): String\r\n    }\r\n\r\n    type Query {\r\n      field1: String\r\n    }\r\n  `);\r\n\r\nconst newSchema = buildSchema(`\r\n    type Type1 {\r\n      field1(name: [String!] = []): String\r\n    }\r\n\r\n    type Query {\r\n      field1: String\r\n    }\r\n  `);\r\nfindDangerousChanges(oldSchema, newSchema);\r\n```\r\nResult:\r\n``` js\r\n[ { type: 'ARG_DEFAULT_VALUE_CHANGE',\r\n    description: 'Type1.field1 arg name has changed defaultValue' } ]\r\n```\r\n\r\n# Possible Solution\r\nIn [`graphql-js/src/utilities/findBreakingChanges.js`](https://github.com/graphql/graphql-js/blob/master/src/utilities/findBreakingChanges.js#L236):  \r\n``` js\r\n          } else if (\r\n            oldArgDef.defaultValue !== undefined &&\r\n            oldArgDef.defaultValue !== newArgDef.defaultValue\r\n          ) {\r\n            dangerousChanges.push({\r\n              type: DangerousChangeType.ARG_DEFAULT_VALUE_CHANGE,\r\n              description:\r\n                `${oldType.name}.${fieldName} arg ` +\r\n                `${oldArgDef.name} has changed defaultValue`,\r\n            });\r\n          }\r\n```\r\nIf the default value is an array, `oldArgDef.defaultValue !== newArgDef.defaultValue` is always **true**.  \r\n\r\nI also create a PR which can reproduce this bug: #1566.",
              "createdAt": "2018-11-06T03:42:26Z",
              "author": {
                "login": "helloqiu",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/8971659?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1567",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "bug",
                      "color": "fc2929"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Extending an Object Type in Code",
              "state": "CLOSED",
              "number": 1569,
              "body": "(Posting here since haven't been able to get an answer from any other of channels. 😅)\r\n\r\nSo, using SDL you can add fields to an existing type like:\r\n\r\n```\r\nextend type Query {\r\n   extraField: Int!\r\n}\r\n```\r\n\r\nBut how can I do this in code using the built-in classes (`GraphQLObjectType`, etc)? \r\n\r\nSounds like `extendSchema` might offer a way, but it is undocumented and I'm not sure how to use it in this case.\r\n\r\nIs this supported?\r\n\r\nMy apologies in advance if I'm missing something really obvious.",
              "createdAt": "2018-11-08T17:23:19Z",
              "author": {
                "login": "ldiego08",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/271803?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1569",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "All `astNode` fields are undefined when schema is loaded using buildClientSchema",
              "state": "CLOSED",
              "number": 1575,
              "body": "I noticed an issue with loading a `GraphQLSchema` using introspection JSON.\r\n\r\nGiven the following introspection JSON:\r\nhttps://gist.github.com/dotansimha/c25f0ce38382086f55f5382da7dcbcb8\r\n\r\nIf I'm running the following code:\r\n```js\r\nconst introspection = require('./schema.json');\r\nconst { buildClientSchema } = require('graphql');\r\nconst schema = buildClientSchema(introspection);\r\n\r\nconst allTypes = schema.getTypeMap(); // Valid, all types are there\r\nconst rootNode = schema.astNode; // undefined\r\nconst allTypesAst = Object.keys(allTypes).map(key => allTypes[key].astNode); // Array of `undefined`\r\n```\r\n\r\nI know `buildClientSchema` should return a `GraphQLSchema` without resolvers and anything else, but is there a reason for removing the `astNode` fields?\r\n\r\nMy current workaround is to print the schema into a `string`, parse to into a `Document` using `parse` and then build the schema again using `buildASTSchema`:\r\n\r\n```js\r\nconst introspection = require('./schema.json');\r\nconst { buildClientSchema, buildASTSchema, parse, printSchema } = require('graphql');\r\nconst schema = buildClientSchema(introspection);\r\n\r\nconst validSchema = buildASTSchema(parse(printSchema(schema)));\r\n\r\nconst allTypesAst = Object.keys(allTypes).map(key => allTypes[key].astNode); // Valid ASTs\r\n```",
              "createdAt": "2018-11-17T02:34:54Z",
              "author": {
                "login": "dotansimha",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/3680083?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1575",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Feature request: Pre-release or patch version bump for flow 0.85 compat",
              "state": "CLOSED",
              "number": 1577,
              "body": "Just requesting either a pre-release or patch version bump for flow 0.85 compatibility. Seems like support for 0.85 has landed, and we'd rather not stub the library out if possible.\r\n\r\nThank you for the excellent library.",
              "createdAt": "2018-11-20T06:54:18Z",
              "author": {
                "login": "KevinGrandon",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/122602?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1577",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Allow non-English enum name",
              "state": "CLOSED",
              "number": 1584,
              "body": "Hi, I need use non-English enum name, but I get below error:\r\n` Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"己审核\" does not.`\r\n\r\nCan support validate for other language?",
              "createdAt": "2018-11-22T19:10:44Z",
              "author": {
                "login": "s97712",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/13390001?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1584",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Flow errors from imported npm package in buildAstSchema",
              "state": "CLOSED",
              "number": 1586,
              "body": "Using graphql-js version 14.0.2 and Flow version 0.87.0, Flow throws the following errors:\r\n\r\n```sh\r\nError ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ node_modules/graphql/utilities/buildASTSchema.js.flow:363:9\r\n\r\nMissing type annotation for V. V is a type parameter declared in function [1] and was implicitly\r\ninstantiated at call of keyValMap [2].\r\n\r\n     node_modules/graphql/utilities/buildASTSchema.js.flow\r\n     360│     def: ObjectTypeDefinitionNode | InterfaceTypeDefinitionNode,\r\n     361│   ) {\r\n     362│     return def.fields\r\n [2] 363│       ? keyValMap(\r\n     364│           def.fields,\r\n     365│           field => field.name.value,\r\n     366│           field => this.buildField(field),\r\n     367│         )\r\n     368│       : {};\r\n     369│   }\r\n     370│\r\n\r\n     node_modules/graphql/jsutils/keyValMap.js.flow\r\n [1]  29│ export default function keyValMap<T, V>(\r\n      30│   list: $ReadOnlyArray<T>,\r\n      31│   keyFn: (item: T) => string,\r\n      32│   valFn: (item: T) => V,\r\n      33│ ): ObjMap<V> {\r\n\r\n\r\nError ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ node_modules/graphql/utilities/buildASTSchema.js.flow:372:12\r\n\r\nMissing type annotation for V. V is a type parameter declared in function [1] and was implicitly\r\ninstantiated at call of keyValMap [2].\r\n\r\n     node_modules/graphql/utilities/buildASTSchema.js.flow\r\n     369│   }\r\n     370│\r\n     371│   _makeInputValues(values: $ReadOnlyArray<InputValueDefinitionNode>) {\r\n [2] 372│     return keyValMap(\r\n     373│       values,\r\n     374│       value => value.name.value,\r\n     375│       value => this.buildInputField(value),\r\n     376│     );\r\n     377│   }\r\n     378│\r\n     379│   _makeInterfaceDef(def: InterfaceTypeDefinitionNode) {\r\n\r\n     node_modules/graphql/jsutils/keyValMap.js.flow\r\n [1]  29│ export default function keyValMap<T, V>(\r\n      30│   list: $ReadOnlyArray<T>,\r\n      31│   keyFn: (item: T) => string,\r\n      32│   valFn: (item: T) => V,\r\n      33│ ): ObjMap<V> {\r\n\r\n\r\nError ┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈ node_modules/graphql/utilities/buildASTSchema.js.flow:399:9\r\n\r\nMissing type annotation for V. V is a type parameter declared in function [1] and was implicitly\r\ninstantiated at call of keyValMap [2].\r\n\r\n     node_modules/graphql/utilities/buildASTSchema.js.flow\r\n     396│\r\n     397│   _makeValueDefMap(def: EnumTypeDefinitionNode) {\r\n     398│     return def.values\r\n [2] 399│       ? keyValMap(\r\n     400│           def.values,\r\n     401│           enumValue => enumValue.name.value,\r\n     402│           enumValue => this.buildEnumValue(enumValue),\r\n     403│         )\r\n     404│       : {};\r\n     405│   }\r\n     406│\r\n\r\n     node_modules/graphql/jsutils/keyValMap.js.flow\r\n [1]  29│ export default function keyValMap<T, V>(\r\n      30│   list: $ReadOnlyArray<T>,\r\n      31│   keyFn: (item: T) => string,\r\n      32│   valFn: (item: T) => V,\r\n      33│ ): ObjMap<V> {\r\n```\r\n\r\nAs a quick fix, I've added `.*/node_modules/graphql/jsutils/keyValMap.js.flow` to my `.flowconfig`, but this is far from ideal...",
              "createdAt": "2018-11-28T10:40:06Z",
              "author": {
                "login": "TxHawks",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/5658514?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1586",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Map constructor does not accept arguments",
              "state": "CLOSED",
              "number": 1588,
              "body": "Hi,\r\n\r\nTrying to launch my react native app on Android, I'm getting this error, linked to the following line in graphql-js : https://github.com/graphql/graphql-js/blob/3595ea922613f3e13a07185407dd70ed45de7a66/src/type/definition.js#L1067\r\n\r\nDo you have any hints about this problem ? I think it just pop out, so it's probably not directly a graphql-js bug, but I think you are the ones who could help me the best :)\r\n\r\n\r\n```\r\n2018-11-29 16:35:15.669 19341-19398/com.getluko.cover.app E/ReactNativeJNI: Got JS Exception: Map constructor does not accept arguments (index.android.bundle:98112)\r\n2018-11-29 16:35:15.669 19341-19398/com.getluko.cover.app E/ReactNativeJNI: Got JS Stack: Map@[native code]\r\n    GraphQLEnumType@index.android.bundle:98112:34\r\n    index.android.bundle:99021:60\r\n    loadModuleImplementation@index.android.bundle:162:14\r\n    guardedLoadModule@index.android.bundle:91:38\r\n    metroRequire@index.android.bundle:72:79\r\n    index.android.bundle:96747:35\r\n    loadModuleImplementation@index.android.bundle:162:14\r\n    guardedLoadModule@index.android.bundle:91:38\r\n    metroRequire@index.android.bundle:72:79\r\n    index.android.bundle:96679:30\r\n    loadModuleImplementation@index.android.bundle:162:14\r\n    guardedLoadModule@index.android.bundle:91:38\r\n    metroRequire@index.android.bundle:72:79\r\n    index.android.bundle:96654:29\r\n    loadModuleImplementation@index.android.bundle:162:14\r\n    guardedLoadModule@index.android.bundle:91:38\r\n    metroRequire@index.android.bundle:72:79\r\n    index.android.bundle:95399:96\r\n    index.android.bundle:95400:5\r\n    loadModuleImplementation@index.android.bundle:162:14\r\n    guardedLoadModule@index.android.bundle:91:38\r\n    metroRequire@index.android.bundle:72:79\r\n    index.android.bundle:86833:301\r\n    index.android.bundle:86834:5\r\n    loadModuleImplem\r\n2018-11-29 16:35:15.672 19341-19398/com.getluko.cover.app E/unknown:ReactNative: Exception in native call from JS\r\n    com.facebook.react.devsupport.JSException: Map constructor does not accept arguments (index.android.bundle:98112)\r\n        at com.facebook.react.bridge.queue.NativeRunnable.run(Native Method)\r\n        at android.os.Handler.handleCallback(Handler.java:898)\r\n        at android.os.Handler.dispatchMessage(Handler.java:107)\r\n        at com.facebook.react.bridge.queue.MessageQueueThreadHandler.dispatchMessage(MessageQueueThreadHandler.java:29)\r\n        at android.os.Looper.loop(Looper.java:198)\r\n        at com.facebook.react.bridge.queue.MessageQueueThreadImpl$3.run(MessageQueueThreadImpl.java:192)\r\n        at java.lang.Thread.run(Thread.java:764)\r\n     Caused by: com.facebook.jni.CppException: Map constructor does not accept arguments (index.android.bundle:98112)\r\n        at com.facebook.react.bridge.queue.NativeRunnable.run(Native Method) \r\n        at android.os.Handler.handleCallback(Handler.java:898) \r\n        at android.os.Handler.dispatchMessage(Handler.java:107) \r\n        at com.facebook.react.bridge.queue.MessageQueueThreadHandler.dispatchMessage(MessageQueueThreadHandler.java:29) \r\n        at android.os.Looper.loop(Looper.java:198) \r\n        at com.facebook.react.bridge.queue.MessageQueueThreadImpl$3.run(MessageQueueThreadImpl.java:192) \r\n        at java.lang.Thread.run(Thread.java:764) \r\n2018-11-29 16:35:15.674 19341-19341/com.getluko.cover.app E/unknown:ReactNative: Unable to launch redbox because react activity is not available, here is the error that redbox would've displayed: Map constructor does not accept arguments (index.android.bundle:98112)\r\n    \r\n    Map constructor does not accept arguments (index.android.bundle:98112)\r\n    \r\n    Map@[native code]\r\n    GraphQLEnumType@index.android.bundle:98112:34\r\n    index.android.bundle:99021:60\r\n    loadModuleImplementation@index.android.bundle:162:14\r\n    guardedLoadModule@index.android.bundle:91:38\r\n    metroRequire@index.android.bundle:72:79\r\n    index.android.bundle:96747:35\r\n    loadModuleImplementation@index.android.bundle:162:14\r\n    guardedLoadModule@index.android.bundle:91:38\r\n    metroRequire@index.android.bundle:72:79\r\n    index.android.bundle:96679:30\r\n    loadModuleImplementation@index.android.bundle:162:14\r\n    guardedLoadModule@index.android.bundle:91:38\r\n    metroRequire@index.android.bundle:72:79\r\n    index.android.bundle:96654:29\r\n    loadModuleImplementation@index.android.bundle:162:14\r\n    guardedLoadModule@index.android.bundle:91:38\r\n    metroRequire@index.android.bundle:72:79\r\n    index.android.bundle:95399:96\r\n    index.android.bundle:95400:5\r\n    loadModuleImplementation@index.android.bundle:162:14\r\n    guardedLoadModule@index.android.bundle:91:38\r\n    metroRequire@index.android.bundle:72:79\r\n    index.android.bundle:86833:301\r\n    index.android.bundle:86834:5\r\n    loadModuleImplementation@index.android.bundle:162:14\r\n    guardedLoadModule@index.android.bundle:91:38\r\n    metroRequire@index.android.bundle:72:79\r\n    index.android.bundle:75017:68\r\n    loadModuleImplementation@index.android.bundle:162:14\r\n    guardedLoadModule@index.android.bundle:91:38\r\n    metroRequire@index.android.bundle:72:79\r\n    index.android.bundle:1632:60\r\n    loadModuleImplementation@index.android.bundle:162:14\r\n    guardedLoadModule@index.android.bundle:83:47\r\n    metroRequire@index.android.bundle:72:79\r\n    global code@index.android.bundle:216494:8\r\n```",
              "createdAt": "2018-11-29T15:40:11Z",
              "author": {
                "login": "Nabellaleen",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/3717607?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1588",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "How to know exactly which fields have error ? Is it possible to add metadata to errors ?",
              "state": "CLOSED",
              "number": 1591,
              "body": "Hello,\r\n\r\nI'm using a mutation that is returning **TypeError** errors like these (I assume that this is something usual and is handled in some elegant way by someone, but I'm not finding the proper approach, so give me a tip please)\r\n\r\n![image](https://user-images.githubusercontent.com/1231888/49322581-a00e2a00-f4de-11e8-8897-92afb39728ce.png)\r\n\r\nAs defined by graphql spec, the `errors` array in the response have `error` objects with `locations` and `message` as properties. Considering that this is the result of a form that is send to the graphql backend and I need to map the failed inputs based on the response, **how to know exactly which field have errors?** I have thinking of these options:\r\n\r\n- Implementing and additional validation layer in each resolver. (redundant, and I think that these errors are thrown before passing to the resolver, right?)\r\n- Parse the `message` property with `regexp` to get the exact field. (really?)\r\n- Add metadata to each error (maybe in its [extensions](https://facebook.github.io/graphql/June2018/#sec-Errors) property), at least the problematic field, modifying `graphql-js`. (where?)\r\n- Add dynamic metadata to each error based on definitions in the schema. (is possible?)\r\n\r\nThanks",
              "createdAt": "2018-12-01T01:47:32Z",
              "author": {
                "login": "devniel",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/1231888?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1591",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "`.inspect()` is deprecated",
              "state": "CLOSED",
              "number": 1599,
              "body": "Are there plans to resolve the deprecation warnings that come with this library due to the use of `.inspect()` method being used?\r\n\r\nAny attempt to log values within the library result in: \r\n\r\n```\r\n(node:19489) [DEP0079] DeprecationWarning: Custom inspection function on Objects via .inspect() is deprecated\r\n```\r\n\r\non the LTS version of nodejs (v10)\r\n\r\nhttps://github.com/graphql/graphql-js/blob/master/src/jsutils/inspect.js\r\n\r\nhttps://github.com/nodejs/node/issues/15549",
              "createdAt": "2018-12-09T00:51:56Z",
              "author": {
                "login": "bradennapier",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/15365418?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1599",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "help wanted",
                      "color": "159818"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Enum value is not resolved to internal value for directive argumets and default values",
              "state": "CLOSED",
              "number": 1604,
              "body": "the [original issue](https://github.com/apollographql/graphql-tools/issues/715) was submitted to the `graphql-tools` repo,  but it seems that it never made it here. \r\n\r\nthe issue is that after following the [official documentation ](https://www.apollographql.com/docs/graphql-tools/scalars.html#internal-values) the enum value is not resolved to the internal value when used as a default value or in directives. \r\n\r\nthe test attached to the original issue provided by @JakeDawkins \r\nhttps://gist.github.com/JakeDawkins/66f5b026cf21515f1004f057754a2cd4\r\n",
              "createdAt": "2018-12-12T12:12:03Z",
              "author": {
                "login": "raduflp",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/7570412?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1604",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "How to use extend scalar AppSync",
              "state": "CLOSED",
              "number": 1608,
              "body": "# Questions regarding how to use GraphQL\r\n\r\nhttps://docs.aws.amazon.com/en_us/appsync/latest/devguide/scalars.html\r\nI want to deploy my Graphql-js on AppSync. I see it has some scalar specifics ( this case I want to use type AWSEmail). Do we have any way use it?\r\n",
              "createdAt": "2018-12-14T04:15:14Z",
              "author": {
                "login": "q4e2015",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/11896024?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1608",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "improve debug experience for schema",
              "state": "CLOSED",
              "number": 1609,
              "body": "when there are missing types we just get an error message like\r\n```\r\nError: Introspection must provide output type for fields.\r\n```\r\nit would help a lot if the message lists the missing type.",
              "createdAt": "2018-12-15T11:03:41Z",
              "author": {
                "login": "OneCyrus",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/7747800?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1609",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "memo for who wanna use other client with [`import { GraphQLUpload } from 'apollo-upload-server'`](https://github.com/jaydenseric/apollo-upload-examples/blob/f995f7d713bf7c1f6f62d87a35022f0cae656aec/api/resolvers.mjs#L7)",
              "state": "CLOSED",
              "number": 1617,
              "body": "> nodejs\r\n```js\r\nimport fs from 'fs'\r\nimport FormData from 'form-data'\r\nimport axios from 'axios'\r\n\r\nlet o = {\r\n  query: `mutation ($file: Upload!) {\r\n    uploadFile (file: $file)\r\n  }`,\r\n  variables: {\r\n    file: null\r\n  }\r\n}\r\nlet map = {\r\n  '0': ['variables.file']\r\n}\r\nlet fd = new FormData()\r\nfd.append('operations', JSON.stringify(o))\r\nfd.append('map', JSON.stringify(map))\r\nfd.append(0, fs.createReadStream(`${__dirname}/app.js`), 'app.js')\r\n\r\nlet res = await axios.post('/graphql', fd, {\r\n  headers: {\r\n    ...fd.getHeaders()\r\n  }\r\n})\r\nexpect(res.status).to.be.equal(200)\r\nexpect(res.data).to.be.jsonSchema(schema)\r\n```\r\n\r\n_Originally posted by @up9cloud in https://github.com/graphql/graphql-js/issues/960#issuecomment-364672113_",
              "createdAt": "2018-12-17T08:02:01Z",
              "author": {
                "login": "haithanh123",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/17525606?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1617",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Feature request: spread input object type arguments and input interfaces / unions",
              "state": "CLOSED",
              "number": 1620,
              "body": "hey guys,\r\nwould be possible to implement this feature?\r\n\r\n```gql\r\n\r\ninput TagQuery {\r\n  category: String!\r\n  field: String\r\n  values: [String!]\r\n  ... TagInput # spread the input type TagInput field definitions inside TagQuery\r\n}\r\n\r\ninput TagInput {\r\n  relation: String = OR\r\n  query: [TagQuery]\r\n}\r\n\r\n```\r\n\r\nalso, another thing but i'm not sure, it was a while ago last time i attempted.\r\nis it possible to have interfaces and unions for object inputs?\r\nthis would allow to recycle lot of dedicated input types for create / update mutations wether the fields could be required or not depending on the action \r\n\r\n```gql\r\ninterface input InputPostInterface {\r\n  id: ID\r\n  title: String\r\n  description: String\r\n  body: String\r\n  type: String\r\n}\r\n\r\ninput InputCreatePost implements InputPostInterface {\r\n  id: ID\r\n  title: String!\r\n  description: String\r\n  body: String\r\n  type: String!\r\n}\r\n\r\ninput InputUpdatePost implements InputPostInterface {\r\n  id: ID!\r\n  title: String\r\n  description: String\r\n  body: String\r\n  type: String\r\n}\r\n\r\n# or perhaps using unions to resolve different input structures based on some argument eg:\r\nunion input PostMeta = MetaPage | MetaArticle | MetaEvent | MetaContact\r\n\r\ninput Post {\r\n  id: ID!\r\n  meta: PostMeta\r\n  type: String!\r\n}\r\n```\r\n\r\n```js\r\n// js resolveType for union\r\n\r\nPostMeta: {\r\n    __resolveType: (root) => {\r\n      if (root.type === 'page') return 'MetaPage';\r\n      if (root.type === 'article') return 'MetaArticle';\r\n      if (root.type === 'event') return 'MetaEvent';\r\n      if (root.type === 'contact') return 'MetaContact';\r\n      return null;\r\n    },\r\n  }\r\n```\r\n\r\nsome tips or pr/issues references to start tackling on this would be appreciated.\r\nthank you!",
              "createdAt": "2018-12-19T16:35:27Z",
              "author": {
                "login": "ricardomoura",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/419044?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1620",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "default field resolver",
              "state": "CLOSED",
              "number": 1630,
              "body": "# Questions regarding how to use GraphQL\r\n\r\nWe want to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track bugs and features that affect development.\r\n\r\nIf you have a question on how to use GraphQL, please [post it to Stack Overflow](https://stackoverflow.com/questions/ask?tags=graphql) with the tag [#graphql](https://stackoverflow.com/questions/tagged/graphql).\r\n\r\nPlease do not post general questions directly as GitHub issues. They may sit for weeks unanswered, or may be spontaneously closed without answer.\r\n\r\n# Reporting issues with GraphQL.js\r\n\r\nBefore filing a new issue, make sure an issue for your problem doesn't already exist.\r\n\r\nThe best way to get a bug fixed is to provide a *pull request* with a simplified failing test case (or better yet, include a fix).\r\n\r\n# Feature requests\r\n\r\nGraphQL.js is a reference implementation of the [GraphQL specification](https://github.com/facebook/graphql). To discuss new features which are not GraphQL.js specific and fundamentally change the way GraphQL works, open an issue against the specification.\r\n\r\n# Security bugs\r\n\r\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe disclosure of security bugs. With that in mind, please do not file public issues; go through the process outlined on that page.\r\n",
              "createdAt": "2018-12-27T09:55:07Z",
              "author": {
                "login": "MendesKevin",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/15120585?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1630",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "default field resolver",
              "state": "CLOSED",
              "number": 1631,
              "body": "",
              "createdAt": "2018-12-27T09:58:01Z",
              "author": {
                "login": "MendesKevin",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/15120585?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1631",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Why root-level resolver params aren't passed to instance-level resolver by default ?",
              "state": "CLOSED",
              "number": 1632,
              "body": " Hi, in [https://graphql.github.io/graphql-js/object-types/](graphql/graphql-js)\r\n> Instead of a root-level resolver for the RandomDie type, we can instead use an ES6 class, where the resolvers are instance methods.\r\n\r\nBut graphql-js doesn't pass params resolver `( root, args, context, info )` for \"instance-level\" resolver.\r\n\r\nThere is a way to allow that globally or I must need wrap with a root-level resolver for each field where I call the instance-level resolver or this isn't the recommended GraphQL way ?\r\n```\r\nclass RandomDie {\r\n  constructor(dice) {\r\n    this._numSides = dice.numSides\r\n  }\r\n\r\n  numSides(context) {\r\n    context.canSeeNumSides ? this._numSides : null\r\n  }\r\n}\r\n\r\nconst resolvers = {\r\n  RandomDie: {\r\n    numSides: (root, args, context, info) => root.numSides(context)\r\n  }\r\n}\r\n```\r\nnote: I use `{ makeExecutableSchema } from graph-tools` ",
              "createdAt": "2018-12-27T11:31:13Z",
              "author": {
                "login": "MendesKevin",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/15120585?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1632",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "[lexer] Block string does not advance line",
              "state": "CLOSED",
              "number": 1636,
              "body": "Lexer does not advance line number when tokenizing block strings.\r\n\r\nLine numbers are then shifted on all following tokens",
              "createdAt": "2018-12-28T01:37:47Z",
              "author": {
                "login": "langpavel",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/142462?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1636",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "install from CDN?",
              "state": "CLOSED",
              "number": 1639,
              "body": "hi all;\r\nI do not use NPM/WEBPACK etc. I have 2 questions:\r\n1. can I 'install' this library from CDN\r\n2. can I use ES5 only with this library? (not ES6 transpiled to 5 but actual 5 from the start)\r\nthanks",
              "createdAt": "2019-01-01T12:28:42Z",
              "author": {
                "login": "guykatz",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/2852437?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1639",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "AWS directives",
              "state": "CLOSED",
              "number": 1659,
              "body": "https://docs.aws.amazon.com/appsync/latest/devguide/real-time-data.html\r\n\r\nIs there any way to implement the @aws_subscribe?\r\n\r\nFor example,\r\n```\r\nimport {\r\n    GraphQLSchema,\r\n    GraphQLObjectType,\r\n    GraphQLString,\r\n    printSchema,\r\n    GraphQLFieldConfig\r\n} from 'graphql';\r\n\r\nexport function handler() {\r\n\r\n    const schema = new GraphQLSchema({\r\n        query: new GraphQLObjectType({\r\n            name: 'Query',\r\n            fields: {\r\n                hello: {\r\n                    type: GraphQLString,\r\n                    resolve() {\r\n                        return 'world';\r\n                    }\r\n                }\r\n            }\r\n        }),\r\n        subscription: new GraphQLObjectType({\r\n            name: 'Subscription',\r\n            fields: {\r\n                subscription:<GraphQLFieldConfig<any, any>> {\r\n                    type: GraphQLString,\r\n                    resolve() {\r\n                        return 'world';\r\n                    }\r\n                }\r\n            }\r\n        })\r\n    });\r\n\r\n    const x = printSchema(schema);\r\n\r\n    console.log(x);\r\n}\r\n```\r\n\r\nwill output\r\n```\r\ntype Query {\r\n  hello: String\r\n}\r\n\r\ntype Subscription {\r\n  subscription: String\r\n}\r\n```\r\nHow can I make it like\r\n```\r\ntype Query {\r\n  hello: String\r\n}\r\n\r\ntype Subscription {\r\n  subscription: String\r\n     @aws_subscribe(mutations: [\"addPost\"])\r\n}\r\n```\r\n\r\nThank you.",
              "createdAt": "2019-01-11T11:17:15Z",
              "author": {
                "login": "nealyip",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/6487585?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1659",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Latest version v14.1.0 breaks react-apollo and apollo-boost",
              "state": "CLOSED",
              "number": 1668,
              "body": "I have upgraded to latest version of GraphQL v14.1.0 and my build won't work after that. It fails to require `react-apollo` and `apollo-boost`. \r\n\r\nVersion 14.0.2 works fine.\r\n",
              "createdAt": "2019-01-16T06:44:24Z",
              "author": {
                "login": "pitops",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/9624361?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1668",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Add tests for 'toConfig' functionality",
              "state": "OPEN",
              "number": 1674,
              "body": "Just a reminder that I need to write a test for `toConfig` functionality but I don't mind if someone wants to help 😉 ",
              "createdAt": "2019-01-18T21:27:31Z",
              "author": {
                "login": "IvanGoncharov",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/8336157?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1674",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "chore",
                      "color": "e99695"
                    }
                  },
                  {
                    "node": {
                      "name": "help wanted",
                      "color": "159818"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "null id error, query return object with null id",
              "state": "CLOSED",
              "number": 1675,
              "body": "Graphql return Oject with null id. with mongodb.\r\n\r\nIt looks strange to me.\r\n\r\nIf I delete new GraphQLNonNull() id on MailType, It works with id: null, another fields working fine.\r\n```\r\nconst MailType = new GraphQLObjectType({\r\n    name: 'Mail',\r\n    fields: () => ({\r\n        id: { type: new GraphQLNonNull(GraphQLID), },\r\n...\r\n})\r\n\r\nconst Query = {\r\n    mails: {\r\n        type: new GraphQLList(MailType),\r\n        args: {\r\n            senderId: { type: GraphQLID },\r\n            isOffline: { type: GraphQLBoolean },\r\n        },\r\n        async resolve(root, args, req, ctx) {\r\n            if (args.isOffline === false) {\r\n                let a = await model.aggregate([\r\n                  { $match: { isOffline: false } },\r\n                ]);\r\n                let b = await model.find({ isOffline: false });\r\n                console.log(JSON.stringify(a) == JSON.Stringify(b)) /// return true\r\n                return a // error\r\n                return b // working\r\n            }\r\n            return model.find({senderId: args.senderId});\r\n        }\r\n    }\r\n}\r\n```\r\n// with a\r\n    \"errors\": [\r\n        {\r\n            \"message\": \"Cannot return null for non-nullable field Mail.id.\"\r\n        }]\r\n\r\na, b is array of mail. Both have mails with valid id.",
              "createdAt": "2019-01-20T04:55:05Z",
              "author": {
                "login": "yusunglee2074",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/22088070?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1675",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "NonNullable fields within a list cause wrong error to be reported",
              "state": "CLOSED",
              "number": 1680,
              "body": "When calling a resolver that returns an item that contains a list, and that list type has a NonNullable field, yet the data getting sent back is null for it, then the wrong error is reported. \r\n\r\nExample:\r\n```\r\ntype Data {\r\n   items: [LineItem]!\r\n}\r\n\r\ntype LineItem {\r\n    quantity: Int!\r\n    URL: String!\r\n}\r\n```\r\n\r\nIf the resolver returns Data, and an item contains a URL that is null, then it reports quantity as the error.\r\nExample response data:\r\n```\r\n{\r\n   items: [\r\n      { quantity: 1, URL: \"Test1\" },\r\n      { quantity: 1, URL: \"Test2\" },\r\n      { quantity: 3, URL: \"Test3\" },\r\n      { quantity: 3 },\r\n      { quantity: 1, URL: \"Test5\" },\r\n   ]\r\n}\r\n```\r\n\r\nError reported in response to client:\r\n```Cannot return null for non-nullable field LineItem.quantity.```\r\n\r\n\r\n",
              "createdAt": "2019-01-21T19:07:20Z",
              "author": {
                "login": "mikebm",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/11326655?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1680",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Coveralls broken for Node 11",
              "state": "CLOSED",
              "number": 1682,
              "body": "@IvanGoncharov already found this, but adding tracking here: Coveralls appears to be broken for Node 11 on Travis. Sample Travis log: https://travis-ci.org/graphql/graphql-js/jobs/482864463\r\n\r\nAt this point it is unclear why Node 11 specifically is broken.",
              "createdAt": "2019-01-22T15:27:36Z",
              "author": {
                "login": "Neitsch",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/7909844?v=4"
              },
              "assignees": {
                "nodes": [
                  {
                    "name": "Matt Mahoney",
                    "avatarUrl": "https://avatars2.githubusercontent.com/u/1741248?v=4"
                  }
                ]
              },
              "url": "https://github.com/graphql/graphql-js/issues/1682",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "chore",
                      "color": "e99695"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Single-argument mutation fails",
              "state": "CLOSED",
              "number": 1691,
              "body": "graphql@0.13.2\r\n\r\nThis fails when queried from Playground (apollo-boost@0.1.22):\r\n```\r\n    mutation logarino {\r\n    \tlogin(pw:\"flum\")\r\n    }\r\n```\r\nbut only if the mutation is defined with one argument:\r\n\r\n```\r\ntype Mutation {\r\n    login(pw: String!): Int!\r\n}\r\n---\r\n    Mutation: {\r\n        login: (pw) => login(pw),\r\n---\r\nasync function login(_, {pw}) {    //ERROR:  second parameter is null, so {pw} = null throws exception\r\n    console.log({pw})\r\n\r\n    return 3;\r\n}\r\n```\r\n\r\nThis works:\r\n\r\n```\r\ntype Mutation {\r\n    login(pw: String!, dummy: Int): Int!\r\n}\r\n---\r\n    Mutation: {\r\n        login: (pw, dummy) => login(pw, dummy),\r\n---\r\nasync function login(_, {pw}) {    //NO ERROR\r\n    console.log({pw})  // displays pw value\r\n\r\n    return 3;\r\n}\r\n\r\n```\r\n\r\n",
              "createdAt": "2019-01-25T00:06:04Z",
              "author": {
                "login": "JeffML",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/3497069?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1691",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Type extension not in the AST",
              "state": "CLOSED",
              "number": 1701,
              "body": "If I have the follow schema:\r\n\r\n```graphql\r\ntype Query {\r\n  version: String!\r\n  name: String!\r\n}\r\n\r\nextend type Query {\r\n  hello: String!\r\n}\r\n```\r\n\r\nWhen I try to build an AST it doesn't contain the `hello` field. Debugging and I get into the `buildASTSchema` I do see the field in the `documentAST.definitions[1].fields` array but within the `for` loop of `buildASTSchema` I see it never handles the `ObjectTypeExtension` kind. I do see #922 talking about something similar but I don't see why the extensions cannot be properly merged together in the result even if the fields aren't all merged together and it just has an extensions key in the type.\r\n\r\nFor a full example (along with the `IntrospectionQuery` I'm using): https://gist.github.com/mitchellsimoens/eaa0579b07772aabf8d9c876cd2cd6d2",
              "createdAt": "2019-02-01T13:54:09Z",
              "author": {
                "login": "mitchellsimoens",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/325473?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1701",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Use type's fields instead of source object [idea]",
              "state": "CLOSED",
              "number": 1703,
              "body": "Hello.\r\n\r\nI have an idea: For example, we have _words resolver in PaperType_ in our schema:\r\n```\r\nconst PaperType = new GraphQLObjectType({\r\n\tname: \"PaperType\",\r\n\tfields: {\r\n\t\tid: { type: GraphQLID },\r\n\t\ttext: {\r\n\t\t\ttype: GraphQLString,\r\n\t\t\tresolve: ({ text }) => text + \"_changing_my_text_here\"\r\n\t\t},\r\n\t\tsymbols: {\r\n\t\t\ttype: GraphQLInt,\r\n\t\t\tresolve({ text }) {\r\n\t\t\t\t/* It could be great to use text field in PaperType\r\n\t\t\t\t   instead of picking it from the source array. */\r\n\r\n\t\t\t\t/* So here We should add '_changing_my_text_here'\r\n\t\t\t\t   to the text and THEN calculate count of symbols. */\r\n\r\n\t\t\t\treturn (text + '_changing_my_text_here').split(\"\").length - 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n});\r\n```\r\n\r\nSo, it could be great to push/replace getter to the source object, because I've had a lot of **sad** situations when I needed to copy paste code.\r\n\r\nMore details.\r\nFor example, we have an object:\r\n```\r\n{\r\n\tid: \"1a\",\r\n\tname: \"White world\",\r\n\ttype: \"Book\",\r\n\tcreatorID: \"0zh\",\r\n\tyear: 1999,\r\n\ttext: \"Once upon a time\"\r\n}\r\n```\r\n\r\nAnd we will want to access a field described in the `fields` object we will receive it using getter (that will use the field's resolver to return value).\r\n\r\nI could help to avoid writing the same things twice.\r\n\r\nSo, I hope you will read it and correct me if I've done or explained something wrong.",
              "createdAt": "2019-02-01T17:24:56Z",
              "author": {
                "login": "olchyk98",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/40524044?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1703",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Custom GraphQLScalarType instance: parseLiteral is called twice",
              "state": "CLOSED",
              "number": 1713,
              "body": "The parseLiteral method is called twice \r\n\r\n\r\n```\r\nconst express_graphql = require('express-graphql')\r\nvar { buildSchema } = require('graphql')\r\n\r\nvar OddType = new GraphQLScalarType({\r\n  name: 'Odd',\r\n  parseLiteral(ast) {\r\n   console. log('this print twice before continue with the resolver')\r\n    return null\r\n}\r\n}\r\n```",
              "createdAt": "2019-02-04T20:41:55Z",
              "author": {
                "login": "createcsoft",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/12802822?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1713",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Export executeOperation method on /execution/execute",
              "state": "CLOSED",
              "number": 1715,
              "body": "\r\n# Feature requests\r\nIs possible to export [executeOperation](https://github.com/graphql/graphql-js/blob/master/src/execution/execute.js#L392)? I'm working on a package to test/mock some queries/mutations/subscriptions and that'll be really useful because that way the operation can be executed against the mock.\r\n\r\nIf it's possible I can create the PR",
              "createdAt": "2019-02-05T14:33:26Z",
              "author": {
                "login": "estrada9166",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/15656860?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1715",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Mutation Error",
              "state": "CLOSED",
              "number": 1716,
              "body": "Graphql returns a unexpected error message: \r\n\r\n```\r\n\"message\": \"Variable \\\"$_v0_data\\\" got invalid value { data: { firstName: \\\"Testname\\\" }, where: { id: \\\"cjrqiecl7p0b40a85th4ie4uf\\\" } }; Field \\\"data\\\" is not defined by type MemberUpdateInput; did you mean avatar?\\nVariable \\\"$_v0_data\\\" got invalid value { data: { firstName: \\\"Testname\\\" }, where: { id: \\\"cjrqiecl7p0b40a85th4ie4uf\\\" } }; Field \\\"where\\\" is not defined by type MemberUpdateInput.\"\r\n```\r\n\r\nThe expected behaviour is to run the mutation:\r\n\r\n```\r\nmutation {\r\n  updateMember(\r\n    data: {\r\n      firstName: \"Testname\" }\r\n    where: {\r\n      id: \"cjrqiecl7p0b40a85th4ie4uf\"\r\n    }\r\n  ) {\r\n    id\r\n    email\r\n  }\r\n}\r\n```\r\n\r\nBelow image with schema mutation and arguments that should take the above used data. \r\n\r\n<img width=\"2509\" alt=\"screenshot 2019-02-06 at 13 55 46\" src=\"https://user-images.githubusercontent.com/41742232/52343079-6e05d080-2a17-11e9-895f-a2d626f07248.png\">\r\n\r\n",
              "createdAt": "2019-02-06T13:01:42Z",
              "author": {
                "login": "thecodelayeriser",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/41742232?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1716",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Export library version number",
              "state": "OPEN",
              "number": 1726,
              "body": "Developers shouldn't write their own hacks to detect library version:\r\nhttps://github.com/graphql-compose/graphql-compose/blob/0ac3cc16948e7dce098705ff1163801d1f284a0a/src/utils/graphqlVersion.js",
              "createdAt": "2019-02-11T10:14:10Z",
              "author": {
                "login": "IvanGoncharov",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/8336157?v=4"
              },
              "assignees": {
                "nodes": [
                  {
                    "name": "Ivan Goncharov",
                    "avatarUrl": "https://avatars0.githubusercontent.com/u/8336157?v=4"
                  }
                ]
              },
              "url": "https://github.com/graphql/graphql-js/issues/1726",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "enhancement",
                      "color": "84b6eb"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "GraphQL Union and Interface Example",
              "state": "CLOSED",
              "number": 1727,
              "body": "I am looking for an example on GraphQL Union and Interface. Appreciate if any one can help by providing an example or link that shows how to define a query and resolvers for Union and Interface.\r\n\r\nThanks and regards,\r\n\r\nRam",
              "createdAt": "2019-02-12T12:12:26Z",
              "author": {
                "login": "ramprasad2018",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/43319298?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1727",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "\"graphql\" function promise never resolved",
              "state": "CLOSED",
              "number": 1749,
              "body": "In my jest test (TS) I have this part of code:\r\n```javascript\r\nimport { GraphQLSchema, graphql } from \"graphql\";\r\n...\r\ndescribe(\"Functional\", () => {\r\n  let schema: GraphQLSchema\r\n  ...\r\n  it(\"should pass input validation when data without optional field is correct\", async () => {\r\n    const mutation = `mutation {\r\n      sampleMutation(input: {\r\n        stringField: \"12345\",\r\n        numberField: 5,\r\n      }) {\r\n        field\r\n      }\r\n    }`;\r\n    await graphql(schema, mutation);\r\n    expect(argInput).toEqual({ stringField: \"12345\", numberField: 5 });\r\n  });\r\n});\r\n```\r\nthe `schema` variable has this value (The object is too big to post it entirely, so I give you a screenshot):\r\n![image](https://user-images.githubusercontent.com/17951357/53095677-c19b1280-351d-11e9-90f8-2d405b42d080.png)\r\n\r\n\r\n# The problem\r\nThe `await graphql(schema, mutation);` promise are never resolved so the next line are never executed... I don't know why....",
              "createdAt": "2019-02-20T13:44:53Z",
              "author": {
                "login": "OwenCalvin",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/17951357?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1749",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Large memory allocations and very slow execution when type errors occur in complex inputs",
              "state": "OPEN",
              "number": 1753,
              "body": "Hi,\r\n\r\nWe have a rather large complex object as an input. A single request with hundreds of type errors in the input took 9 seconds in `graphql.execute`. The majority of the time spent (>95%) was spent in the `inspect()` call, specifically its recursive object string construction. There were huge amount of memory allocations. With 20 concurrent requests, we can consistently cause node to run out of memory. Changing `inspect()` to return an empty string lowered the total execution time of our process to low hundreds of milliseconds and the process was stable. I don't know the exact latency of `graphql.execute` with `inspect` effectively disabled. Given this finding, I am proposing three changes.\r\n\r\n1. `inspect()` should never be in the execution path as currently written. At the very least, it should not be recursive and/or have a maximum string length. In our case, each `inspect` grew to be over 100KB.\r\n2. There should be a maximum amount of errors in `getVariableValues()`. If the number of errors reaches the maximum, no additional varDefNodes are processed. This grew to be ~1500. Cap at 5? \r\n3. If `inspect()` must be kept, there should also be a maximum total amount of error lengths between error messages in `getVariableValues()`. If the limit is reached, no more varDefNodes should be processed. This would prevent large single errors from multiplying by the cap.\r\n\r\nGiven that we had ~1500 errors, each error was ~100KB and there were 20 concurrent requests, that is 3GB of memory. That is more than the default max-old-space-size.\r\n\r\nItem 2 is an easy fix but 1 and 3 will make the execution path much more robust. We are in an air-gapped environment so I cannot easily provide a reproducible case.\r\n\r\n```\r\n        const properties = Object.keys(value)\r\n          .map(k => `${k}: ${inspect(value[k])}`)\r\n          .join(', ');\r\n```\r\n\r\ngraphql 14.1.1\r\nnode 8.11.3",
              "createdAt": "2019-02-22T05:42:48Z",
              "author": {
                "login": "SoyYoRafa",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/2441438?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1753",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "bug",
                      "color": "fc2929"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Upgrading broke custom scalar resolvers when using with apollo-server",
              "state": "CLOSED",
              "number": 1755,
              "body": "I'm having an issue when `graphql` when using with `apollo-server` and upgrading from `0.13.2` to `14.1.1`. After upgrading, our previously working Scalar Resolvers stopped working: `parseDefault`, `parseLiteral`, and `serialize` are no longer getting called. \r\n\r\nThe reason for the upgrade was that in `0.13.2`, primitive scalar types weren't being properly validated (more details available [here](https://github.com/apollographql/apollo-server/issues/2375)). \r\n\r\nThere are some additional details on [this comment](https://github.com/apollographql/apollo-server/issues/2218#issuecomment-467648380) I made on a related issue in `apollo-server`.\r\n\r\nI'm hoping to get some guidance on whether there is some intermediate version of `graphqI` I could use so that both custom and primitive scalar validation work properly in `apollo-server`.",
              "createdAt": "2019-02-26T23:56:40Z",
              "author": {
                "login": "stephenhandley",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/3257?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1755",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Behavior when querying subscription through incorrect protocol",
              "state": "OPEN",
              "number": 1773,
              "body": "For a subscription field, `resolve` is called with the source parameter set to whatever is yielded from the `subscribe` async iterator. However, I noticed that when a subscription field is queried from a server not using [`subscribe`](https://github.com/graphql/graphql-js/blob/master/src/subscription/subscribe.js), it behaves as if it is a `query` field; `resolve` is called and the source parameter is set to `rootValue`.\r\n\r\nIs it supposed to even be possible to query `subscription` in that case? It seems like it would be appropriate to return an error there. Is this something that is expected to be handled outside of this library?",
              "createdAt": "2019-03-05T04:19:23Z",
              "author": {
                "login": "stephentuso",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/11889560?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1773",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "[Proposal] Add `addField` method for object type",
              "state": "CLOSED",
              "number": 1774,
              "body": "Currently there seems no way to manipulate existing object types. It would be handy to have `addField` method as follows:\r\n\r\n```js\r\nconst objType = new GraphQLObjectType({\r\n  name: 'SomeObject',\r\n  fields: {},\r\n});\r\n\r\nobjType.addField('add', { name: 'add', type: GraphQLInt });\r\n\r\nobjType.getFields()\r\n// {\r\n//   add: { name: 'add', type: GraphQLInt },\r\n// );\r\n```",
              "createdAt": "2019-03-07T15:07:07Z",
              "author": {
                "login": "pd4d10",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/9524411?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1774",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "CoerceFloat throwing error instead of parsing string to float from json",
              "state": "CLOSED",
              "number": 1779,
              "body": "Hi i notice that recently i started getting this error\r\nTypeError: Float cannot represent non numeric value: \"234234234\"\r\n    at GraphQLScalarType.coerceFloat [as parseValue]\r\ni have another api that works fine when i started looking at the problem i realize that graphql was a different version where in version 14.1.1 coerceFloat is \r\n```\r\nfunction`` coerceFloat(value) {\r\n  if (!(0, _isFinite.default)(value)) {\r\n    throw new TypeError(\"Float cannot represent non numeric value: \".concat((0, _inspect.default)(value)));\r\n  }\r\n\r\n  return value;\r\n}\r\n```\r\n in version 0.13.2 coerceFloat is \r\n```\r\nfunction` coerceFloat(value) {\r\n  if (value === '') {\r\n    throw new TypeError('Float cannot represent non numeric value: (empty string)');\r\n  }\r\n  var num = Number(value);\r\n  if (num === num) {\r\n    return num;\r\n  }\r\n  throw new TypeError('Float cannot represent non numeric value: ' + String(value));\r\n}\r\n```\r\n\r\nwhen i copy paste second one in first one in scalar.js it just works fine",
              "createdAt": "2019-03-08T01:52:32Z",
              "author": {
                "login": "BePasquet",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/13737675?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1779",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "[QUESTION] Variables to ID",
              "state": "CLOSED",
              "number": 1780,
              "body": "# Questions about variables.\r\n\r\nCan't find any examples online. If i have a query with 10+ variable object the id would be stringified object. Usually in this object some variables are just defaults.\r\n\r\nIs it possible to override the generated id? so i would like to remove the keys with default values.\r\n\r\n```javascript\r\nquery({a: 1, b: 'foo', c: null, d: [], e: 2, f: undefined, g: {}})\r\n```\r\n1) will have an ID of `\"$ROOT_QUERY.xyz({a: 1, b: 'foo', c: null, d: [], e: 2, f: undefined, g: {}})\"` however It could be shortened to `\"$ROOT_QUERY.xyz({a: 1, b: 'foo', e: 2})\"` in my use case.\r\nor\r\n2) `someHashingAlgorithm({a: 1, b: 'foo', c: null, d: [], e: 2, f: undefined, g: {}})` would also suite my needs.\r\n\r\n",
              "createdAt": "2019-03-08T19:25:19Z",
              "author": {
                "login": "csabascript",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/18576086?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1780",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "inspect causes \"RangeError: Maxim call stack size exceeded\"",
              "state": "OPEN",
              "number": 1783,
              "body": "[version 4.1.1]\r\n inspect causes RangeError in this line from \"values.js\"\r\n```\r\n       error.message =\r\n                `Variable \"$${varName}\" got invalid value ${inspect(value)}; ` +\r\n                error.message;\r\n```\r\nwhen receiving a ```value```  with coercion error that contains an object such as a file to upload, maybe due to its circular structure\r\n\r\n\r\n",
              "createdAt": "2019-03-09T09:16:16Z",
              "author": {
                "login": "slicejunk",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/5887100?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1783",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "bug",
                      "color": "fc2929"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "http2 support",
              "state": "CLOSED",
              "number": 1784,
              "body": "will there be a support for http2?\r\nUsing websocket requires more steps\r\n",
              "createdAt": "2019-03-09T12:38:01Z",
              "author": {
                "login": "juji",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/493553?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1784",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Document how Error instances returned in result get added to errors ",
              "state": "CLOSED",
              "number": 1787,
              "body": "I just stumbled onto a surprising, seemingly undocumented behavior today.\r\n\r\n```graphql\r\n  type TestError {\r\n    message: String!\r\n    code: Int!\r\n  }\r\n\r\n  type ErrorTestResult {\r\n    foo: Int!\r\n    error: TestError!\r\n  }\r\n\r\n  type Mutation {\r\n    errorTest: ErrorTestResult!\r\n  }\r\n```\r\n\r\n```js\r\nconst resolvers = {\r\n  Mutation: {\r\n    errorTest: () => ({\r\n      foo: 2,\r\n      error: Object.assign(new Error('This is a test!'), {code: 2}),\r\n    })\r\n  }\r\n}\r\n\r\nfunction formatError(error: GraphQLError): any {\r\n  const {locations, message, path, originalError} = error\r\n  return {locations, path, ...originalError, message}\r\n}\r\n```\r\n\r\nWith this setup, even though `errorTest` returns an `Error` instead of `throw`ing it, `graphql` interprets it as an error:\r\n\r\n```graphql\r\nmutation {\r\n  errorTest {\r\n    foo\r\n    error {\r\n      message\r\n    }\r\n  }\r\n}\r\n```\r\n```json\r\n{\r\n  \"data\": null,\r\n  \"errors\": [\r\n    {\r\n      \"locations\": [\r\n        {\r\n          \"line\": 4,\r\n          \"column\": 5\r\n        }\r\n      ],\r\n      \"path\": [\r\n        \"errorTest\",\r\n        \"error\"\r\n      ],\r\n      \"code\": 2,\r\n      \"message\": \"This is a test!\"\r\n    }\r\n  ]\r\n}\r\n```\r\nI'm not sure if this is even intentional (I bet it's an accident of how `graphql` internally handles errors thrown by field resolvers). But this is actually pretty cool, because I can see it being really handy for passing custom field-specific errors back to the client.\r\n\r\nHowever, it seems undocumented as far as I can tell",
              "createdAt": "2019-03-12T19:27:34Z",
              "author": {
                "login": "jedwards1211",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/1448194?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1787",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "how to handle whitespace in Schema types?",
              "state": "CLOSED",
              "number": 1788,
              "body": "![fixes](https://user-images.githubusercontent.com/26404433/54239570-5b624800-453d-11e9-8c32-9db601cd202c.png)\r\n",
              "createdAt": "2019-03-12T22:08:40Z",
              "author": {
                "login": "zeeshanaligold",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/26404433?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1788",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Add field directives on Info",
              "state": "OPEN",
              "number": 1789,
              "body": "It's possible to add a new field on info with the directives of that field?\r\n\r\n### Reason:\r\nThe main reason for this is that using a `fieldResolver` it'll be possible to add some extra logic on selected fields.\r\n\r\n### Example:\r\n**schema**\r\n```gql\r\ndirective @uppercase on FIELD_DEFINITION\r\n\r\ntype Me {\r\n  email: String!\r\n  username: String!\r\n  fullName: String! @uppercase\r\n  apiKey: String!\r\n}\r\n\r\ntype Query {\r\n  getMe: Me!\r\n}\r\n```\r\n\r\n**fieldResolver**\r\n```js\r\nfunction fieldResolver(value, args, ctx, info) {\r\n  const result = defaultFieldResolver(value, args, ctx, info)\r\n\r\n  const uppercase = info.fieldDirectives.find(directive => directive.name.value === 'uppercase') \r\n\r\n  if (uppercase) {\r\n    return result.toUpperCase()\r\n  }\r\n\r\n  return result\r\n}\r\n```\r\n\r\n**using express-graphql**\r\n```js\r\napp.use('/graphql', (req, res) => {\r\n  graphqlHTTP({\r\n    schema,\r\n    rootValue,\r\n    graphiql: true,\r\n    fieldResolver\r\n  })(req, res)\r\n})\r\n```\r\n\r\n### Possible solution\r\nIn this method, we can get the directives from `fieldDef.astNode.directives`\r\nhttps://github.com/graphql/graphql-js/blob/b8eb8de714e38e414d4e36ae01aea161b352eb13/src/execution/execute.js#L696-L717\r\n\r\n---\r\nAlso, if this is accepted, I can work on that ",
              "createdAt": "2019-03-13T00:34:18Z",
              "author": {
                "login": "estrada9166",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/15656860?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1789",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "needs exploration",
                      "color": "fbca04"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Anyone can suggest me to implement joi validation in reactjs with graphql",
              "state": "CLOSED",
              "number": 1790,
              "body": "# Questions regarding how to use GraphQL\r\n\r\nWe want to keep signal strong in the GitHub issue tracker – to make sure that it remains the best place to track bugs and features that affect development.\r\n\r\nIf you have a question on how to use GraphQL, please [post it to Stack Overflow](https://stackoverflow.com/questions/ask?tags=graphql) with the tag [#graphql](https://stackoverflow.com/questions/tagged/graphql).\r\n\r\nPlease do not post general questions directly as GitHub issues. They may sit for weeks unanswered, or may be spontaneously closed without answer.\r\n\r\n# Reporting issues with GraphQL.js\r\n\r\nBefore filing a new issue, make sure an issue for your problem doesn't already exist.\r\n\r\nThe best way to get a bug fixed is to provide a *pull request* with a simplified failing test case (or better yet, include a fix).\r\n\r\n# Feature requests\r\n\r\nGraphQL.js is a reference implementation of the [GraphQL specification](https://github.com/facebook/graphql). To discuss new features which are not GraphQL.js specific and fundamentally change the way GraphQL works, open an issue against the specification.\r\n\r\n# Security bugs\r\n\r\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe disclosure of security bugs. With that in mind, please do not file public issues; go through the process outlined on that page.\r\n",
              "createdAt": "2019-03-13T05:06:41Z",
              "author": {
                "login": "ankitpatelinitio",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/48117127?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1790",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Duplicate fields in deep inputs not validated properly",
              "state": "CLOSED",
              "number": 1791,
              "body": "When using a simple input, setting the same key twice will give an error: `There can be only one input field named \"y\".`\r\n\r\nWhen using an input in an input, that second level input will not give the same error.\r\n\r\n```javascript\r\nvar { graphql, buildSchema } = require('graphql');\r\n\r\n// Construct a schema, using GraphQL schema language\r\nvar schema = buildSchema(`\r\n  type Query {\r\n    deepInput(input: InputA): String,\r\n    singleInput(input: InputB): String\r\n  }\r\n\r\n  input InputA {\r\n    x: InputB\r\n  }\r\n\r\n  input InputB {\r\n    y: String\r\n  }\r\n`);\r\n\r\nvar root = {\r\n  singleInput: () => {\r\n    return 'Hello single world!';\r\n  },\r\n  deepInput: () => {\r\n    return 'Hello deep world!';\r\n  },\r\n};\r\n\r\n// This will five the error that `y` is defined twice\r\ngraphql(schema, '{ singleInput(input: { y: \"foo\", y: \"bar\" }) }', root).then((response) => {\r\n  console.log(response);\r\n}, (error) => {\r\n  console.log(error)\r\n});\r\n\r\n// But this won't\r\ngraphql(schema, '{ deepInput(input: { x: { y: \"foo\", y: \"bar\" } }) }', root).then((response) => {\r\n  console.log(response);\r\n}, (error) => {\r\n  console.log(error)\r\n});\r\n```",
              "createdAt": "2019-03-14T19:51:22Z",
              "author": {
                "login": "jbblanchet",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/2847338?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1791",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "bug",
                      "color": "fc2929"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Feature request: prettyPrint",
              "state": "OPEN",
              "number": 1799,
              "body": "# Request: Add a Pretty-Printing function to go from AST => well-formatted string\r\n\r\nThis is a utility I've wanted to exist as part of the core library for a long time. @adek05 began a simple implementation of this in #1557. The Prettier library has even implemented a version of this: https://github.com/prettier/prettier/tree/master/src/language-graphql\r\n\r\n## Ideal API (I think)\r\n- Should take in a \"max-width\" as configuration (default to 80 chars?)\r\n- Should preserve comments from the original source\r\n- Should be extensible in the future to support prettier-like configs\r\n\r\n## Why not re-use `print`?\r\n- Ideally, `print` is as high-performance as possible. I imagine calculating line-width will be a non-trivial performance regression, as would preserving comments.\r\n- `print` currently does not preserve comments, and it would potentially break tooling that depends on this comment-stripping feature.\r\n- This would likely be experimental. We should make sure the output is \"ideal\" before making the default print functionality be \"pretty\".\r\n\r\n## What are potential use cases?\r\n- Codemod tooling that wants to do a one-time insertion of an AST node into existing GraphQL source files. The current `print` re-formats and strips comments, and leads to super-long lines if, for instance, your query has more than 4 variable definitions.\r\n- Test output snapshots would be easier to read, and easier to see how they change over time\r\n- Prettier and prettier-like tooling could consume this new print function directly\r\n",
              "createdAt": "2019-03-22T20:59:16Z",
              "author": {
                "login": "mjmahone",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/1741248?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1799",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "enhancement",
                      "color": "84b6eb"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Cut  '14.2.0' release",
              "state": "CLOSED",
              "number": 1803,
              "body": "ATM we have 113 unreleased commits in `master` including few bug fixes and a partial fix for security problem reported #1753 \r\nI don't think we should further delay this release.\r\nAlso, a few community members contacted me saying they depend on features that exist only in `master` and they can't release they code util `14.2.0`.\r\n\r\nATM, I'm working on generating changelog based on PR labels.\r\n@mjmahone What do you think?",
              "createdAt": "2019-03-26T15:21:02Z",
              "author": {
                "login": "IvanGoncharov",
                "avatarUrl": "https://avatars0.githubusercontent.com/u/8336157?v=4"
              },
              "assignees": {
                "nodes": [
                  {
                    "name": "Ivan Goncharov",
                    "avatarUrl": "https://avatars0.githubusercontent.com/u/8336157?v=4"
                  }
                ]
              },
              "url": "https://github.com/graphql/graphql-js/issues/1803",
              "labels": {
                "edges": []
              }
            }
          },
          {
            "node": {
              "title": "Unexpected GraphQL type definition: Query (As string: Query).Please check that you are importing only one instance of the 'graphql' package.",
              "state": "CLOSED",
              "number": 1804,
              "body": "# Unexpected GraphQL type definition: Query (As string: Query).Please check that you are importing only one instance of the 'graphql' package.\r\n\r\ncurrent version: \"graphql\": \"**14.1.1**\",\r\nthe version I'm currently using is OK. I get this error message when I update to version **14.2.0**\r\nHow can I solve this problem? I'll lower the version if I can't solve it. Thank you in advance for your help.\r\n\r\n**package.json** \r\n```json\r\n{\r\n\"name\": \"graphql-modules-accountsjs-server\",\r\n\"version\": \"1.0.0\",\r\n\"description\": \"GraphQL-Modules AccountsJS Boilerplate\",\r\n\"main\": \"src/index.ts\",\r\n\"repository\": \"https://github.com/ardatan/graphql-modules-accountsjs-boilerplate\",\r\n\"author\": \"Arda TANRIKULU\",\r\n\"license\": \"MIT\",\r\n\"scripts\": {\r\n\"generate\": \"gql-gen\",\r\n\"generate:watch\": \"nodemon --exec yarn generate -e graphql\",\r\n\"start:server\": \"ts-node -r tsconfig-paths/register -T src/index.ts\",\r\n\"start:server:watch\": \"nodemon --exec yarn start:server -e ts\",\r\n\"dev\": \"concurrently \"yarn generate:watch\" \"yarn start:server:watch\"\",\r\n\"start\": \"yarn generate && yarn start:server\",\r\n\"build\": \"tsc\"\r\n},\r\n\"dependencies\": {\r\n\"@accounts/graphql-api\": \"0.13.0\",\r\n\"@accounts/mongo\": \"0.13.0\",\r\n\"@accounts/password\": \"0.13.0\",\r\n\"@accounts/server\": \"0.13.0\",\r\n\"@graphql-modules/di\": \"0.6.5\",\r\n\"@graphql-modules/core\": \"0.6.5\",\r\n\"@types/express\": \"4.16.1\",\r\n\"@types/express-graphql\": \"0.6.2\",\r\n\"@types/graphql\": \"14.0.7\",\r\n\"@types/mongodb\": \"3.1.22\",\r\n\"cors\": \"2.8.5\",\r\n\"express\": \"4.16.4\",\r\n\"express-graphql\": \"0.7.1\",\r\n\"graphql\": \"14.1.1\",\r\n\"graphql-tag\": \"2.10.1\",\r\n\"graphql-toolkit\": \"0.2.8\",\r\n\"graphql-tools\": \"4.0.4\",\r\n\"mongodb\": \"3.2.2\",\r\n\"reflect-metadata\": \"0.1.13\",\r\n\"ts-node\": \"8.0.3\",\r\n\"tsconfig-paths\": \"3.8.0\",\r\n\"tslib\": \"1.9.3\",\r\n\"typescript\": \"3.3.4000\"\r\n},\r\n\"devDependencies\": {\r\n\"concurrently\": \"4.1.0\",\r\n\"graphql-code-generator\": \"0.18.0\",\r\n\"graphql-codegen-add\": \"0.18.0\",\r\n\"graphql-codegen-typescript-common\": \"0.18.0\",\r\n\"graphql-codegen-typescript-mongodb\": \"0.18.0\",\r\n\"graphql-codegen-typescript-resolvers\": \"0.18.0\",\r\n\"graphql-codegen-typescript-server\": \"0.18.0\",\r\n\"nodemon\": \"1.18.10\"\r\n}\r\n}\r\n```\r\n @umutyerebakmaz\r\n   \r\n \r\n\r\n\r\n\r\n\r\n",
              "createdAt": "2019-03-27T07:42:37Z",
              "author": {
                "login": "umutyerebakmaz",
                "avatarUrl": "https://avatars3.githubusercontent.com/u/13598231?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1804",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Is there a way to use this plugin with the normal HTML page to perform GraphQL calls",
              "state": "CLOSED",
              "number": 1805,
              "body": "I want to use this with an already existing HTML application built with Zend framework. Is there a way to do it efficiently ?\r\n",
              "createdAt": "2019-03-28T12:37:48Z",
              "author": {
                "login": "suryacaprice",
                "avatarUrl": "https://avatars1.githubusercontent.com/u/24731040?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1805",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "question",
                      "color": "cc317c"
                    }
                  }
                ]
              }
            }
          },
          {
            "node": {
              "title": "Upstreaming graphql-jit",
              "state": "OPEN",
              "number": 1811,
              "body": "Hey, I am maintaining a high performance execution engine which I have named [graphql-jit](https://github.com/ruiaraujo/graphql-jit).\r\n\r\nI was wondering whether there would be interest in merging that work with this project and expose both engines to the user.\r\n\r\nFor the record, this approach is between 10 to 50x faster than graphql-js so I think the community could benefit a lot. Also it is reasonably battle tested having been running in production for 9 month @ [Zalando](https://www.zalando.de).",
              "createdAt": "2019-03-31T22:45:57Z",
              "author": {
                "login": "ruiaraujo",
                "avatarUrl": "https://avatars2.githubusercontent.com/u/303833?v=4"
              },
              "assignees": {
                "nodes": []
              },
              "url": "https://github.com/graphql/graphql-js/issues/1811",
              "labels": {
                "edges": [
                  {
                    "node": {
                      "name": "needs exploration",
                      "color": "fbca04"
                    }
                  }
                ]
              }
            }
          }
        ]
      }
    }
  }
}